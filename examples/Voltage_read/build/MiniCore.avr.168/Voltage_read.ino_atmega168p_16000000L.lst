
C:\Users\UERJBotz\AppData\Local\Temp\arduino\sketches\44F4DF874E539FAA0CCDEB304986BF5F/Voltage_read.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__ctors_end>
       4:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__vector_1>
       8:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__vector_2>
       c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      10:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      14:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      18:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      1c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      20:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      24:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      28:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      2c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      30:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      34:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      38:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      3c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      40:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__vector_16>
      44:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      48:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__vector_18>
      4c:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__vector_19>
      50:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      54:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      58:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      5c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      60:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      64:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <GPIO_CORE::voltage()+0x1e>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <GPIO_CORE::analog_to_voltage(unsigned int)+0x12>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <GPIO_CORE::setRange(float, float) [clone .part.1]+0x8e>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <digital_pin_to_bit_mask_PGM+0x13>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <__ctors_end+0x4>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <digital_pin_to_timer_PGM>:
     162:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     172:	00 00 00 00 00 00 00                                .......

00000179 <digital_pin_to_bit_mask_PGM>:
     179:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     189:	04 08 10 20 40 80 40                                ... @.@

00000190 <digital_pin_to_port_PGM>:
     190:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1a0:	03 03 03 03 02 02 03                                .......

000001a7 <port_to_input_PGM>:
     1a7:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001b1 <port_to_output_PGM>:
     1b1:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001bb <port_to_mode_PGM>:
     1bb:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000001c6 <__ctors_start>:
__ctors_start():
     1c6:	89 01       	movw	r16, r18
     1c8:	50 0a       	sbc	r5, r16

000001ca <__ctors_end>:
__dtors_end():
     1ca:	11 24       	eor	r1, r1
     1cc:	1f be       	out	0x3f, r1	; 63
     1ce:	cf ef       	ldi	r28, 0xFF	; 255
     1d0:	d4 e0       	ldi	r29, 0x04	; 4
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	cd bf       	out	0x3d, r28	; 61

000001d6 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     1d6:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     1d8:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     1da:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     1dc:	ea ee       	ldi	r30, 0xEA	; 234
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     1de:	f3 e3       	ldi	r31, 0x33	; 51
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     1e2:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     1e4:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     1e6:	a4 34       	cpi	r26, 0x44	; 68
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     1e8:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     1ea:	d9 f7       	brne	.-10     	; 0x1e2 <__do_copy_data+0xc>

000001ec <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1ec:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1ee:	a4 e4       	ldi	r26, 0x44	; 68
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1f0:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <.do_clear_bss_start>

000001f4 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1f4:	1d 92       	st	X+, r1

000001f6 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1f6:	ab 39       	cpi	r26, 0x9B	; 155
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1f8:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <.do_clear_bss_loop>

000001fc <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     1fc:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     1fe:	c5 ee       	ldi	r28, 0xE5	; 229
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     200:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     202:	04 c0       	rjmp	.+8      	; 0x20c <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     204:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     206:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     208:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     20c:	c3 3e       	cpi	r28, 0xE3	; 227
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     20e:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     210:	c9 f7       	brne	.-14     	; 0x204 <__do_global_ctors+0x8>
     212:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <main>
     216:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <_exit>

0000021a <__bad_interrupt>:
__vector_22():
     21a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021e <setup>:
_ZN14HardwareSerial5beginEm():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     21e:	26 e0       	ldi	r18, 0x06	; 6
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	52 ec       	ldi	r21, 0xC2	; 194
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	81 ef       	ldi	r24, 0xF1	; 241
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	0e 94 96 09 	call	0x132c	; 0x132c <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
C:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\examples\Voltage_read/Voltage_read.ino:7

GPIO_CORE V(A0,GPIO_ADC);

void setup() {
  Serial.begin(115200);
  V.begin();
     230:	84 e4       	ldi	r24, 0x44	; 68
     232:	92 e0       	ldi	r25, 0x02	; 2
     234:	0e 94 33 08 	call	0x1066	; 0x1066 <GPIO_CORE::begin()>
C:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\examples\Voltage_read/Voltage_read.ino:8
  V.filter_LowPass(0.8);
     238:	4d ec       	ldi	r20, 0xCD	; 205
     23a:	5c ec       	ldi	r21, 0xCC	; 204
     23c:	6c e4       	ldi	r22, 0x4C	; 76
     23e:	7f e3       	ldi	r23, 0x3F	; 63
     240:	84 e4       	ldi	r24, 0x44	; 68
     242:	92 e0       	ldi	r25, 0x02	; 2
     244:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <GPIO_CORE::filter_LowPass(float)>

00000248 <loop>:
loop():
C:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\examples\Voltage_read/Voltage_read.ino:11
}

void loop() {
     248:	cf 92       	push	r12
     24a:	df 92       	push	r13
     24c:	ef 92       	push	r14
     24e:	ff 92       	push	r15
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	62 97       	sbiw	r28, 0x12	; 18
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
C:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\examples\Voltage_read/Voltage_read.ino:13
  
  float v_filter = V.voltage();
     264:	84 e4       	ldi	r24, 0x44	; 68
     266:	92 e0       	ldi	r25, 0x02	; 2
     268:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <GPIO_CORE::voltage()>
     26c:	6b 01       	movw	r12, r22
     26e:	7c 01       	movw	r14, r24
C:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\examples\Voltage_read/Voltage_read.ino:14
  float v_real   = V.analog_to_voltage(V.value());
     270:	84 e4       	ldi	r24, 0x44	; 68
     272:	92 e0       	ldi	r25, 0x02	; 2
     274:	0e 94 26 03 	call	0x64c	; 0x64c <GPIO_CORE::value()>
     278:	bc 01       	movw	r22, r24
     27a:	84 e4       	ldi	r24, 0x44	; 68
     27c:	92 e0       	ldi	r25, 0x02	; 2
     27e:	0e 94 4e 03 	call	0x69c	; 0x69c <GPIO_CORE::analog_to_voltage(unsigned int)>
     282:	ab 01       	movw	r20, r22
     284:	bc 01       	movw	r22, r24
C:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\examples\Voltage_read/Voltage_read.ino:16

  Serial.println( String( v_filter ) + "V " + String( v_real ) + "V" );
     286:	22 e0       	ldi	r18, 0x02	; 2
     288:	ce 01       	movw	r24, r28
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <String::String(float, unsigned char)>
     290:	22 e0       	ldi	r18, 0x02	; 2
     292:	b7 01       	movw	r22, r14
     294:	a6 01       	movw	r20, r12
     296:	ce 01       	movw	r24, r28
     298:	0d 96       	adiw	r24, 0x0d	; 13
     29a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <String::String(float, unsigned char)>
_ZN15StringSumHelperC4ERK6String():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:216
};

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
     29e:	be 01       	movw	r22, r28
     2a0:	63 5f       	subi	r22, 0xF3	; 243
     2a2:	7f 4f       	sbci	r23, 0xFF	; 255
     2a4:	ce 01       	movw	r24, r28
     2a6:	07 96       	adiw	r24, 0x07	; 7
     2a8:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <String::String(String const&)>
loop():
C:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\examples\Voltage_read/Voltage_read.ino:16
     2ac:	63 e1       	ldi	r22, 0x13	; 19
     2ae:	71 e0       	ldi	r23, 0x01	; 1
     2b0:	ce 01       	movw	r24, r28
     2b2:	07 96       	adiw	r24, 0x07	; 7
     2b4:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <operator+(StringSumHelper const&, char const*)>
     2b8:	be 01       	movw	r22, r28
     2ba:	6f 5f       	subi	r22, 0xFF	; 255
     2bc:	7f 4f       	sbci	r23, 0xFF	; 255
     2be:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <operator+(StringSumHelper const&, String const&)>
     2c2:	66 e1       	ldi	r22, 0x16	; 22
     2c4:	71 e0       	ldi	r23, 0x01	; 1
     2c6:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <operator+(StringSumHelper const&, char const*)>
     2ca:	bc 01       	movw	r22, r24
     2cc:	81 ef       	ldi	r24, 0xF1	; 241
     2ce:	92 e0       	ldi	r25, 0x02	; 2
     2d0:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     2d4:	ce 01       	movw	r24, r28
     2d6:	07 96       	adiw	r24, 0x07	; 7
     2d8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
loop():
C:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\examples\Voltage_read/Voltage_read.ino:16
     2dc:	ce 01       	movw	r24, r28
     2de:	0d 96       	adiw	r24, 0x0d	; 13
     2e0:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
     2e4:	ce 01       	movw	r24, r28
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
C:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\examples\Voltage_read/Voltage_read.ino:18

  delay(10);
     2ec:	6a e0       	ldi	r22, 0x0A	; 10
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <delay>
C:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\examples\Voltage_read/Voltage_read.ino:20

}
     2f8:	62 96       	adiw	r28, 0x12	; 18
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	df 90       	pop	r13
     30e:	cf 90       	pop	r12
     310:	08 95       	ret

00000312 <_GLOBAL__sub_I_V>:
_GLOBAL__sub_I_V():
C:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\examples\Voltage_read/Voltage_read.ino:3
#include "GPIO_CORE.h"

GPIO_CORE V(A0,GPIO_ADC);
     312:	46 e0       	ldi	r20, 0x06	; 6
     314:	6e e0       	ldi	r22, 0x0E	; 14
     316:	84 e4       	ldi	r24, 0x44	; 68
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	0c 94 45 02 	jmp	0x48a	; 0x48a <GPIO_CORE::GPIO_CORE(unsigned char, unsigned char)>

0000031e <GPIO_CORE_CB_DIG_IN_HIGH(unsigned char, unsigned int)>:
_Z24GPIO_CORE_CB_DIG_IN_HIGHhj():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:458
  uint16_t dt = (_T/200);
  for(int j=0;j<n;j++){
    for(int i=0;  i<100;i++){ write(10*i); delay(dt); }
    for(int i=100;i>0;  i--){ write(10*i); delay(dt); }
  }
}
     31e:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <digitalRead>

00000322 <GPIO_CORE_CB_DIG_IN_LOW(unsigned char, unsigned int)>:
_Z23GPIO_CORE_CB_DIG_IN_LOWhj():
     322:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <digitalRead>
     326:	21 e0       	ldi	r18, 0x01	; 1
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	89 2b       	or	r24, r25
     32c:	11 f0       	breq	.+4      	; 0x332 <GPIO_CORE_CB_DIG_IN_LOW(unsigned char, unsigned int)+0x10>
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	c9 01       	movw	r24, r18
     334:	08 95       	ret

00000336 <GPIO_CORE_CB_ADC_HIGH(unsigned char, unsigned int)>:
_Z21GPIO_CORE_CB_ADC_HIGHhj():
     336:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <analogRead>

0000033a <GPIO_CORE_CB_ADC_LOW(unsigned char, unsigned int)>:
_Z20GPIO_CORE_CB_ADC_LOWhj():
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	eb 01       	movw	r28, r22
     340:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <analogRead>
     344:	9e 01       	movw	r18, r28
     346:	28 1b       	sub	r18, r24
     348:	39 0b       	sbc	r19, r25
     34a:	c9 01       	movw	r24, r18
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <GPIO_CORE::setRange(float, float) [clone .part.1]>:
_ZN9GPIO_CORE8setRangeEff():
     352:	4f 92       	push	r4
     354:	5f 92       	push	r5
     356:	6f 92       	push	r6
     358:	7f 92       	push	r7
     35a:	8f 92       	push	r8
     35c:	9f 92       	push	r9
     35e:	af 92       	push	r10
     360:	bf 92       	push	r11
     362:	cf 92       	push	r12
     364:	df 92       	push	r13
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	00 d0       	rcall	.+0      	; 0x374 <GPIO_CORE::setRange(float, float) [clone .part.1]+0x22>
     374:	00 d0       	rcall	.+0      	; 0x376 <GPIO_CORE::setRange(float, float) [clone .part.1]+0x24>
     376:	00 d0       	rcall	.+0      	; 0x378 <GPIO_CORE::setRange(float, float) [clone .part.1]+0x26>
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	9e 83       	std	Y+6, r25	; 0x06
     37e:	8d 83       	std	Y+5, r24	; 0x05
     380:	2a 01       	movw	r4, r20
     382:	3b 01       	movw	r6, r22
     384:	09 83       	std	Y+1, r16	; 0x01
     386:	1a 83       	std	Y+2, r17	; 0x02
     388:	2b 83       	std	Y+3, r18	; 0x03
     38a:	3c 83       	std	Y+4, r19	; 0x04
     38c:	dc 01       	movw	r26, r24
     38e:	54 96       	adiw	r26, 0x14	; 20
     390:	4d 92       	st	X+, r4
     392:	5d 92       	st	X+, r5
     394:	6d 92       	st	X+, r6
     396:	7c 92       	st	X, r7
     398:	57 97       	sbiw	r26, 0x17	; 23
     39a:	d9 01       	movw	r26, r18
     39c:	c8 01       	movw	r24, r16
     39e:	ed 81       	ldd	r30, Y+5	; 0x05
     3a0:	fe 81       	ldd	r31, Y+6	; 0x06
     3a2:	80 8f       	std	Z+24, r24	; 0x18
     3a4:	91 8f       	std	Z+25, r25	; 0x19
     3a6:	a2 8f       	std	Z+26, r26	; 0x1a
     3a8:	b3 8f       	std	Z+27, r27	; 0x1b
     3aa:	e0 88       	ldd	r14, Z+16	; 0x10
     3ac:	f1 88       	ldd	r15, Z+17	; 0x11
     3ae:	62 89       	ldd	r22, Z+18	; 0x12
     3b0:	73 89       	ldd	r23, Z+19	; 0x13
     3b2:	6e 19       	sub	r22, r14
     3b4:	7f 09       	sbc	r23, r15
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__floatunsisf>
     3be:	4b 01       	movw	r8, r22
     3c0:	5c 01       	movw	r10, r24
     3c2:	b7 01       	movw	r22, r14
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__floatunsisf>
     3cc:	6b 01       	movw	r12, r22
     3ce:	7c 01       	movw	r14, r24
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	4a e7       	ldi	r20, 0x7A	; 122
     3d6:	54 e4       	ldi	r21, 0x44	; 68
     3d8:	c3 01       	movw	r24, r6
     3da:	b2 01       	movw	r22, r4
     3dc:	0e 94 49 10 	call	0x2092	; 0x2092 <__divsf3>
     3e0:	a5 01       	movw	r20, r10
     3e2:	94 01       	movw	r18, r8
     3e4:	0e 94 a1 11 	call	0x2342	; 0x2342 <__mulsf3>
     3e8:	a7 01       	movw	r20, r14
     3ea:	96 01       	movw	r18, r12
     3ec:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__addsf3>
     3f0:	0e 94 bb 10 	call	0x2176	; 0x2176 <__fixunssfsi>
     3f4:	76 2e       	mov	r7, r22
     3f6:	67 2e       	mov	r6, r23
     3f8:	ad 81       	ldd	r26, Y+5	; 0x05
     3fa:	be 81       	ldd	r27, Y+6	; 0x06
     3fc:	5c 96       	adiw	r26, 0x1c	; 28
     3fe:	6c 93       	st	X, r22
     400:	5c 97       	sbiw	r26, 0x1c	; 28
     402:	5d 96       	adiw	r26, 0x1d	; 29
     404:	7c 93       	st	X, r23
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	4a e7       	ldi	r20, 0x7A	; 122
     40c:	54 e4       	ldi	r21, 0x44	; 68
     40e:	69 81       	ldd	r22, Y+1	; 0x01
     410:	7a 81       	ldd	r23, Y+2	; 0x02
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	9c 81       	ldd	r25, Y+4	; 0x04
     416:	0e 94 49 10 	call	0x2092	; 0x2092 <__divsf3>
     41a:	a5 01       	movw	r20, r10
     41c:	94 01       	movw	r18, r8
     41e:	0e 94 a1 11 	call	0x2342	; 0x2342 <__mulsf3>
     422:	a7 01       	movw	r20, r14
     424:	96 01       	movw	r18, r12
     426:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__addsf3>
     42a:	0e 94 bb 10 	call	0x2176	; 0x2176 <__fixunssfsi>
     42e:	ed 81       	ldd	r30, Y+5	; 0x05
     430:	fe 81       	ldd	r31, Y+6	; 0x06
     432:	66 8f       	std	Z+30, r22	; 0x1e
     434:	77 8f       	std	Z+31, r23	; 0x1f
     436:	7f 93       	push	r23
     438:	6f 93       	push	r22
     43a:	6f 92       	push	r6
     43c:	7f 92       	push	r7
     43e:	88 e1       	ldi	r24, 0x18	; 24
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	9f 93       	push	r25
     444:	8f 93       	push	r24
     446:	81 ef       	ldi	r24, 0xF1	; 241
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	9f 93       	push	r25
     44c:	8f 93       	push	r24
     44e:	0e 94 03 0b 	call	0x1606	; 0x1606 <Print::printf(char const*, ...)>
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	26 96       	adiw	r28, 0x06	; 6
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	ff 90       	pop	r15
     472:	ef 90       	pop	r14
     474:	df 90       	pop	r13
     476:	cf 90       	pop	r12
     478:	bf 90       	pop	r11
     47a:	af 90       	pop	r10
     47c:	9f 90       	pop	r9
     47e:	8f 90       	pop	r8
     480:	7f 90       	pop	r7
     482:	6f 90       	pop	r6
     484:	5f 90       	pop	r5
     486:	4f 90       	pop	r4
     488:	08 95       	ret

0000048a <GPIO_CORE::GPIO_CORE(unsigned char, unsigned char)>:
_ZN9GPIO_COREC2Ehh():
     48a:	0f 93       	push	r16
     48c:	1f 93       	push	r17
     48e:	fc 01       	movw	r30, r24
     490:	10 82       	st	Z, r1
     492:	11 82       	std	Z+1, r1	; 0x01
     494:	12 82       	std	Z+2, r1	; 0x02
     496:	11 86       	std	Z+9, r1	; 0x09
     498:	10 86       	std	Z+8, r1	; 0x08
     49a:	12 86       	std	Z+10, r1	; 0x0a
     49c:	13 86       	std	Z+11, r1	; 0x0b
     49e:	14 86       	std	Z+12, r1	; 0x0c
     4a0:	15 86       	std	Z+13, r1	; 0x0d
     4a2:	17 86       	std	Z+15, r1	; 0x0f
     4a4:	16 86       	std	Z+14, r1	; 0x0e
     4a6:	11 8a       	std	Z+17, r1	; 0x11
     4a8:	10 8a       	std	Z+16, r1	; 0x10
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	93 8b       	std	Z+19, r25	; 0x13
     4b0:	82 8b       	std	Z+18, r24	; 0x12
     4b2:	14 8a       	std	Z+20, r1	; 0x14
     4b4:	15 8a       	std	Z+21, r1	; 0x15
     4b6:	16 8a       	std	Z+22, r1	; 0x16
     4b8:	17 8a       	std	Z+23, r1	; 0x17
     4ba:	00 e0       	ldi	r16, 0x00	; 0
     4bc:	10 e0       	ldi	r17, 0x00	; 0
     4be:	2a e7       	ldi	r18, 0x7A	; 122
     4c0:	34 e4       	ldi	r19, 0x44	; 68
     4c2:	00 8f       	std	Z+24, r16	; 0x18
     4c4:	11 8f       	std	Z+25, r17	; 0x19
     4c6:	22 8f       	std	Z+26, r18	; 0x1a
     4c8:	33 8f       	std	Z+27, r19	; 0x1b
     4ca:	15 8e       	std	Z+29, r1	; 0x1d
     4cc:	14 8e       	std	Z+28, r1	; 0x1c
     4ce:	97 8f       	std	Z+31, r25	; 0x1f
     4d0:	86 8f       	std	Z+30, r24	; 0x1e
     4d2:	11 a2       	std	Z+33, r1	; 0x21
     4d4:	10 a2       	std	Z+32, r1	; 0x20
     4d6:	8f ef       	ldi	r24, 0xFF	; 255
     4d8:	82 a3       	std	Z+34, r24	; 0x22
     4da:	14 a2       	std	Z+36, r1	; 0x24
     4dc:	13 a2       	std	Z+35, r1	; 0x23
     4de:	15 a2       	std	Z+37, r1	; 0x25
     4e0:	17 a2       	std	Z+39, r1	; 0x27
     4e2:	16 a2       	std	Z+38, r1	; 0x26
     4e4:	11 a6       	std	Z+41, r1	; 0x29
     4e6:	10 a6       	std	Z+40, r1	; 0x28
     4e8:	8f ef       	ldi	r24, 0xFF	; 255
     4ea:	9f ef       	ldi	r25, 0xFF	; 255
     4ec:	93 a7       	std	Z+43, r25	; 0x2b
     4ee:	82 a7       	std	Z+42, r24	; 0x2a
     4f0:	15 a6       	std	Z+45, r1	; 0x2d
     4f2:	14 a6       	std	Z+44, r1	; 0x2c
     4f4:	16 a6       	std	Z+46, r1	; 0x2e
     4f6:	17 a6       	std	Z+47, r1	; 0x2f
     4f8:	10 aa       	std	Z+48, r1	; 0x30
     4fa:	11 aa       	std	Z+49, r1	; 0x31
     4fc:	12 aa       	std	Z+50, r1	; 0x32
     4fe:	13 aa       	std	Z+51, r1	; 0x33
     500:	14 aa       	std	Z+52, r1	; 0x34
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	a0 ea       	ldi	r26, 0xA0	; 160
     508:	b0 e4       	ldi	r27, 0x40	; 64
     50a:	87 ab       	std	Z+55, r24	; 0x37
     50c:	90 af       	std	Z+56, r25	; 0x38
     50e:	a1 af       	std	Z+57, r26	; 0x39
     510:	b2 af       	std	Z+58, r27	; 0x3a
     512:	13 ae       	std	Z+59, r1	; 0x3b
     514:	14 ae       	std	Z+60, r1	; 0x3c
     516:	15 ae       	std	Z+61, r1	; 0x3d
     518:	16 ae       	std	Z+62, r1	; 0x3e
     51a:	df 01       	movw	r26, r30
     51c:	df 96       	adiw	r26, 0x3f	; 63
     51e:	11 96       	adiw	r26, 0x01	; 1
     520:	1c 92       	st	X, r1
     522:	1e 92       	st	-X, r1
     524:	12 96       	adiw	r26, 0x02	; 2
     526:	1c 92       	st	X, r1
     528:	11 96       	adiw	r26, 0x01	; 1
     52a:	1c 92       	st	X, r1
     52c:	19 96       	adiw	r26, 0x09	; 9
     52e:	11 96       	adiw	r26, 0x01	; 1
     530:	1c 92       	st	X, r1
     532:	1e 92       	st	-X, r1
     534:	12 96       	adiw	r26, 0x02	; 2
     536:	82 e3       	ldi	r24, 0x32	; 50
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	11 96       	adiw	r26, 0x01	; 1
     53c:	9c 93       	st	X, r25
     53e:	8e 93       	st	-X, r24
     540:	12 96       	adiw	r26, 0x02	; 2
     542:	11 96       	adiw	r26, 0x01	; 1
     544:	1c 92       	st	X, r1
     546:	1e 92       	st	-X, r1
     548:	12 96       	adiw	r26, 0x02	; 2
     54a:	1d 92       	st	X+, r1
     54c:	1d 92       	st	X+, r1
     54e:	1d 92       	st	X+, r1
     550:	1c 92       	st	X, r1
     552:	13 97       	sbiw	r26, 0x03	; 3
     554:	14 96       	adiw	r26, 0x04	; 4
     556:	1d 92       	st	X+, r1
     558:	1d 92       	st	X+, r1
     55a:	1d 92       	st	X+, r1
     55c:	1c 92       	st	X, r1
     55e:	13 97       	sbiw	r26, 0x03	; 3
     560:	14 96       	adiw	r26, 0x04	; 4
     562:	1d 92       	st	X+, r1
     564:	1d 92       	st	X+, r1
     566:	1d 92       	st	X+, r1
     568:	1c 92       	st	X, r1
     56a:	13 97       	sbiw	r26, 0x03	; 3
     56c:	14 96       	adiw	r26, 0x04	; 4
     56e:	1d 92       	st	X+, r1
     570:	1d 92       	st	X+, r1
     572:	1d 92       	st	X+, r1
     574:	1c 92       	st	X, r1
     576:	13 97       	sbiw	r26, 0x03	; 3
_ZN6PlayerC4Ev():
     578:	14 96       	adiw	r26, 0x04	; 4
     57a:	1c 92       	st	X, r1
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	11 96       	adiw	r26, 0x01	; 1
     580:	8c 93       	st	X, r24
     582:	11 97       	sbiw	r26, 0x01	; 1
     584:	13 96       	adiw	r26, 0x03	; 3
     586:	1c 92       	st	X, r1
     588:	1e 92       	st	-X, r1
     58a:	12 97       	sbiw	r26, 0x02	; 2
     58c:	15 96       	adiw	r26, 0x05	; 5
     58e:	1c 92       	st	X, r1
     590:	1e 92       	st	-X, r1
     592:	14 97       	sbiw	r26, 0x04	; 4
     594:	16 96       	adiw	r26, 0x06	; 6
     596:	1d 92       	st	X+, r1
     598:	1d 92       	st	X+, r1
     59a:	1d 92       	st	X+, r1
     59c:	1c 92       	st	X, r1
     59e:	19 97       	sbiw	r26, 0x09	; 9
     5a0:	1b 96       	adiw	r26, 0x0b	; 11
     5a2:	1c 92       	st	X, r1
     5a4:	1e 92       	st	-X, r1
     5a6:	1a 97       	sbiw	r26, 0x0a	; 10
     5a8:	1d 96       	adiw	r26, 0x0d	; 13
     5aa:	1c 92       	st	X, r1
     5ac:	1e 92       	st	-X, r1
     5ae:	1c 97       	sbiw	r26, 0x0c	; 12
     5b0:	1e 96       	adiw	r26, 0x0e	; 14
     5b2:	1c 92       	st	X, r1
     5b4:	1e 97       	sbiw	r26, 0x0e	; 14
     5b6:	1f 96       	adiw	r26, 0x0f	; 15
     5b8:	1c 92       	st	X, r1
     5ba:	1f 97       	sbiw	r26, 0x0f	; 15
     5bc:	51 96       	adiw	r26, 0x11	; 17
     5be:	1c 92       	st	X, r1
     5c0:	1e 92       	st	-X, r1
     5c2:	50 97       	sbiw	r26, 0x10	; 16
     5c4:	53 96       	adiw	r26, 0x13	; 19
     5c6:	1c 92       	st	X, r1
     5c8:	1e 92       	st	-X, r1
     5ca:	52 97       	sbiw	r26, 0x12	; 18
     5cc:	55 96       	adiw	r26, 0x15	; 21
     5ce:	1c 92       	st	X, r1
     5d0:	1e 92       	st	-X, r1
     5d2:	54 97       	sbiw	r26, 0x14	; 20
     5d4:	57 96       	adiw	r26, 0x17	; 23
     5d6:	1c 92       	st	X, r1
     5d8:	1e 92       	st	-X, r1
     5da:	56 97       	sbiw	r26, 0x16	; 22
     5dc:	59 96       	adiw	r26, 0x19	; 25
     5de:	1c 92       	st	X, r1
     5e0:	1e 92       	st	-X, r1
     5e2:	58 97       	sbiw	r26, 0x18	; 24
     5e4:	5b 96       	adiw	r26, 0x1b	; 27
     5e6:	1c 92       	st	X, r1
     5e8:	1e 92       	st	-X, r1
     5ea:	5a 97       	sbiw	r26, 0x1a	; 26
     5ec:	5d 96       	adiw	r26, 0x1d	; 29
     5ee:	1c 92       	st	X, r1
     5f0:	1e 92       	st	-X, r1
     5f2:	5c 97       	sbiw	r26, 0x1c	; 28
     5f4:	84 e6       	ldi	r24, 0x64	; 100
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	5f 96       	adiw	r26, 0x1f	; 31
     5fa:	9c 93       	st	X, r25
     5fc:	8e 93       	st	-X, r24
     5fe:	5e 97       	sbiw	r26, 0x1e	; 30
_ZN9GPIO_COREC2Ehh():
     600:	63 83       	std	Z+3, r22	; 0x03
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	55 83       	std	Z+5, r21	; 0x05
     606:	44 83       	std	Z+4, r20	; 0x04
     608:	ca 01       	movw	r24, r20
     60a:	95 95       	asr	r25
     60c:	87 95       	ror	r24
     60e:	87 70       	andi	r24, 0x07	; 7
     610:	86 83       	std	Z+6, r24	; 0x06
     612:	44 0f       	add	r20, r20
     614:	45 2f       	mov	r20, r21
     616:	44 1f       	adc	r20, r20
     618:	55 0b       	sbc	r21, r21
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	48 27       	eor	r20, r24
     61e:	41 70       	andi	r20, 0x01	; 1
     620:	47 83       	std	Z+7, r20	; 0x07
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	08 95       	ret

00000628 <GPIO_CORE::readRaw()>:
_ZN9GPIO_CORE7readRawEv():
     628:	dc 01       	movw	r26, r24
     62a:	96 96       	adiw	r26, 0x26	; 38
     62c:	ed 91       	ld	r30, X+
     62e:	fc 91       	ld	r31, X
     630:	97 97       	sbiw	r26, 0x27	; 39
     632:	30 97       	sbiw	r30, 0x00	; 0
     634:	39 f0       	breq	.+14     	; 0x644 <GPIO_CORE::readRaw()+0x1c>
     636:	52 96       	adiw	r26, 0x12	; 18
     638:	6d 91       	ld	r22, X+
     63a:	7c 91       	ld	r23, X
     63c:	53 97       	sbiw	r26, 0x13	; 19
     63e:	13 96       	adiw	r26, 0x03	; 3
     640:	8c 91       	ld	r24, X
     642:	09 94       	ijmp
     644:	18 96       	adiw	r26, 0x08	; 8
     646:	8d 91       	ld	r24, X+
     648:	9c 91       	ld	r25, X
     64a:	08 95       	ret

0000064c <GPIO_CORE::value()>:
_ZN9GPIO_CORE5valueEv():
     64c:	fc 01       	movw	r30, r24
     64e:	80 85       	ldd	r24, Z+8	; 0x08
     650:	91 85       	ldd	r25, Z+9	; 0x09
     652:	08 95       	ret

00000654 <GPIO_CORE::writeRaw(unsigned int)>:
_ZN9GPIO_CORE8writeRawEj():
     654:	fc 01       	movw	r30, r24
     656:	82 81       	ldd	r24, Z+2	; 0x02
     658:	88 23       	and	r24, r24
     65a:	d1 f0       	breq	.+52     	; 0x690 <GPIO_CORE::writeRaw(unsigned int)+0x3c>
     65c:	71 87       	std	Z+9, r23	; 0x09
     65e:	60 87       	std	Z+8, r22	; 0x08
     660:	97 81       	ldd	r25, Z+7	; 0x07
     662:	83 81       	ldd	r24, Z+3	; 0x03
     664:	26 81       	ldd	r18, Z+6	; 0x06
     666:	21 11       	cpse	r18, r1
     668:	09 c0       	rjmp	.+18     	; 0x67c <GPIO_CORE::writeRaw(unsigned int)+0x28>
     66a:	21 e0       	ldi	r18, 0x01	; 1
     66c:	67 2b       	or	r22, r23
     66e:	09 f4       	brne	.+2      	; 0x672 <GPIO_CORE::writeRaw(unsigned int)+0x1e>
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	61 e0       	ldi	r22, 0x01	; 1
     674:	29 13       	cpse	r18, r25
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <digitalWrite>
     67c:	91 11       	cpse	r25, r1
     67e:	06 c0       	rjmp	.+12     	; 0x68c <GPIO_CORE::writeRaw(unsigned int)+0x38>
     680:	22 89       	ldd	r18, Z+18	; 0x12
     682:	33 89       	ldd	r19, Z+19	; 0x13
     684:	a9 01       	movw	r20, r18
     686:	46 1b       	sub	r20, r22
     688:	57 0b       	sbc	r21, r23
     68a:	ba 01       	movw	r22, r20
     68c:	0c 94 bd 0e 	jmp	0x1d7a	; 0x1d7a <analogWrite>
     690:	08 95       	ret

00000692 <GPIO_CORE::off()>:
_ZN9GPIO_CORE3offEv():
     692:	fc 01       	movw	r30, r24
     694:	64 8d       	ldd	r22, Z+28	; 0x1c
     696:	75 8d       	ldd	r23, Z+29	; 0x1d
     698:	0c 94 2a 03 	jmp	0x654	; 0x654 <GPIO_CORE::writeRaw(unsigned int)>

0000069c <GPIO_CORE::analog_to_voltage(unsigned int)>:
_ZN9GPIO_CORE17analog_to_voltageEj():
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	ec 01       	movw	r28, r24
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__floatunsisf>
     6aa:	2f a9       	ldd	r18, Y+55	; 0x37
     6ac:	38 ad       	ldd	r19, Y+56	; 0x38
     6ae:	49 ad       	ldd	r20, Y+57	; 0x39
     6b0:	5a ad       	ldd	r21, Y+58	; 0x3a
     6b2:	0e 94 a1 11 	call	0x2342	; 0x2342 <__mulsf3>
     6b6:	2b ad       	ldd	r18, Y+59	; 0x3b
     6b8:	3c ad       	ldd	r19, Y+60	; 0x3c
     6ba:	4d ad       	ldd	r20, Y+61	; 0x3d
     6bc:	5e ad       	ldd	r21, Y+62	; 0x3e
     6be:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__addsf3>
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <GPIO_CORE::filter(unsigned int)>:
_ZN9GPIO_CORE6filterEj():
     6c8:	2f 92       	push	r2
     6ca:	3f 92       	push	r3
     6cc:	4f 92       	push	r4
     6ce:	5f 92       	push	r5
     6d0:	6f 92       	push	r6
     6d2:	7f 92       	push	r7
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	ec 01       	movw	r28, r24
     6ee:	8b 01       	movw	r16, r22
     6f0:	fc 01       	movw	r30, r24
     6f2:	ef 5b       	subi	r30, 0xBF	; 191
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	20 81       	ld	r18, Z
     6f8:	31 96       	adiw	r30, 0x01	; 1
     6fa:	30 81       	ld	r19, Z
     6fc:	21 11       	cpse	r18, r1
     6fe:	16 c0       	rjmp	.+44     	; 0x72c <GPIO_CORE::filter(unsigned int)+0x64>
     700:	31 11       	cpse	r19, r1
     702:	2c c0       	rjmp	.+88     	; 0x75c <GPIO_CORE::filter(unsigned int)+0x94>
     704:	c8 01       	movw	r24, r16
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	bf 90       	pop	r11
     718:	af 90       	pop	r10
     71a:	9f 90       	pop	r9
     71c:	8f 90       	pop	r8
     71e:	7f 90       	pop	r7
     720:	6f 90       	pop	r6
     722:	5f 90       	pop	r5
     724:	4f 90       	pop	r4
     726:	3f 90       	pop	r3
     728:	2f 90       	pop	r2
     72a:	08 95       	ret
     72c:	21 30       	cpi	r18, 0x01	; 1
     72e:	09 f0       	breq	.+2      	; 0x732 <GPIO_CORE::filter(unsigned int)+0x6a>
     730:	51 c0       	rjmp	.+162    	; 0x7d4 <GPIO_CORE::filter(unsigned int)+0x10c>
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	fe 01       	movw	r30, r28
     738:	eb 5b       	subi	r30, 0xBB	; 187
     73a:	ff 4f       	sbci	r31, 0xFF	; 255
     73c:	40 81       	ld	r20, Z
     73e:	51 81       	ldd	r21, Z+1	; 0x01
     740:	46 17       	cp	r20, r22
     742:	57 07       	cpc	r21, r23
     744:	10 f0       	brcs	.+4      	; 0x74a <GPIO_CORE::filter(unsigned int)+0x82>
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	4a 89       	ldd	r20, Y+18	; 0x12
     74c:	5b 89       	ldd	r21, Y+19	; 0x13
     74e:	84 9f       	mul	r24, r20
     750:	80 01       	movw	r16, r0
     752:	85 9f       	mul	r24, r21
     754:	10 0d       	add	r17, r0
     756:	94 9f       	mul	r25, r20
     758:	10 0d       	add	r17, r0
     75a:	11 24       	eor	r1, r1
     75c:	ae 01       	movw	r20, r28
     75e:	41 5c       	subi	r20, 0xC1	; 193
     760:	5f 4f       	sbci	r21, 0xFF	; 255
     762:	4a 01       	movw	r8, r20
     764:	31 30       	cpi	r19, 0x01	; 1
     766:	09 f0       	breq	.+2      	; 0x76a <GPIO_CORE::filter(unsigned int)+0xa2>
     768:	53 c0       	rjmp	.+166    	; 0x810 <GPIO_CORE::filter(unsigned int)+0x148>
     76a:	c9 5b       	subi	r28, 0xB9	; 185
     76c:	df 4f       	sbci	r29, 0xFF	; 255
     76e:	c8 80       	ld	r12, Y
     770:	d9 80       	ldd	r13, Y+1	; 0x01
     772:	ea 80       	ldd	r14, Y+2	; 0x02
     774:	fb 80       	ldd	r15, Y+3	; 0x03
     776:	da 01       	movw	r26, r20
     778:	6d 91       	ld	r22, X+
     77a:	7c 91       	ld	r23, X
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__floatunsisf>
     784:	a7 01       	movw	r20, r14
     786:	96 01       	movw	r18, r12
     788:	0e 94 a1 11 	call	0x2342	; 0x2342 <__mulsf3>
     78c:	2b 01       	movw	r4, r22
     78e:	3c 01       	movw	r6, r24
     790:	a7 01       	movw	r20, r14
     792:	96 01       	movw	r18, r12
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	80 e8       	ldi	r24, 0x80	; 128
     79a:	9f e3       	ldi	r25, 0x3F	; 63
     79c:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__subsf3>
     7a0:	6b 01       	movw	r12, r22
     7a2:	7c 01       	movw	r14, r24
     7a4:	b8 01       	movw	r22, r16
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__floatunsisf>
     7ae:	9b 01       	movw	r18, r22
     7b0:	ac 01       	movw	r20, r24
     7b2:	c7 01       	movw	r24, r14
     7b4:	b6 01       	movw	r22, r12
     7b6:	0e 94 a1 11 	call	0x2342	; 0x2342 <__mulsf3>
     7ba:	9b 01       	movw	r18, r22
     7bc:	ac 01       	movw	r20, r24
     7be:	c3 01       	movw	r24, r6
     7c0:	b2 01       	movw	r22, r4
     7c2:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__addsf3>
     7c6:	0e 94 bb 10 	call	0x2176	; 0x2176 <__fixunssfsi>
     7ca:	8b 01       	movw	r16, r22
     7cc:	f4 01       	movw	r30, r8
     7ce:	71 83       	std	Z+1, r23	; 0x01
     7d0:	60 83       	st	Z, r22
     7d2:	98 cf       	rjmp	.-208    	; 0x704 <GPIO_CORE::filter(unsigned int)+0x3c>
     7d4:	22 30       	cpi	r18, 0x02	; 2
     7d6:	11 f6       	brne	.-124    	; 0x75c <GPIO_CORE::filter(unsigned int)+0x94>
     7d8:	4a 89       	ldd	r20, Y+18	; 0x12
     7da:	5b 89       	ldd	r21, Y+19	; 0x13
     7dc:	fc 01       	movw	r30, r24
     7de:	ff 96       	adiw	r30, 0x3f	; 63
     7e0:	80 81       	ld	r24, Z
     7e2:	91 81       	ldd	r25, Z+1	; 0x01
     7e4:	89 2b       	or	r24, r25
     7e6:	49 f0       	breq	.+18     	; 0x7fa <GPIO_CORE::filter(unsigned int)+0x132>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	34 96       	adiw	r30, 0x04	; 4
     7ec:	60 81       	ld	r22, Z
     7ee:	71 81       	ldd	r23, Z+1	; 0x01
     7f0:	06 17       	cp	r16, r22
     7f2:	17 07       	cpc	r17, r23
     7f4:	58 f4       	brcc	.+22     	; 0x80c <GPIO_CORE::filter(unsigned int)+0x144>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	09 c0       	rjmp	.+18     	; 0x80c <GPIO_CORE::filter(unsigned int)+0x144>
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	fe 01       	movw	r30, r28
     7fe:	eb 5b       	subi	r30, 0xBB	; 187
     800:	ff 4f       	sbci	r31, 0xFF	; 255
     802:	60 81       	ld	r22, Z
     804:	71 81       	ldd	r23, Z+1	; 0x01
     806:	60 17       	cp	r22, r16
     808:	71 07       	cpc	r23, r17
     80a:	a8 f7       	brcc	.-22     	; 0x7f6 <GPIO_CORE::filter(unsigned int)+0x12e>
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	9f cf       	rjmp	.-194    	; 0x74e <GPIO_CORE::filter(unsigned int)+0x86>
     810:	32 30       	cpi	r19, 0x02	; 2
     812:	09 f0       	breq	.+2      	; 0x816 <GPIO_CORE::filter(unsigned int)+0x14e>
     814:	c3 c0       	rjmp	.+390    	; 0x99c <GPIO_CORE::filter(unsigned int)+0x2d4>
     816:	ae 01       	movw	r20, r28
     818:	41 5b       	subi	r20, 0xB1	; 177
     81a:	5f 4f       	sbci	r21, 0xFF	; 255
     81c:	1a 01       	movw	r2, r20
     81e:	21 11       	cpse	r18, r1
     820:	21 c0       	rjmp	.+66     	; 0x864 <GPIO_CORE::filter(unsigned int)+0x19c>
     822:	4a 88       	ldd	r4, Y+18	; 0x12
     824:	5b 88       	ldd	r5, Y+19	; 0x13
     826:	71 2c       	mov	r7, r1
     828:	61 2c       	mov	r6, r1
     82a:	88 89       	ldd	r24, Y+16	; 0x10
     82c:	99 89       	ldd	r25, Y+17	; 0x11
     82e:	9c 01       	movw	r18, r24
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	40 e0       	ldi	r20, 0x00	; 0
     834:	b8 01       	movw	r22, r16
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	d1 01       	movw	r26, r2
     83c:	ed 91       	ld	r30, X+
     83e:	fc 91       	ld	r31, X
     840:	31 97       	sbiw	r30, 0x01	; 1
     842:	6f 01       	movw	r12, r30
     844:	1f 92       	push	r1
     846:	1f 92       	push	r1
     848:	df 92       	push	r13
     84a:	ef 93       	push	r30
     84c:	a1 2c       	mov	r10, r1
     84e:	b1 2c       	mov	r11, r1
     850:	65 01       	movw	r12, r10
     852:	83 01       	movw	r16, r6
     854:	72 01       	movw	r14, r4
     856:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <map(long, long, long, long, long)>
     85a:	8b 01       	movw	r16, r22
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	1e a6       	std	Y+46, r1	; 0x2e
     866:	18 aa       	std	Y+48, r1	; 0x30
     868:	1f a6       	std	Y+47, r1	; 0x2f
     86a:	3e 01       	movw	r6, r28
     86c:	bb e4       	ldi	r27, 0x4B	; 75
     86e:	6b 0e       	add	r6, r27
     870:	71 1c       	adc	r7, r1
     872:	f3 01       	movw	r30, r6
     874:	80 81       	ld	r24, Z
     876:	91 81       	ldd	r25, Z+1	; 0x01
     878:	9e 01       	movw	r18, r28
     87a:	2f 5a       	subi	r18, 0xAF	; 175
     87c:	3f 4f       	sbci	r19, 0xFF	; 255
     87e:	29 01       	movw	r4, r18
     880:	80 17       	cp	r24, r16
     882:	91 07       	cpc	r25, r17
     884:	71 f1       	breq	.+92     	; 0x8e2 <GPIO_CORE::filter(unsigned int)+0x21a>
     886:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <millis>
     88a:	d2 01       	movw	r26, r4
     88c:	6d 93       	st	X+, r22
     88e:	7d 93       	st	X+, r23
     890:	8d 93       	st	X+, r24
     892:	9c 93       	st	X, r25
     894:	13 97       	sbiw	r26, 0x03	; 3
     896:	d3 01       	movw	r26, r6
     898:	0d 93       	st	X+, r16
     89a:	1c 93       	st	X, r17
     89c:	a8 88       	ldd	r10, Y+16	; 0x10
     89e:	b9 88       	ldd	r11, Y+17	; 0x11
     8a0:	d1 2c       	mov	r13, r1
     8a2:	c1 2c       	mov	r12, r1
     8a4:	f1 01       	movw	r30, r2
     8a6:	e0 80       	ld	r14, Z
     8a8:	f1 80       	ldd	r15, Z+1	; 0x01
     8aa:	f1 e0       	ldi	r31, 0x01	; 1
     8ac:	ef 1a       	sub	r14, r31
     8ae:	f1 08       	sbc	r15, r1
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	00 e0       	ldi	r16, 0x00	; 0
     8b4:	d4 01       	movw	r26, r8
     8b6:	6d 91       	ld	r22, X+
     8b8:	7c 91       	ld	r23, X
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	2a 89       	ldd	r18, Y+18	; 0x12
     8c0:	3b 89       	ldd	r19, Y+19	; 0x13
     8c2:	29 01       	movw	r4, r18
     8c4:	1f 92       	push	r1
     8c6:	1f 92       	push	r1
     8c8:	5f 92       	push	r5
     8ca:	2f 93       	push	r18
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	a9 01       	movw	r20, r18
     8d2:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <map(long, long, long, long, long)>
     8d6:	8b 01       	movw	r16, r22
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	11 cf       	rjmp	.-478    	; 0x704 <GPIO_CORE::filter(unsigned int)+0x3c>
     8e2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <millis>
     8e6:	f2 01       	movw	r30, r4
     8e8:	c0 80       	ld	r12, Z
     8ea:	d1 80       	ldd	r13, Z+1	; 0x01
     8ec:	e2 80       	ldd	r14, Z+2	; 0x02
     8ee:	f3 80       	ldd	r15, Z+3	; 0x03
     8f0:	ab 01       	movw	r20, r22
     8f2:	bc 01       	movw	r22, r24
     8f4:	4c 19       	sub	r20, r12
     8f6:	5d 09       	sbc	r21, r13
     8f8:	6e 09       	sbc	r22, r14
     8fa:	7f 09       	sbc	r23, r15
     8fc:	fe 01       	movw	r30, r28
     8fe:	e3 5b       	subi	r30, 0xB3	; 179
     900:	ff 4f       	sbci	r31, 0xFF	; 255
     902:	80 81       	ld	r24, Z
     904:	91 81       	ldd	r25, Z+1	; 0x01
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	a0 e0       	ldi	r26, 0x00	; 0
     90a:	84 17       	cp	r24, r20
     90c:	95 07       	cpc	r25, r21
     90e:	a6 07       	cpc	r26, r22
     910:	b7 07       	cpc	r27, r23
     912:	08 f6       	brcc	.-126    	; 0x896 <GPIO_CORE::filter(unsigned int)+0x1ce>
     914:	d4 01       	movw	r26, r8
     916:	8d 91       	ld	r24, X+
     918:	9c 91       	ld	r25, X
     91a:	80 17       	cp	r24, r16
     91c:	91 07       	cpc	r25, r17
     91e:	09 f4       	brne	.+2      	; 0x922 <GPIO_CORE::filter(unsigned int)+0x25a>
     920:	ba cf       	rjmp	.-140    	; 0x896 <GPIO_CORE::filter(unsigned int)+0x1ce>
     922:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <millis>
     926:	de 01       	movw	r26, r28
     928:	a7 5a       	subi	r26, 0xA7	; 167
     92a:	bf 4f       	sbci	r27, 0xFF	; 255
     92c:	fe 01       	movw	r30, r28
     92e:	eb 5a       	subi	r30, 0xAB	; 171
     930:	ff 4f       	sbci	r31, 0xFF	; 255
     932:	c0 80       	ld	r12, Z
     934:	d1 80       	ldd	r13, Z+1	; 0x01
     936:	e2 80       	ldd	r14, Z+2	; 0x02
     938:	f3 80       	ldd	r15, Z+3	; 0x03
     93a:	9b 01       	movw	r18, r22
     93c:	ac 01       	movw	r20, r24
     93e:	2c 19       	sub	r18, r12
     940:	3d 09       	sbc	r19, r13
     942:	4e 09       	sbc	r20, r14
     944:	5f 09       	sbc	r21, r15
     946:	69 01       	movw	r12, r18
     948:	7a 01       	movw	r14, r20
     94a:	cd 92       	st	X+, r12
     94c:	dd 92       	st	X+, r13
     94e:	ed 92       	st	X+, r14
     950:	fc 92       	st	X, r15
     952:	13 97       	sbiw	r26, 0x03	; 3
     954:	60 83       	st	Z, r22
     956:	71 83       	std	Z+1, r23	; 0x01
     958:	82 83       	std	Z+2, r24	; 0x02
     95a:	93 83       	std	Z+3, r25	; 0x03
     95c:	d4 01       	movw	r26, r8
     95e:	8d 91       	ld	r24, X+
     960:	9c 91       	ld	r25, X
     962:	21 e0       	ldi	r18, 0x01	; 1
     964:	08 17       	cp	r16, r24
     966:	19 07       	cpc	r17, r25
     968:	08 f0       	brcs	.+2      	; 0x96c <GPIO_CORE::filter(unsigned int)+0x2a4>
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	28 ab       	std	Y+48, r18	; 0x30
     96e:	21 e0       	ldi	r18, 0x01	; 1
     970:	80 17       	cp	r24, r16
     972:	91 07       	cpc	r25, r17
     974:	08 f0       	brcs	.+2      	; 0x978 <GPIO_CORE::filter(unsigned int)+0x2b0>
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	2f a7       	std	Y+47, r18	; 0x2f
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	2e a7       	std	Y+46, r18	; 0x2e
     97e:	fe 01       	movw	r30, r28
     980:	e3 5a       	subi	r30, 0xA3	; 163
     982:	ff 4f       	sbci	r31, 0xFF	; 255
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	80 83       	st	Z, r24
     98a:	91 83       	std	Z+1, r25	; 0x01
     98c:	a2 83       	std	Z+2, r26	; 0x02
     98e:	b3 83       	std	Z+3, r27	; 0x03
     990:	f4 01       	movw	r30, r8
     992:	11 83       	std	Z+1, r17	; 0x01
     994:	00 83       	st	Z, r16
     996:	1d a7       	std	Y+45, r17	; 0x2d
     998:	0c a7       	std	Y+44, r16	; 0x2c
     99a:	7d cf       	rjmp	.-262    	; 0x896 <GPIO_CORE::filter(unsigned int)+0x1ce>
     99c:	fa 01       	movw	r30, r20
     99e:	11 83       	std	Z+1, r17	; 0x01
     9a0:	00 83       	st	Z, r16
     9a2:	b0 ce       	rjmp	.-672    	; 0x704 <GPIO_CORE::filter(unsigned int)+0x3c>

000009a4 <GPIO_CORE::voltage()>:
_ZN9GPIO_CORE7voltageEv():
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	ec 01       	movw	r28, r24
     9aa:	0e 94 14 03 	call	0x628	; 0x628 <GPIO_CORE::readRaw()>
     9ae:	bc 01       	movw	r22, r24
     9b0:	88 87       	std	Y+8, r24	; 0x08
     9b2:	79 87       	std	Y+9, r23	; 0x09
     9b4:	fe 01       	movw	r30, r28
     9b6:	ef 5b       	subi	r30, 0xBF	; 191
     9b8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ba:	20 81       	ld	r18, Z
     9bc:	21 11       	cpse	r18, r1
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <GPIO_CORE::voltage()+0x24>
     9c0:	31 96       	adiw	r30, 0x01	; 1
     9c2:	20 81       	ld	r18, Z
     9c4:	22 23       	and	r18, r18
     9c6:	19 f0       	breq	.+6      	; 0x9ce <GPIO_CORE::voltage()+0x2a>
     9c8:	ce 01       	movw	r24, r28
     9ca:	0e 94 64 03 	call	0x6c8	; 0x6c8 <GPIO_CORE::filter(unsigned int)>
_ZN9GPIO_CORE17analog_to_voltageEj():
     9ce:	bc 01       	movw	r22, r24
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__floatunsisf>
     9d8:	2f a9       	ldd	r18, Y+55	; 0x37
     9da:	38 ad       	ldd	r19, Y+56	; 0x38
     9dc:	49 ad       	ldd	r20, Y+57	; 0x39
     9de:	5a ad       	ldd	r21, Y+58	; 0x3a
     9e0:	0e 94 a1 11 	call	0x2342	; 0x2342 <__mulsf3>
     9e4:	2b ad       	ldd	r18, Y+59	; 0x3b
     9e6:	3c ad       	ldd	r19, Y+60	; 0x3c
     9e8:	4d ad       	ldd	r20, Y+61	; 0x3d
     9ea:	5e ad       	ldd	r21, Y+62	; 0x3e
     9ec:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__addsf3>
_ZN9GPIO_CORE7voltageEv():
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <GPIO_CORE::filter_LowPass(float)>:
_ZN9GPIO_CORE14filter_LowPassEf():
     9f6:	fc 01       	movw	r30, r24
     9f8:	ee 5b       	subi	r30, 0xBE	; 190
     9fa:	ff 4f       	sbci	r31, 0xFF	; 255
     9fc:	21 e0       	ldi	r18, 0x01	; 1
     9fe:	20 83       	st	Z, r18
     a00:	35 96       	adiw	r30, 0x05	; 5
     a02:	40 83       	st	Z, r20
     a04:	51 83       	std	Z+1, r21	; 0x01
     a06:	62 83       	std	Z+2, r22	; 0x02
     a08:	73 83       	std	Z+3, r23	; 0x03
     a0a:	cf 96       	adiw	r24, 0x3f	; 63
     a0c:	fc 01       	movw	r30, r24
     a0e:	11 82       	std	Z+1, r1	; 0x01
     a10:	10 82       	st	Z, r1
     a12:	08 95       	ret

00000a14 <GPIO_CORE::setRange(float, float)>:
_ZN9GPIO_CORE8setRangeEff():
     a14:	8f 92       	push	r8
     a16:	9f 92       	push	r9
     a18:	af 92       	push	r10
     a1a:	bf 92       	push	r11
     a1c:	cf 92       	push	r12
     a1e:	df 92       	push	r13
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	ec 01       	movw	r28, r24
     a2e:	6a 01       	movw	r12, r20
     a30:	7b 01       	movw	r14, r22
     a32:	59 01       	movw	r10, r18
     a34:	ab 01       	movw	r20, r22
     a36:	96 01       	movw	r18, r12
     a38:	c5 01       	movw	r24, r10
     a3a:	b8 01       	movw	r22, r16
     a3c:	0e 94 9c 11 	call	0x2338	; 0x2338 <__gesf2>
     a40:	18 16       	cp	r1, r24
     a42:	34 f4       	brge	.+12     	; 0xa50 <GPIO_CORE::setRange(float, float)+0x3c>
     a44:	95 01       	movw	r18, r10
     a46:	b7 01       	movw	r22, r14
     a48:	a6 01       	movw	r20, r12
     a4a:	ce 01       	movw	r24, r28
     a4c:	0e 94 a9 01 	call	0x352	; 0x352 <GPIO_CORE::setRange(float, float) [clone .part.1]>
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	bf 90       	pop	r11
     a62:	af 90       	pop	r10
     a64:	9f 90       	pop	r9
     a66:	8f 90       	pop	r8
     a68:	08 95       	ret

00000a6a <GPIO_CORE::voltageRange(float, float)>:
_ZN9GPIO_CORE12voltageRangeEff():
     a6a:	8f 92       	push	r8
     a6c:	9f 92       	push	r9
     a6e:	af 92       	push	r10
     a70:	bf 92       	push	r11
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	ec 01       	movw	r28, r24
     a84:	6a 01       	movw	r12, r20
     a86:	7b 01       	movw	r14, r22
     a88:	c9 01       	movw	r24, r18
     a8a:	b8 01       	movw	r22, r16
     a8c:	a7 01       	movw	r20, r14
     a8e:	96 01       	movw	r18, r12
     a90:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__subsf3>
     a94:	4b 01       	movw	r8, r22
     a96:	5c 01       	movw	r10, r24
     a98:	6a 89       	ldd	r22, Y+18	; 0x12
     a9a:	7b 89       	ldd	r23, Y+19	; 0x13
     a9c:	88 89       	ldd	r24, Y+16	; 0x10
     a9e:	99 89       	ldd	r25, Y+17	; 0x11
     aa0:	68 1b       	sub	r22, r24
     aa2:	79 0b       	sbc	r23, r25
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__floatunsisf>
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	c5 01       	movw	r24, r10
     ab2:	b4 01       	movw	r22, r8
     ab4:	0e 94 49 10 	call	0x2092	; 0x2092 <__divsf3>
     ab8:	4b 01       	movw	r8, r22
     aba:	5c 01       	movw	r10, r24
_ZN9GPIO_CORE14setVoltageCoefEff():
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	a9 01       	movw	r20, r18
     ac2:	0e 94 44 10 	call	0x2088	; 0x2088 <__cmpsf2>
     ac6:	88 23       	and	r24, r24
     ac8:	41 f0       	breq	.+16     	; 0xada <GPIO_CORE::voltageRange(float, float)+0x70>
     aca:	8f aa       	std	Y+55, r8	; 0x37
     acc:	98 ae       	std	Y+56, r9	; 0x38
     ace:	a9 ae       	std	Y+57, r10	; 0x39
     ad0:	ba ae       	std	Y+58, r11	; 0x3a
     ad2:	cb ae       	std	Y+59, r12	; 0x3b
     ad4:	dc ae       	std	Y+60, r13	; 0x3c
     ad6:	ed ae       	std	Y+61, r14	; 0x3d
     ad8:	fe ae       	std	Y+62, r15	; 0x3e
_ZN9GPIO_CORE12voltageRangeEff():
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	8f 90       	pop	r8
     af2:	08 95       	ret

00000af4 <GPIO_CORE::reset_analog(unsigned int, unsigned int, unsigned int, unsigned long)>:
_ZN9GPIO_CORE12reset_analogEjjjm():
     af4:	4f 92       	push	r4
     af6:	5f 92       	push	r5
     af8:	6f 92       	push	r6
     afa:	7f 92       	push	r7
     afc:	8f 92       	push	r8
     afe:	9f 92       	push	r9
     b00:	af 92       	push	r10
     b02:	bf 92       	push	r11
     b04:	cf 92       	push	r12
     b06:	df 92       	push	r13
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	ec 01       	movw	r28, r24
     b16:	79 8b       	std	Y+17, r23	; 0x11
     b18:	68 8b       	std	Y+16, r22	; 0x10
     b1a:	5b 8b       	std	Y+19, r21	; 0x13
     b1c:	4a 8b       	std	Y+18, r20	; 0x12
     b1e:	3f 87       	std	Y+15, r19	; 0x0f
     b20:	2e 87       	std	Y+14, r18	; 0x0e
     b22:	ea 86       	std	Y+10, r14	; 0x0a
     b24:	fb 86       	std	Y+11, r15	; 0x0b
     b26:	0c 87       	std	Y+12, r16	; 0x0c
     b28:	1d 87       	std	Y+13, r17	; 0x0d
     b2a:	08 8d       	ldd	r16, Y+24	; 0x18
     b2c:	19 8d       	ldd	r17, Y+25	; 0x19
     b2e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     b30:	3b 8d       	ldd	r19, Y+27	; 0x1b
     b32:	4c 89       	ldd	r20, Y+20	; 0x14
     b34:	5d 89       	ldd	r21, Y+21	; 0x15
     b36:	6e 89       	ldd	r22, Y+22	; 0x16
     b38:	7f 89       	ldd	r23, Y+23	; 0x17
     b3a:	0e 94 0a 05 	call	0xa14	; 0xa14 <GPIO_CORE::setRange(float, float)>
_ZN9GPIO_CORE17analog_to_voltageEj():
     b3e:	8f a8       	ldd	r8, Y+55	; 0x37
     b40:	98 ac       	ldd	r9, Y+56	; 0x38
     b42:	a9 ac       	ldd	r10, Y+57	; 0x39
     b44:	ba ac       	ldd	r11, Y+58	; 0x3a
     b46:	cb ac       	ldd	r12, Y+59	; 0x3b
     b48:	dc ac       	ldd	r13, Y+60	; 0x3c
     b4a:	ed ac       	ldd	r14, Y+61	; 0x3d
     b4c:	fe ac       	ldd	r15, Y+62	; 0x3e
     b4e:	6e 8d       	ldd	r22, Y+30	; 0x1e
     b50:	7f 8d       	ldd	r23, Y+31	; 0x1f
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__floatunsisf>
     b5a:	a5 01       	movw	r20, r10
     b5c:	94 01       	movw	r18, r8
     b5e:	0e 94 a1 11 	call	0x2342	; 0x2342 <__mulsf3>
     b62:	a7 01       	movw	r20, r14
     b64:	96 01       	movw	r18, r12
     b66:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__addsf3>
     b6a:	2b 01       	movw	r4, r22
     b6c:	3c 01       	movw	r6, r24
     b6e:	6c 8d       	ldd	r22, Y+28	; 0x1c
     b70:	7d 8d       	ldd	r23, Y+29	; 0x1d
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__floatunsisf>
     b7a:	a5 01       	movw	r20, r10
     b7c:	94 01       	movw	r18, r8
     b7e:	0e 94 a1 11 	call	0x2342	; 0x2342 <__mulsf3>
     b82:	a7 01       	movw	r20, r14
     b84:	96 01       	movw	r18, r12
     b86:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__addsf3>
     b8a:	ab 01       	movw	r20, r22
     b8c:	bc 01       	movw	r22, r24
_ZN9GPIO_CORE12reset_analogEjjjm():
     b8e:	93 01       	movw	r18, r6
     b90:	82 01       	movw	r16, r4
     b92:	ce 01       	movw	r24, r28
     b94:	0e 94 35 05 	call	0xa6a	; 0xa6a <GPIO_CORE::voltageRange(float, float)>
     b98:	8b 89       	ldd	r24, Y+19	; 0x13
     b9a:	8f 93       	push	r24
     b9c:	8a 89       	ldd	r24, Y+18	; 0x12
     b9e:	8f 93       	push	r24
     ba0:	89 89       	ldd	r24, Y+17	; 0x11
     ba2:	8f 93       	push	r24
     ba4:	88 89       	ldd	r24, Y+16	; 0x10
     ba6:	8f 93       	push	r24
     ba8:	8c e1       	ldi	r24, 0x1C	; 28
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	9f 93       	push	r25
     bae:	8f 93       	push	r24
     bb0:	81 ef       	ldi	r24, 0xF1	; 241
     bb2:	92 e0       	ldi	r25, 0x02	; 2
     bb4:	9f 93       	push	r25
     bb6:	8f 93       	push	r24
     bb8:	0e 94 03 0b 	call	0x1606	; 0x1606 <Print::printf(char const*, ...)>
     bbc:	8d b7       	in	r24, 0x3d	; 61
     bbe:	9e b7       	in	r25, 0x3e	; 62
     bc0:	08 96       	adiw	r24, 0x08	; 8
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	9e bf       	out	0x3e, r25	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	8d bf       	out	0x3d, r24	; 61
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	ff 90       	pop	r15
     bd6:	ef 90       	pop	r14
     bd8:	df 90       	pop	r13
     bda:	cf 90       	pop	r12
     bdc:	bf 90       	pop	r11
     bde:	af 90       	pop	r10
     be0:	9f 90       	pop	r9
     be2:	8f 90       	pop	r8
     be4:	7f 90       	pop	r7
     be6:	6f 90       	pop	r6
     be8:	5f 90       	pop	r5
     bea:	4f 90       	pop	r4
     bec:	08 95       	ret

00000bee <GPIO_CORE::reset()>:
_ZN9GPIO_CORE5resetEv():
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	ec 01       	movw	r28, r24
     bfc:	19 82       	std	Y+1, r1	; 0x01
     bfe:	1a 82       	std	Y+2, r1	; 0x02
     c00:	1f a2       	std	Y+39, r1	; 0x27
     c02:	1e a2       	std	Y+38, r1	; 0x26
     c04:	19 a2       	std	Y+33, r1	; 0x21
     c06:	18 a2       	std	Y+32, r1	; 0x20
     c08:	fc 01       	movw	r30, r24
     c0a:	ee 5b       	subi	r30, 0xBE	; 190
     c0c:	ff 4f       	sbci	r31, 0xFF	; 255
     c0e:	10 82       	st	Z, r1
     c10:	31 97       	sbiw	r30, 0x01	; 1
     c12:	10 82       	st	Z, r1
     c14:	1d a2       	std	Y+37, r1	; 0x25
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	9f ef       	ldi	r25, 0xFF	; 255
     c1a:	9b a7       	std	Y+43, r25	; 0x2b
     c1c:	8a a7       	std	Y+42, r24	; 0x2a
_ZN9GPIO_CORE8setRangeEff():
     c1e:	00 e0       	ldi	r16, 0x00	; 0
     c20:	10 e0       	ldi	r17, 0x00	; 0
     c22:	2a e7       	ldi	r18, 0x7A	; 122
     c24:	34 e4       	ldi	r19, 0x44	; 68
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	ba 01       	movw	r22, r20
     c2c:	ce 01       	movw	r24, r28
     c2e:	0e 94 a9 01 	call	0x352	; 0x352 <GPIO_CORE::setRange(float, float) [clone .part.1]>
_ZN9GPIO_CORE5resetEv():
     c32:	e1 2c       	mov	r14, r1
     c34:	f1 2c       	mov	r15, r1
     c36:	87 01       	movw	r16, r14
     c38:	21 e0       	ldi	r18, 0x01	; 1
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	ce 01       	movw	r24, r28
     c46:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <GPIO_CORE::reset_analog(unsigned int, unsigned int, unsigned int, unsigned long)>
     c4a:	00 e0       	ldi	r16, 0x00	; 0
     c4c:	10 e0       	ldi	r17, 0x00	; 0
     c4e:	20 ea       	ldi	r18, 0xA0	; 160
     c50:	30 e4       	ldi	r19, 0x40	; 64
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	ba 01       	movw	r22, r20
     c58:	ce 01       	movw	r24, r28
     c5a:	0e 94 35 05 	call	0xa6a	; 0xa6a <GPIO_CORE::voltageRange(float, float)>
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	e6 31       	cpi	r30, 0x16	; 22
     c64:	40 f4       	brcc	.+16     	; 0xc76 <GPIO_CORE::reset()+0x88>
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	ee 0f       	add	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	eb 53       	subi	r30, 0x3B	; 59
     c6e:	fd 4f       	sbci	r31, 0xFD	; 253
     c70:	d1 83       	std	Z+1, r29	; 0x01
     c72:	c0 83       	st	Z, r28
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ff 90       	pop	r15
     c80:	ef 90       	pop	r14
     c82:	08 95       	ret

00000c84 <GPIO_CORE::pwm_setup()>:
_ZN9GPIO_CORE9pwm_setupEv():
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	fc 01       	movw	r30, r24
     c8e:	42 89       	ldd	r20, Z+18	; 0x12
     c90:	53 89       	ldd	r21, Z+19	; 0x13
     c92:	14 ef       	ldi	r17, 0xF4	; 244
     c94:	e1 2e       	mov	r14, r17
     c96:	ff 24       	eor	r15, r15
     c98:	f3 94       	inc	r15
     c9a:	00 e0       	ldi	r16, 0x00	; 0
     c9c:	10 e0       	ldi	r17, 0x00	; 0
     c9e:	28 e0       	ldi	r18, 0x08	; 8
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <GPIO_CORE::reset_analog(unsigned int, unsigned int, unsigned int, unsigned long)>
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	08 95       	ret

00000cb6 <GPIO_CORE::print_conf()>:
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:466
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////  PRINT  /////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// PRINT ===================================================
void GPIO_CORE::print_conf(){
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	62 97       	sbiw	r28, 0x12	; 18
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	8c 01       	movw	r16, r24
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:467
  Serial.println("\n===========================================" );
     cd0:	67 e3       	ldi	r22, 0x37	; 55
     cd2:	71 e0       	ldi	r23, 0x01	; 1
     cd4:	81 ef       	ldi	r24, 0xF1	; 241
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <Print::println(char const*)>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:468
  Serial.println( "GPIO: " + String(pin) );
     cdc:	4a e0       	ldi	r20, 0x0A	; 10
     cde:	f8 01       	movw	r30, r16
     ce0:	63 81       	ldd	r22, Z+3	; 0x03
     ce2:	ce 01       	movw	r24, r28
     ce4:	07 96       	adiw	r24, 0x07	; 7
     ce6:	0e 94 49 0c 	call	0x1892	; 0x1892 <String::String(unsigned char, unsigned char)>
_ZN15StringSumHelperC4EPKc():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:217
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
     cea:	64 e6       	ldi	r22, 0x64	; 100
     cec:	71 e0       	ldi	r23, 0x01	; 1
     cee:	ce 01       	movw	r24, r28
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	0e 94 2a 0c 	call	0x1854	; 0x1854 <String::String(char const*)>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:468
     cf6:	be 01       	movw	r22, r28
     cf8:	69 5f       	subi	r22, 0xF9	; 249
     cfa:	7f 4f       	sbci	r23, 0xFF	; 255
     cfc:	ce 01       	movw	r24, r28
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <operator+(StringSumHelper const&, String const&)>
     d04:	bc 01       	movw	r22, r24
     d06:	81 ef       	ldi	r24, 0xF1	; 241
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:468
     d16:	ce 01       	movw	r24, r28
     d18:	07 96       	adiw	r24, 0x07	; 7
     d1a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:469
  Serial.println( "|- Flux: "  + String((IN?"IN":"")) + String((OUT?"OUT":"")) );
     d1e:	f8 01       	movw	r30, r16
     d20:	82 81       	ldd	r24, Z+2	; 0x02
     d22:	63 e4       	ldi	r22, 0x43	; 67
     d24:	72 e0       	ldi	r23, 0x02	; 2
     d26:	88 23       	and	r24, r24
     d28:	11 f0       	breq	.+4      	; 0xd2e <GPIO_CORE::print_conf()+0x78>
     d2a:	60 e3       	ldi	r22, 0x30	; 48
     d2c:	71 e0       	ldi	r23, 0x01	; 1
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:469 (discriminator 4)
     d2e:	ce 01       	movw	r24, r28
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	0e 94 2a 0c 	call	0x1854	; 0x1854 <String::String(char const*)>
     d36:	f8 01       	movw	r30, r16
     d38:	81 81       	ldd	r24, Z+1	; 0x01
     d3a:	63 e4       	ldi	r22, 0x43	; 67
     d3c:	72 e0       	ldi	r23, 0x02	; 2
     d3e:	88 23       	and	r24, r24
     d40:	11 f0       	breq	.+4      	; 0xd46 <GPIO_CORE::print_conf()+0x90>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:469
     d42:	64 e3       	ldi	r22, 0x34	; 52
     d44:	71 e0       	ldi	r23, 0x01	; 1
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:469 (discriminator 8)
     d46:	ce 01       	movw	r24, r28
     d48:	0d 96       	adiw	r24, 0x0d	; 13
     d4a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <String::String(char const*)>
_ZN15StringSumHelperC4EPKc():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:217 (discriminator 8)
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
     d4e:	6b e6       	ldi	r22, 0x6B	; 107
     d50:	71 e0       	ldi	r23, 0x01	; 1
     d52:	ce 01       	movw	r24, r28
     d54:	07 96       	adiw	r24, 0x07	; 7
     d56:	0e 94 2a 0c 	call	0x1854	; 0x1854 <String::String(char const*)>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:469 (discriminator 8)
     d5a:	be 01       	movw	r22, r28
     d5c:	63 5f       	subi	r22, 0xF3	; 243
     d5e:	7f 4f       	sbci	r23, 0xFF	; 255
     d60:	ce 01       	movw	r24, r28
     d62:	07 96       	adiw	r24, 0x07	; 7
     d64:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <operator+(StringSumHelper const&, String const&)>
     d68:	be 01       	movw	r22, r28
     d6a:	6f 5f       	subi	r22, 0xFF	; 255
     d6c:	7f 4f       	sbci	r23, 0xFF	; 255
     d6e:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <operator+(StringSumHelper const&, String const&)>
     d72:	bc 01       	movw	r22, r24
     d74:	81 ef       	ldi	r24, 0xF1	; 241
     d76:	92 e0       	ldi	r25, 0x02	; 2
     d78:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:213 (discriminator 8)
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     d7c:	ce 01       	movw	r24, r28
     d7e:	07 96       	adiw	r24, 0x07	; 7
     d80:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:469 (discriminator 8)
     d84:	ce 01       	movw	r24, r28
     d86:	0d 96       	adiw	r24, 0x0d	; 13
     d88:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
     d8c:	ce 01       	movw	r24, r28
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:470 (discriminator 8)
  Serial.println( "|- Type: "  + String(TYPE) );
     d94:	f8 01       	movw	r30, r16
     d96:	64 81       	ldd	r22, Z+4	; 0x04
     d98:	75 81       	ldd	r23, Z+5	; 0x05
     d9a:	4a e0       	ldi	r20, 0x0A	; 10
     d9c:	ce 01       	movw	r24, r28
     d9e:	07 96       	adiw	r24, 0x07	; 7
     da0:	0e 94 76 0c 	call	0x18ec	; 0x18ec <String::String(int, unsigned char)>
_ZN15StringSumHelperC4EPKc():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:217 (discriminator 8)
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
     da4:	65 e7       	ldi	r22, 0x75	; 117
     da6:	71 e0       	ldi	r23, 0x01	; 1
     da8:	ce 01       	movw	r24, r28
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	0e 94 2a 0c 	call	0x1854	; 0x1854 <String::String(char const*)>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:470 (discriminator 8)
     db0:	be 01       	movw	r22, r28
     db2:	69 5f       	subi	r22, 0xF9	; 249
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	ce 01       	movw	r24, r28
     db8:	01 96       	adiw	r24, 0x01	; 1
     dba:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <operator+(StringSumHelper const&, String const&)>
     dbe:	bc 01       	movw	r22, r24
     dc0:	81 ef       	ldi	r24, 0xF1	; 241
     dc2:	92 e0       	ldi	r25, 0x02	; 2
     dc4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:213 (discriminator 8)
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     dc8:	ce 01       	movw	r24, r28
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:470 (discriminator 8)
     dd0:	ce 01       	movw	r24, r28
     dd2:	07 96       	adiw	r24, 0x07	; 7
     dd4:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:471 (discriminator 8)
  Serial.println( "|- Tech: "  + String(Tech) );
     dd8:	4a e0       	ldi	r20, 0x0A	; 10
     dda:	f8 01       	movw	r30, r16
     ddc:	66 81       	ldd	r22, Z+6	; 0x06
     dde:	ce 01       	movw	r24, r28
     de0:	07 96       	adiw	r24, 0x07	; 7
     de2:	0e 94 49 0c 	call	0x1892	; 0x1892 <String::String(unsigned char, unsigned char)>
_ZN15StringSumHelperC4EPKc():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:217 (discriminator 8)
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
     de6:	6f e7       	ldi	r22, 0x7F	; 127
     de8:	71 e0       	ldi	r23, 0x01	; 1
     dea:	ce 01       	movw	r24, r28
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	0e 94 2a 0c 	call	0x1854	; 0x1854 <String::String(char const*)>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:471 (discriminator 8)
     df2:	be 01       	movw	r22, r28
     df4:	69 5f       	subi	r22, 0xF9	; 249
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	ce 01       	movw	r24, r28
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <operator+(StringSumHelper const&, String const&)>
     e00:	bc 01       	movw	r22, r24
     e02:	81 ef       	ldi	r24, 0xF1	; 241
     e04:	92 e0       	ldi	r25, 0x02	; 2
     e06:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:213 (discriminator 8)
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     e0a:	ce 01       	movw	r24, r28
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:471 (discriminator 8)
     e12:	ce 01       	movw	r24, r28
     e14:	07 96       	adiw	r24, 0x07	; 7
     e16:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:472 (discriminator 8)
  Serial.println( "|- state ON: "  + String(state_on) );
     e1a:	f8 01       	movw	r30, r16
     e1c:	67 81       	ldd	r22, Z+7	; 0x07
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	4a e0       	ldi	r20, 0x0A	; 10
     e22:	ce 01       	movw	r24, r28
     e24:	07 96       	adiw	r24, 0x07	; 7
     e26:	0e 94 76 0c 	call	0x18ec	; 0x18ec <String::String(int, unsigned char)>
_ZN15StringSumHelperC4EPKc():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:217 (discriminator 8)
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
     e2a:	69 e8       	ldi	r22, 0x89	; 137
     e2c:	71 e0       	ldi	r23, 0x01	; 1
     e2e:	ce 01       	movw	r24, r28
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	0e 94 2a 0c 	call	0x1854	; 0x1854 <String::String(char const*)>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:472 (discriminator 8)
     e36:	be 01       	movw	r22, r28
     e38:	69 5f       	subi	r22, 0xF9	; 249
     e3a:	7f 4f       	sbci	r23, 0xFF	; 255
     e3c:	ce 01       	movw	r24, r28
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <operator+(StringSumHelper const&, String const&)>
     e44:	bc 01       	movw	r22, r24
     e46:	81 ef       	ldi	r24, 0xF1	; 241
     e48:	92 e0       	ldi	r25, 0x02	; 2
     e4a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:213 (discriminator 8)
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     e4e:	ce 01       	movw	r24, r28
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:472 (discriminator 8)
     e56:	ce 01       	movw	r24, r28
     e58:	07 96       	adiw	r24, 0x07	; 7
     e5a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:473 (discriminator 8)
  Serial.println( "|- Analog Freq [Hz]: "  + String(AN_HZ));
     e5e:	f8 01       	movw	r30, r16
     e60:	42 85       	ldd	r20, Z+10	; 0x0a
     e62:	53 85       	ldd	r21, Z+11	; 0x0b
     e64:	64 85       	ldd	r22, Z+12	; 0x0c
     e66:	75 85       	ldd	r23, Z+13	; 0x0d
     e68:	2a e0       	ldi	r18, 0x0A	; 10
     e6a:	ce 01       	movw	r24, r28
     e6c:	07 96       	adiw	r24, 0x07	; 7
     e6e:	0e 94 ce 0c 	call	0x199c	; 0x199c <String::String(unsigned long, unsigned char)>
_ZN15StringSumHelperC4EPKc():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:217 (discriminator 8)
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
     e72:	67 e9       	ldi	r22, 0x97	; 151
     e74:	71 e0       	ldi	r23, 0x01	; 1
     e76:	ce 01       	movw	r24, r28
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <String::String(char const*)>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:473 (discriminator 8)
     e7e:	be 01       	movw	r22, r28
     e80:	69 5f       	subi	r22, 0xF9	; 249
     e82:	7f 4f       	sbci	r23, 0xFF	; 255
     e84:	ce 01       	movw	r24, r28
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <operator+(StringSumHelper const&, String const&)>
     e8c:	bc 01       	movw	r22, r24
     e8e:	81 ef       	ldi	r24, 0xF1	; 241
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:213 (discriminator 8)
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     e96:	ce 01       	movw	r24, r28
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:473 (discriminator 8)
     e9e:	ce 01       	movw	r24, r28
     ea0:	07 96       	adiw	r24, 0x07	; 7
     ea2:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:474 (discriminator 8)
  Serial.println( "|- Analog Res [bits]: "  + String(AN_RES));
     ea6:	f8 01       	movw	r30, r16
     ea8:	66 85       	ldd	r22, Z+14	; 0x0e
     eaa:	77 85       	ldd	r23, Z+15	; 0x0f
     eac:	4a e0       	ldi	r20, 0x0A	; 10
     eae:	ce 01       	movw	r24, r28
     eb0:	07 96       	adiw	r24, 0x07	; 7
     eb2:	0e 94 a2 0c 	call	0x1944	; 0x1944 <String::String(unsigned int, unsigned char)>
_ZN15StringSumHelperC4EPKc():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:217 (discriminator 8)
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
     eb6:	6d ea       	ldi	r22, 0xAD	; 173
     eb8:	71 e0       	ldi	r23, 0x01	; 1
     eba:	ce 01       	movw	r24, r28
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	0e 94 2a 0c 	call	0x1854	; 0x1854 <String::String(char const*)>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:474 (discriminator 8)
     ec2:	be 01       	movw	r22, r28
     ec4:	69 5f       	subi	r22, 0xF9	; 249
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	ce 01       	movw	r24, r28
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <operator+(StringSumHelper const&, String const&)>
     ed0:	bc 01       	movw	r22, r24
     ed2:	81 ef       	ldi	r24, 0xF1	; 241
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:213 (discriminator 8)
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:474 (discriminator 8)
     ee2:	ce 01       	movw	r24, r28
     ee4:	07 96       	adiw	r24, 0x07	; 7
     ee6:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:475 (discriminator 8)
  Serial.println( "|- PWM_CH: "  + String(PWM_CH));
     eea:	4a e0       	ldi	r20, 0x0A	; 10
     eec:	f8 01       	movw	r30, r16
     eee:	62 a1       	ldd	r22, Z+34	; 0x22
     ef0:	ce 01       	movw	r24, r28
     ef2:	07 96       	adiw	r24, 0x07	; 7
     ef4:	0e 94 49 0c 	call	0x1892	; 0x1892 <String::String(unsigned char, unsigned char)>
_ZN15StringSumHelperC4EPKc():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:217 (discriminator 8)
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
     ef8:	64 ec       	ldi	r22, 0xC4	; 196
     efa:	71 e0       	ldi	r23, 0x01	; 1
     efc:	ce 01       	movw	r24, r28
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	0e 94 2a 0c 	call	0x1854	; 0x1854 <String::String(char const*)>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:475 (discriminator 8)
     f04:	be 01       	movw	r22, r28
     f06:	69 5f       	subi	r22, 0xF9	; 249
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	ce 01       	movw	r24, r28
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <operator+(StringSumHelper const&, String const&)>
     f12:	bc 01       	movw	r22, r24
     f14:	81 ef       	ldi	r24, 0xF1	; 241
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:213 (discriminator 8)
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     f1c:	ce 01       	movw	r24, r28
     f1e:	01 96       	adiw	r24, 0x01	; 1
     f20:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:475 (discriminator 8)
     f24:	ce 01       	movw	r24, r28
     f26:	07 96       	adiw	r24, 0x07	; 7
     f28:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:476 (discriminator 8)
  Serial.println( "|- AN MIN: "  + String(AN_MIN));
     f2c:	f8 01       	movw	r30, r16
     f2e:	60 89       	ldd	r22, Z+16	; 0x10
     f30:	71 89       	ldd	r23, Z+17	; 0x11
     f32:	4a e0       	ldi	r20, 0x0A	; 10
     f34:	ce 01       	movw	r24, r28
     f36:	07 96       	adiw	r24, 0x07	; 7
     f38:	0e 94 a2 0c 	call	0x1944	; 0x1944 <String::String(unsigned int, unsigned char)>
_ZN15StringSumHelperC4EPKc():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:217 (discriminator 8)
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
     f3c:	60 ed       	ldi	r22, 0xD0	; 208
     f3e:	71 e0       	ldi	r23, 0x01	; 1
     f40:	ce 01       	movw	r24, r28
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	0e 94 2a 0c 	call	0x1854	; 0x1854 <String::String(char const*)>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:476 (discriminator 8)
     f48:	be 01       	movw	r22, r28
     f4a:	69 5f       	subi	r22, 0xF9	; 249
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	ce 01       	movw	r24, r28
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <operator+(StringSumHelper const&, String const&)>
     f56:	bc 01       	movw	r22, r24
     f58:	81 ef       	ldi	r24, 0xF1	; 241
     f5a:	92 e0       	ldi	r25, 0x02	; 2
     f5c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:213 (discriminator 8)
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     f60:	ce 01       	movw	r24, r28
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:476 (discriminator 8)
     f68:	ce 01       	movw	r24, r28
     f6a:	07 96       	adiw	r24, 0x07	; 7
     f6c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:477 (discriminator 8)
  Serial.println( "|- AN MAX: "  + String(AN_MAX));
     f70:	f8 01       	movw	r30, r16
     f72:	62 89       	ldd	r22, Z+18	; 0x12
     f74:	73 89       	ldd	r23, Z+19	; 0x13
     f76:	4a e0       	ldi	r20, 0x0A	; 10
     f78:	ce 01       	movw	r24, r28
     f7a:	07 96       	adiw	r24, 0x07	; 7
     f7c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <String::String(unsigned int, unsigned char)>
_ZN15StringSumHelperC4EPKc():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:217 (discriminator 8)
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
     f80:	6c ed       	ldi	r22, 0xDC	; 220
     f82:	71 e0       	ldi	r23, 0x01	; 1
     f84:	ce 01       	movw	r24, r28
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	0e 94 2a 0c 	call	0x1854	; 0x1854 <String::String(char const*)>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:477 (discriminator 8)
     f8c:	be 01       	movw	r22, r28
     f8e:	69 5f       	subi	r22, 0xF9	; 249
     f90:	7f 4f       	sbci	r23, 0xFF	; 255
     f92:	ce 01       	movw	r24, r28
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <operator+(StringSumHelper const&, String const&)>
     f9a:	bc 01       	movw	r22, r24
     f9c:	81 ef       	ldi	r24, 0xF1	; 241
     f9e:	92 e0       	ldi	r25, 0x02	; 2
     fa0:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:213 (discriminator 8)
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     fa4:	ce 01       	movw	r24, r28
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:477 (discriminator 8)
     fac:	ce 01       	movw	r24, r28
     fae:	07 96       	adiw	r24, 0x07	; 7
     fb0:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:478 (discriminator 8)
  Serial.println( "|- SET MIN: "  + String(SET_MIN));
     fb4:	f8 01       	movw	r30, r16
     fb6:	44 89       	ldd	r20, Z+20	; 0x14
     fb8:	55 89       	ldd	r21, Z+21	; 0x15
     fba:	66 89       	ldd	r22, Z+22	; 0x16
     fbc:	77 89       	ldd	r23, Z+23	; 0x17
     fbe:	22 e0       	ldi	r18, 0x02	; 2
     fc0:	ce 01       	movw	r24, r28
     fc2:	07 96       	adiw	r24, 0x07	; 7
     fc4:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <String::String(float, unsigned char)>
_ZN15StringSumHelperC4EPKc():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:217 (discriminator 8)
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
     fc8:	68 ee       	ldi	r22, 0xE8	; 232
     fca:	71 e0       	ldi	r23, 0x01	; 1
     fcc:	ce 01       	movw	r24, r28
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	0e 94 2a 0c 	call	0x1854	; 0x1854 <String::String(char const*)>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:478 (discriminator 8)
     fd4:	be 01       	movw	r22, r28
     fd6:	69 5f       	subi	r22, 0xF9	; 249
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	ce 01       	movw	r24, r28
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <operator+(StringSumHelper const&, String const&)>
     fe2:	bc 01       	movw	r22, r24
     fe4:	81 ef       	ldi	r24, 0xF1	; 241
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:213 (discriminator 8)
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     fec:	ce 01       	movw	r24, r28
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:478 (discriminator 8)
     ff4:	ce 01       	movw	r24, r28
     ff6:	07 96       	adiw	r24, 0x07	; 7
     ff8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:479 (discriminator 8)
  Serial.println( "|- SET MAX: "  + String(SET_MAX));
     ffc:	f8 01       	movw	r30, r16
     ffe:	40 8d       	ldd	r20, Z+24	; 0x18
    1000:	51 8d       	ldd	r21, Z+25	; 0x19
    1002:	62 8d       	ldd	r22, Z+26	; 0x1a
    1004:	73 8d       	ldd	r23, Z+27	; 0x1b
    1006:	22 e0       	ldi	r18, 0x02	; 2
    1008:	ce 01       	movw	r24, r28
    100a:	07 96       	adiw	r24, 0x07	; 7
    100c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <String::String(float, unsigned char)>
_ZN15StringSumHelperC4EPKc():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:217 (discriminator 8)
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
    1010:	65 ef       	ldi	r22, 0xF5	; 245
    1012:	71 e0       	ldi	r23, 0x01	; 1
    1014:	ce 01       	movw	r24, r28
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	0e 94 2a 0c 	call	0x1854	; 0x1854 <String::String(char const*)>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:479 (discriminator 8)
    101c:	be 01       	movw	r22, r28
    101e:	69 5f       	subi	r22, 0xF9	; 249
    1020:	7f 4f       	sbci	r23, 0xFF	; 255
    1022:	ce 01       	movw	r24, r28
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <operator+(StringSumHelper const&, String const&)>
    102a:	bc 01       	movw	r22, r24
    102c:	81 ef       	ldi	r24, 0xF1	; 241
    102e:	92 e0       	ldi	r25, 0x02	; 2
    1030:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Print::println(String const&)>
_ZN15StringSumHelperD4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.h:213 (discriminator 8)
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
    1034:	ce 01       	movw	r24, r28
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
_ZN9GPIO_CORE10print_confEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:479 (discriminator 8)
    103c:	ce 01       	movw	r24, r28
    103e:	07 96       	adiw	r24, 0x07	; 7
    1040:	0e 94 bb 0b 	call	0x1776	; 0x1776 <String::~String()>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:480 (discriminator 8)
  Serial.println( "===========================================\n" );
    1044:	62 e0       	ldi	r22, 0x02	; 2
    1046:	72 e0       	ldi	r23, 0x02	; 2
    1048:	81 ef       	ldi	r24, 0xF1	; 241
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <Print::println(char const*)>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:481 (discriminator 8)
}
    1050:	62 96       	adiw	r28, 0x12	; 18
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	08 95       	ret

00001066 <GPIO_CORE::begin()>:
_ZN9GPIO_CORE5beginEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:80
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////  BEGIN  ///////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
boolean GPIO_CORE::begin(){
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	ec 01       	movw	r28, r24
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:82

  if(!reset()) return false;
    1074:	0e 94 f7 05 	call	0xbee	; 0xbee <GPIO_CORE::reset()>
    1078:	88 23       	and	r24, r24
    107a:	99 f0       	breq	.+38     	; 0x10a2 <GPIO_CORE::begin()+0x3c>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:84

  if( GPIO_SIGNAL(TYPE) == GPIO__OUT ){
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	80 ff       	sbrs	r24, 0
    1080:	43 c0       	rjmp	.+134    	; 0x1108 <GPIO_CORE::begin()+0xa2>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:86
    
    OUT = true;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	8a 83       	std	Y+2, r24	; 0x02
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:88
    
    pinMode(pin,OUTPUT);
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <pinMode>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:90
    
    switch (Tech){
    108e:	8e 81       	ldd	r24, Y+6	; 0x06
    1090:	82 30       	cpi	r24, 0x02	; 2
    1092:	59 f1       	breq	.+86     	; 0x10ea <GPIO_CORE::begin()+0x84>
    1094:	68 f4       	brcc	.+26     	; 0x10b0 <GPIO_CORE::begin()+0x4a>
    1096:	88 23       	and	r24, r24
    1098:	79 f0       	breq	.+30     	; 0x10b8 <GPIO_CORE::begin()+0x52>
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	a9 f0       	breq	.+42     	; 0x10c8 <GPIO_CORE::begin()+0x62>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:104
      //case GPIO_OUT_PPM  :  break;
      //case GPIO_OUT_IR   :  break;
      //case GPIO_OUT_PIXEL:  break;
      //case GPIO_OUT_MAGIC:  break;
      //case GPIO_OUT_TX   :  break;
      default: OK = false; return false; break;
    109e:	18 82       	st	Y, r1
    10a0:	80 e0       	ldi	r24, 0x00	; 0
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:135

  print_conf();

  return OK;

}
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	08 95       	ret
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:90
    
    OUT = true;
    
    pinMode(pin,OUTPUT);
    
    switch (Tech){
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	e9 f0       	breq	.+58     	; 0x10ee <GPIO_CORE::begin()+0x88>
    10b4:	86 30       	cpi	r24, 0x06	; 6
    10b6:	98 f7       	brcc	.-26     	; 0x109e <GPIO_CORE::begin()+0x38>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:107
      //case GPIO_OUT_MAGIC:  break;
      //case GPIO_OUT_TX   :  break;
      default: OK = false; return false; break;
    }

    off();
    10b8:	ce 01       	movw	r24, r28
    10ba:	0e 94 49 03 	call	0x692	; 0x692 <GPIO_CORE::off()>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:131
      default: OK = false; return false; break;
    }

  }

  print_conf();
    10be:	ce 01       	movw	r24, r28
    10c0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <GPIO_CORE::print_conf()>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:133

  return OK;
    10c4:	88 81       	ld	r24, Y
    10c6:	ed cf       	rjmp	.-38     	; 0x10a2 <GPIO_CORE::begin()+0x3c>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:92
    
    pinMode(pin,OUTPUT);
    
    switch (Tech){
      case GPIO_OUT__DIG       :  break;
      case GPIO_OUT__PWM       : OK = pwm_setup(); reset_analog(0,GPIO_CORE_PWM_MAX,GPIO_CORE_PWM_RES,0); break;
    10c8:	ce 01       	movw	r24, r28
    10ca:	0e 94 42 06 	call	0xc84	; 0xc84 <GPIO_CORE::pwm_setup()>
    10ce:	88 83       	st	Y, r24
    10d0:	e1 2c       	mov	r14, r1
    10d2:	f1 2c       	mov	r15, r1
    10d4:	87 01       	movw	r16, r14
    10d6:	28 e0       	ldi	r18, 0x08	; 8
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	4f ef       	ldi	r20, 0xFF	; 255
    10dc:	50 e0       	ldi	r21, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	ce 01       	movw	r24, r28
    10e4:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <GPIO_CORE::reset_analog(unsigned int, unsigned int, unsigned int, unsigned long)>
    10e8:	e7 cf       	rjmp	.-50     	; 0x10b8 <GPIO_CORE::begin()+0x52>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:93
      case GPIO_OUT__PWM_MOTOR : OK = pwm_setup(25000,10); break;
    10ea:	18 82       	st	Y, r1
    10ec:	e5 cf       	rjmp	.-54     	; 0x10b8 <GPIO_CORE::begin()+0x52>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:94
      case GPIO_OUT__PWM_SERVO : OK = pwm_setup(100,10); setRange(/*35*/40,258); break;
    10ee:	18 82       	st	Y, r1
_ZN9GPIO_CORE8setRangeEff():
    10f0:	00 e0       	ldi	r16, 0x00	; 0
    10f2:	10 e0       	ldi	r17, 0x00	; 0
    10f4:	21 e8       	ldi	r18, 0x81	; 129
    10f6:	33 e4       	ldi	r19, 0x43	; 67
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	60 e2       	ldi	r22, 0x20	; 32
    10fe:	72 e4       	ldi	r23, 0x42	; 66
    1100:	ce 01       	movw	r24, r28
    1102:	0e 94 a9 01 	call	0x352	; 0x352 <GPIO_CORE::setRange(float, float) [clone .part.1]>
    1106:	d8 cf       	rjmp	.-80     	; 0x10b8 <GPIO_CORE::begin()+0x52>
_ZN9GPIO_CORE5beginEv():
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:111

    off();

  }else if( GPIO_SIGNAL(TYPE) == GPIO__IN  ){
    
    IN  = true;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	89 83       	std	Y+1, r24	; 0x01
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:113

    switch(Tech){
    110c:	8e 81       	ldd	r24, Y+6	; 0x06
    110e:	82 30       	cpi	r24, 0x02	; 2
    1110:	99 f0       	breq	.+38     	; 0x1138 <GPIO_CORE::begin()+0xd2>
    1112:	83 30       	cpi	r24, 0x03	; 3
    1114:	99 f0       	breq	.+38     	; 0x113c <GPIO_CORE::begin()+0xd6>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:114
      case GPIO_IN__DIG       : pinMode(pin,INPUT       ); cb_read = GPIO_CORE_IN_CB[0][state_on]; break;
    1116:	60 e0       	ldi	r22, 0x00	; 0
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:113

  }else if( GPIO_SIGNAL(TYPE) == GPIO__IN  ){
    
    IN  = true;

    switch(Tech){
    1118:	81 11       	cpse	r24, r1
    111a:	c1 cf       	rjmp	.-126    	; 0x109e <GPIO_CORE::begin()+0x38>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:115
      case GPIO_IN__DIG       : pinMode(pin,INPUT       ); cb_read = GPIO_CORE_IN_CB[0][state_on]; break;
      case GPIO_IN__DIG_PULLUP: pinMode(pin,INPUT_PULLUP); cb_read = GPIO_CORE_IN_CB[0][state_on]; break;
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <pinMode>
    1122:	ef 81       	ldd	r30, Y+7	; 0x07
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	ee 0f       	add	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	ea 5f       	subi	r30, 0xFA	; 250
    112c:	fe 4f       	sbci	r31, 0xFE	; 254
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	9f a3       	std	Y+39, r25	; 0x27
    1134:	8e a3       	std	Y+38, r24	; 0x26
    1136:	c3 cf       	rjmp	.-122    	; 0x10be <GPIO_CORE::begin()+0x58>
    1138:	62 e0       	ldi	r22, 0x02	; 2
    113a:	f0 cf       	rjmp	.-32     	; 0x111c <GPIO_CORE::begin()+0xb6>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:117
      case GPIO_IN__ADC       :
        pinMode(pin,INPUT       );
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <pinMode>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:118
        cb_read = GPIO_CORE_IN_CB[1][state_on];
    1144:	ef 81       	ldd	r30, Y+7	; 0x07
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	ee 0f       	add	r30, r30
    114a:	ff 1f       	adc	r31, r31
    114c:	e6 5f       	subi	r30, 0xF6	; 246
    114e:	fe 4f       	sbci	r31, 0xFE	; 254
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
    1154:	9f a3       	std	Y+39, r25	; 0x27
    1156:	8e a3       	std	Y+38, r24	; 0x26
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:119
        reset_analog(0,GPIO_CORE_ADC_MAX,GPIO_CORE_ADC_RES,0);
    1158:	e1 2c       	mov	r14, r1
    115a:	f1 2c       	mov	r15, r1
    115c:	87 01       	movw	r16, r14
    115e:	2a e0       	ldi	r18, 0x0A	; 10
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	4f ef       	ldi	r20, 0xFF	; 255
    1164:	53 e0       	ldi	r21, 0x03	; 3
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	ce 01       	movw	r24, r28
    116c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <GPIO_CORE::reset_analog(unsigned int, unsigned int, unsigned int, unsigned long)>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:120
        voltageRange( 0, GPIO_CORE_VCC);
    1170:	00 e0       	ldi	r16, 0x00	; 0
    1172:	10 e0       	ldi	r17, 0x00	; 0
    1174:	20 ea       	ldi	r18, 0xA0	; 160
    1176:	30 e4       	ldi	r19, 0x40	; 64
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	ba 01       	movw	r22, r20
    117e:	ce 01       	movw	r24, r28
    1180:	0e 94 35 05 	call	0xa6a	; 0xa6a <GPIO_CORE::voltageRange(float, float)>
c:\Users\UERJBotz\Documents\Arduino\libraries\GPIO_core\src/GPIO_CORE.cpp:121
      break;
    1184:	9c cf       	rjmp	.-200    	; 0x10be <GPIO_CORE::begin()+0x58>

00001186 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1186:	fc 01       	movw	r30, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1188:	91 8d       	ldd	r25, Z+25	; 0x19
    118a:	22 8d       	ldd	r18, Z+26	; 0x1a
    118c:	89 2f       	mov	r24, r25
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	80 5c       	subi	r24, 0xC0	; 192
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	82 1b       	sub	r24, r18
    1196:	91 09       	sbc	r25, r1
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    1198:	8f 73       	andi	r24, 0x3F	; 63
    119a:	99 27       	eor	r25, r25
    119c:	08 95       	ret

0000119e <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    119e:	fc 01       	movw	r30, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    11a0:	91 8d       	ldd	r25, Z+25	; 0x19
    11a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    11a4:	98 17       	cp	r25, r24
    11a6:	31 f0       	breq	.+12     	; 0x11b4 <HardwareSerial::peek()+0x16>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    11a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    11aa:	e8 0f       	add	r30, r24
    11ac:	f1 1d       	adc	r31, r1
    11ae:	85 8d       	ldd	r24, Z+29	; 0x1d
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	08 95       	ret
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    11b4:	8f ef       	ldi	r24, 0xFF	; 255
    11b6:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    11b8:	08 95       	ret

000011ba <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    11ba:	fc 01       	movw	r30, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    11bc:	91 8d       	ldd	r25, Z+25	; 0x19
    11be:	82 8d       	ldd	r24, Z+26	; 0x1a
    11c0:	98 17       	cp	r25, r24
    11c2:	61 f0       	breq	.+24     	; 0x11dc <HardwareSerial::read()+0x22>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    11c4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    11c6:	ae 0f       	add	r26, r30
    11c8:	bf 2f       	mov	r27, r31
    11ca:	b1 1d       	adc	r27, r1
    11cc:	5d 96       	adiw	r26, 0x1d	; 29
    11ce:	8c 91       	ld	r24, X
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    11d0:	92 8d       	ldd	r25, Z+26	; 0x1a
    11d2:	9f 5f       	subi	r25, 0xFF	; 255
    11d4:	9f 73       	andi	r25, 0x3F	; 63
    11d6:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	08 95       	ret
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    11dc:	8f ef       	ldi	r24, 0xFF	; 255
    11de:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    11e0:	08 95       	ret

000011e2 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    11e2:	fc 01       	movw	r30, r24
    11e4:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    11e6:	44 8d       	ldd	r20, Z+28	; 0x1c
    11e8:	25 2f       	mov	r18, r21
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	84 2f       	mov	r24, r20
    11ee:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    11f0:	82 1b       	sub	r24, r18
    11f2:	93 0b       	sbc	r25, r19
    11f4:	54 17       	cp	r21, r20
    11f6:	10 f0       	brcs	.+4      	; 0x11fc <HardwareSerial::availableForWrite()+0x1a>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    11f8:	cf 96       	adiw	r24, 0x3f	; 63
    11fa:	08 95       	ret
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    11fc:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    11fe:	08 95       	ret

00001200 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1200:	86 e4       	ldi	r24, 0x46	; 70
    1202:	9a e0       	ldi	r25, 0x0A	; 10
    1204:	89 2b       	or	r24, r25
    1206:	49 f0       	breq	.+18     	; 0x121a <serialEventRun()+0x1a>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	89 2b       	or	r24, r25
    120e:	29 f0       	breq	.+10     	; 0x121a <serialEventRun()+0x1a>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    1210:	0e 94 46 0a 	call	0x148c	; 0x148c <Serial0_available()>
    1214:	81 11       	cpse	r24, r1
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    1216:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    121a:	08 95       	ret

0000121c <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    121c:	fc 01       	movw	r30, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    121e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1220:	a8 0f       	add	r26, r24
    1222:	b9 2f       	mov	r27, r25
    1224:	b1 1d       	adc	r27, r1
    1226:	a3 5a       	subi	r26, 0xA3	; 163
    1228:	bf 4f       	sbci	r27, 0xFF	; 255
    122a:	2c 91       	ld	r18, X
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    122c:	84 8d       	ldd	r24, Z+28	; 0x1c
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	8f 73       	andi	r24, 0x3F	; 63
    1234:	99 27       	eor	r25, r25
    1236:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    1238:	a6 89       	ldd	r26, Z+22	; 0x16
    123a:	b7 89       	ldd	r27, Z+23	; 0x17
    123c:	2c 93       	st	X, r18
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    123e:	a0 89       	ldd	r26, Z+16	; 0x10
    1240:	b1 89       	ldd	r27, Z+17	; 0x11
    1242:	8c 91       	ld	r24, X
    1244:	80 64       	ori	r24, 0x40	; 64
    1246:	8c 93       	st	X, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    1248:	93 8d       	ldd	r25, Z+27	; 0x1b
    124a:	84 8d       	ldd	r24, Z+28	; 0x1c
    124c:	98 13       	cpse	r25, r24
    124e:	06 c0       	rjmp	.+12     	; 0x125c <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    1250:	02 88       	ldd	r0, Z+18	; 0x12
    1252:	f3 89       	ldd	r31, Z+19	; 0x13
    1254:	e0 2d       	mov	r30, r0
    1256:	80 81       	ld	r24, Z
    1258:	8f 7d       	andi	r24, 0xDF	; 223
    125a:	80 83       	st	Z, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    125c:	08 95       	ret

0000125e <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	ec 01       	movw	r28, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1264:	88 8d       	ldd	r24, Y+24	; 0x18
    1266:	88 23       	and	r24, r24
    1268:	b9 f0       	breq	.+46     	; 0x1298 <HardwareSerial::flush()+0x3a>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    126a:	aa 89       	ldd	r26, Y+18	; 0x12
    126c:	bb 89       	ldd	r27, Y+19	; 0x13
    126e:	e8 89       	ldd	r30, Y+16	; 0x10
    1270:	f9 89       	ldd	r31, Y+17	; 0x11
    1272:	8c 91       	ld	r24, X
    1274:	85 fd       	sbrc	r24, 5
    1276:	03 c0       	rjmp	.+6      	; 0x127e <HardwareSerial::flush()+0x20>
    1278:	80 81       	ld	r24, Z
    127a:	86 fd       	sbrc	r24, 6
    127c:	0d c0       	rjmp	.+26     	; 0x1298 <HardwareSerial::flush()+0x3a>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	07 fc       	sbrc	r0, 7
    1282:	f7 cf       	rjmp	.-18     	; 0x1272 <HardwareSerial::flush()+0x14>
    1284:	8c 91       	ld	r24, X
    1286:	85 ff       	sbrs	r24, 5
    1288:	f2 cf       	rjmp	.-28     	; 0x126e <HardwareSerial::flush()+0x10>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    128a:	80 81       	ld	r24, Z
    128c:	85 ff       	sbrs	r24, 5
    128e:	ed cf       	rjmp	.-38     	; 0x126a <HardwareSerial::flush()+0xc>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    1290:	ce 01       	movw	r24, r28
    1292:	0e 94 0e 09 	call	0x121c	; 0x121c <HardwareSerial::_tx_udr_empty_irq()>
    1296:	e9 cf       	rjmp	.-46     	; 0x126a <HardwareSerial::flush()+0xc>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    129e:	ef 92       	push	r14
    12a0:	ff 92       	push	r15
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	ec 01       	movw	r28, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    12b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12b4:	98 13       	cpse	r25, r24
    12b6:	16 c0       	rjmp	.+44     	; 0x12e4 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    12b8:	e8 89       	ldd	r30, Y+16	; 0x10
    12ba:	f9 89       	ldd	r31, Y+17	; 0x11
    12bc:	80 81       	ld	r24, Z
    12be:	85 ff       	sbrs	r24, 5
    12c0:	11 c0       	rjmp	.+34     	; 0x12e4 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    12c2:	ee 89       	ldd	r30, Y+22	; 0x16
    12c4:	ff 89       	ldd	r31, Y+23	; 0x17
    12c6:	60 83       	st	Z, r22
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    12c8:	e8 89       	ldd	r30, Y+16	; 0x10
    12ca:	f9 89       	ldd	r31, Y+17	; 0x11
    12cc:	80 81       	ld	r24, Z
    12ce:	80 64       	ori	r24, 0x40	; 64
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    12d0:	80 83       	st	Z, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	ff 90       	pop	r15
    12e0:	ef 90       	pop	r14
    12e2:	08 95       	ret
    12e4:	f6 2e       	mov	r15, r22
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    12e6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    12e8:	10 e0       	ldi	r17, 0x00	; 0
    12ea:	0f 5f       	subi	r16, 0xFF	; 255
    12ec:	1f 4f       	sbci	r17, 0xFF	; 255
    12ee:	0f 73       	andi	r16, 0x3F	; 63
    12f0:	11 27       	eor	r17, r17
    12f2:	e0 2e       	mov	r14, r16
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    12f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12f6:	8e 11       	cpse	r24, r14
    12f8:	0c c0       	rjmp	.+24     	; 0x1312 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	07 fc       	sbrc	r0, 7
    12fe:	fa cf       	rjmp	.-12     	; 0x12f4 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1300:	e8 89       	ldd	r30, Y+16	; 0x10
    1302:	f9 89       	ldd	r31, Y+17	; 0x11
    1304:	80 81       	ld	r24, Z
    1306:	85 ff       	sbrs	r24, 5
    1308:	f5 cf       	rjmp	.-22     	; 0x12f4 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    130a:	ce 01       	movw	r24, r28
    130c:	0e 94 0e 09 	call	0x121c	; 0x121c <HardwareSerial::_tx_udr_empty_irq()>
    1310:	f1 cf       	rjmp	.-30     	; 0x12f4 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1312:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1314:	ec 0f       	add	r30, r28
    1316:	fd 2f       	mov	r31, r29
    1318:	f1 1d       	adc	r31, r1
    131a:	e3 5a       	subi	r30, 0xA3	; 163
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	f0 82       	st	Z, r15
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    1320:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    1322:	ea 89       	ldd	r30, Y+18	; 0x12
    1324:	fb 89       	ldd	r31, Y+19	; 0x13
    1326:	80 81       	ld	r24, Z
    1328:	80 62       	ori	r24, 0x20	; 32
    132a:	d2 cf       	rjmp	.-92     	; 0x12d0 <HardwareSerial::write(unsigned char)+0x32>

0000132c <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    132c:	cf 92       	push	r12
    132e:	df 92       	push	r13
    1330:	ef 92       	push	r14
    1332:	ff 92       	push	r15
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	ec 01       	movw	r28, r24
    133c:	6a 01       	movw	r12, r20
    133e:	7b 01       	movw	r14, r22
    1340:	12 2f       	mov	r17, r18
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1342:	e8 89       	ldd	r30, Y+16	; 0x10
    1344:	f9 89       	ldd	r31, Y+17	; 0x11
    1346:	82 e0       	ldi	r24, 0x02	; 2
    1348:	80 83       	st	Z, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    134a:	c1 14       	cp	r12, r1
    134c:	81 ee       	ldi	r24, 0xE1	; 225
    134e:	d8 06       	cpc	r13, r24
    1350:	e1 04       	cpc	r14, r1
    1352:	f1 04       	cpc	r15, r1
    1354:	a1 f0       	breq	.+40     	; 0x137e <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	79 e0       	ldi	r23, 0x09	; 9
    135a:	8d e3       	ldi	r24, 0x3D	; 61
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	a7 01       	movw	r20, r14
    1360:	96 01       	movw	r18, r12
    1362:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodsi4>
    1366:	21 50       	subi	r18, 0x01	; 1
    1368:	31 09       	sbc	r19, r1
    136a:	41 09       	sbc	r20, r1
    136c:	51 09       	sbc	r21, r1
    136e:	56 95       	lsr	r21
    1370:	47 95       	ror	r20
    1372:	37 95       	ror	r19
    1374:	27 95       	ror	r18
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1376:	21 15       	cp	r18, r1
    1378:	80 e1       	ldi	r24, 0x10	; 16
    137a:	38 07       	cpc	r19, r24
    137c:	98 f0       	brcs	.+38     	; 0x13a4 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    137e:	e8 89       	ldd	r30, Y+16	; 0x10
    1380:	f9 89       	ldd	r31, Y+17	; 0x11
    1382:	10 82       	st	Z, r1
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1384:	60 e8       	ldi	r22, 0x80	; 128
    1386:	74 e8       	ldi	r23, 0x84	; 132
    1388:	8e e1       	ldi	r24, 0x1E	; 30
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	a7 01       	movw	r20, r14
    138e:	96 01       	movw	r18, r12
    1390:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodsi4>
    1394:	21 50       	subi	r18, 0x01	; 1
    1396:	31 09       	sbc	r19, r1
    1398:	41 09       	sbc	r20, r1
    139a:	51 09       	sbc	r21, r1
    139c:	56 95       	lsr	r21
    139e:	47 95       	ror	r20
    13a0:	37 95       	ror	r19
    13a2:	27 95       	ror	r18
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    13a4:	ec 85       	ldd	r30, Y+12	; 0x0c
    13a6:	fd 85       	ldd	r31, Y+13	; 0x0d
    13a8:	30 83       	st	Z, r19
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    13aa:	ee 85       	ldd	r30, Y+14	; 0x0e
    13ac:	ff 85       	ldd	r31, Y+15	; 0x0f
    13ae:	20 83       	st	Z, r18
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    13b0:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    13b2:	ec 89       	ldd	r30, Y+20	; 0x14
    13b4:	fd 89       	ldd	r31, Y+21	; 0x15
    13b6:	10 83       	st	Z, r17
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    13b8:	ea 89       	ldd	r30, Y+18	; 0x12
    13ba:	fb 89       	ldd	r31, Y+19	; 0x13
    13bc:	80 81       	ld	r24, Z
    13be:	88 69       	ori	r24, 0x98	; 152
    13c0:	80 83       	st	Z, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    13c2:	ea 89       	ldd	r30, Y+18	; 0x12
    13c4:	fb 89       	ldd	r31, Y+19	; 0x13
    13c6:	80 81       	ld	r24, Z
    13c8:	8f 7d       	andi	r24, 0xDF	; 223
    13ca:	80 83       	st	Z, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	1f 91       	pop	r17
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	df 90       	pop	r13
    13d8:	cf 90       	pop	r12
    13da:	08 95       	ret

000013dc <__vector_18>:
__vector_18():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    13dc:	1f 92       	push	r1
    13de:	0f 92       	push	r0
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	0f 92       	push	r0
    13e4:	11 24       	eor	r1, r1
    13e6:	2f 93       	push	r18
    13e8:	8f 93       	push	r24
    13ea:	9f 93       	push	r25
    13ec:	ef 93       	push	r30
    13ee:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    13f0:	e0 91 01 03 	lds	r30, 0x0301	; 0x800301 <Serial+0x10>
    13f4:	f0 91 02 03 	lds	r31, 0x0302	; 0x800302 <Serial+0x11>
    13f8:	80 81       	ld	r24, Z
    13fa:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <Serial+0x16>
    13fe:	f0 91 08 03 	lds	r31, 0x0308	; 0x800308 <Serial+0x17>
    1402:	82 fd       	sbrc	r24, 2
    1404:	1b c0       	rjmp	.+54     	; 0x143c <__vector_18+0x60>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1406:	90 81       	ld	r25, Z
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1408:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <Serial+0x19>
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1410:	20 91 0b 03 	lds	r18, 0x030B	; 0x80030b <Serial+0x1a>
    1414:	82 17       	cp	r24, r18
    1416:	41 f0       	breq	.+16     	; 0x1428 <__vector_18+0x4c>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    1418:	e0 91 0a 03 	lds	r30, 0x030A	; 0x80030a <Serial+0x19>
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	ef 50       	subi	r30, 0x0F	; 15
    1420:	fd 4f       	sbci	r31, 0xFD	; 253
    1422:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1424:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <Serial+0x19>
__vector_18():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1428:	ff 91       	pop	r31
    142a:	ef 91       	pop	r30
    142c:	9f 91       	pop	r25
    142e:	8f 91       	pop	r24
    1430:	2f 91       	pop	r18
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	0f 90       	pop	r0
    1438:	1f 90       	pop	r1
    143a:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    143c:	80 81       	ld	r24, Z
__vector_18():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    143e:	f4 cf       	rjmp	.-24     	; 0x1428 <__vector_18+0x4c>

00001440 <__vector_19>:
__vector_19():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1440:	1f 92       	push	r1
    1442:	0f 92       	push	r0
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	0f 92       	push	r0
    1448:	11 24       	eor	r1, r1
    144a:	2f 93       	push	r18
    144c:	3f 93       	push	r19
    144e:	4f 93       	push	r20
    1450:	5f 93       	push	r21
    1452:	6f 93       	push	r22
    1454:	7f 93       	push	r23
    1456:	8f 93       	push	r24
    1458:	9f 93       	push	r25
    145a:	af 93       	push	r26
    145c:	bf 93       	push	r27
    145e:	ef 93       	push	r30
    1460:	ff 93       	push	r31
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1462:	81 ef       	ldi	r24, 0xF1	; 241
    1464:	92 e0       	ldi	r25, 0x02	; 2
    1466:	0e 94 0e 09 	call	0x121c	; 0x121c <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    146a:	ff 91       	pop	r31
    146c:	ef 91       	pop	r30
    146e:	bf 91       	pop	r27
    1470:	af 91       	pop	r26
    1472:	9f 91       	pop	r25
    1474:	8f 91       	pop	r24
    1476:	7f 91       	pop	r23
    1478:	6f 91       	pop	r22
    147a:	5f 91       	pop	r21
    147c:	4f 91       	pop	r20
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	0f 90       	pop	r0
    1488:	1f 90       	pop	r1
    148a:	18 95       	reti

0000148c <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    148c:	81 ef       	ldi	r24, 0xF1	; 241
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	0e 94 c3 08 	call	0x1186	; 0x1186 <HardwareSerial::available()>
    1494:	21 e0       	ldi	r18, 0x01	; 1
    1496:	89 2b       	or	r24, r25
    1498:	09 f4       	brne	.+2      	; 0x149c <Serial0_available()+0x10>
    149a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    149c:	82 2f       	mov	r24, r18
    149e:	08 95       	ret

000014a0 <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    14a0:	e1 ef       	ldi	r30, 0xF1	; 241
    14a2:	f2 e0       	ldi	r31, 0x02	; 2
    14a4:	13 82       	std	Z+3, r1	; 0x03
    14a6:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    14a8:	88 ee       	ldi	r24, 0xE8	; 232
    14aa:	93 e0       	ldi	r25, 0x03	; 3
    14ac:	a0 e0       	ldi	r26, 0x00	; 0
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	84 83       	std	Z+4, r24	; 0x04
    14b2:	95 83       	std	Z+5, r25	; 0x05
    14b4:	a6 83       	std	Z+6, r26	; 0x06
    14b6:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    14b8:	83 e3       	ldi	r24, 0x33	; 51
    14ba:	92 e0       	ldi	r25, 0x02	; 2
    14bc:	91 83       	std	Z+1, r25	; 0x01
    14be:	80 83       	st	Z, r24
    14c0:	85 ec       	ldi	r24, 0xC5	; 197
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	95 87       	std	Z+13, r25	; 0x0d
    14c6:	84 87       	std	Z+12, r24	; 0x0c
    14c8:	84 ec       	ldi	r24, 0xC4	; 196
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	97 87       	std	Z+15, r25	; 0x0f
    14ce:	86 87       	std	Z+14, r24	; 0x0e
    14d0:	80 ec       	ldi	r24, 0xC0	; 192
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	91 8b       	std	Z+17, r25	; 0x11
    14d6:	80 8b       	std	Z+16, r24	; 0x10
    14d8:	81 ec       	ldi	r24, 0xC1	; 193
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	93 8b       	std	Z+19, r25	; 0x13
    14de:	82 8b       	std	Z+18, r24	; 0x12
    14e0:	82 ec       	ldi	r24, 0xC2	; 194
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	95 8b       	std	Z+21, r25	; 0x15
    14e6:	84 8b       	std	Z+20, r24	; 0x14
    14e8:	86 ec       	ldi	r24, 0xC6	; 198
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	97 8b       	std	Z+23, r25	; 0x17
    14ee:	86 8b       	std	Z+22, r24	; 0x16
    14f0:	11 8e       	std	Z+25, r1	; 0x19
    14f2:	12 8e       	std	Z+26, r1	; 0x1a
    14f4:	13 8e       	std	Z+27, r1	; 0x1b
    14f6:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    14f8:	08 95       	ret

000014fa <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:199
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    14fa:	af 92       	push	r10
    14fc:	bf 92       	push	r11
    14fe:	cf 92       	push	r12
    1500:	df 92       	push	r13
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	6c 01       	movw	r12, r24
    1510:	7b 01       	movw	r14, r22
    1512:	8b 01       	movw	r16, r22
    1514:	04 0f       	add	r16, r20
    1516:	15 1f       	adc	r17, r21
    1518:	eb 01       	movw	r28, r22
    151a:	5e 01       	movw	r10, r28
    151c:	ae 18       	sub	r10, r14
    151e:	bf 08       	sbc	r11, r15
    1520:	c0 17       	cp	r28, r16
    1522:	d1 07       	cpc	r29, r17
    1524:	59 f0       	breq	.+22     	; 0x153c <Print::write(unsigned char const*, unsigned int)+0x42>
    1526:	69 91       	ld	r22, Y+
    1528:	d6 01       	movw	r26, r12
    152a:	ed 91       	ld	r30, X+
    152c:	fc 91       	ld	r31, X
    152e:	01 90       	ld	r0, Z+
    1530:	f0 81       	ld	r31, Z
    1532:	e0 2d       	mov	r30, r0
    1534:	c6 01       	movw	r24, r12
    1536:	09 95       	icall
    1538:	89 2b       	or	r24, r25
    153a:	79 f7       	brne	.-34     	; 0x151a <Print::write(unsigned char const*, unsigned int)+0x20>
    153c:	c5 01       	movw	r24, r10
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	df 90       	pop	r13
    154c:	cf 90       	pop	r12
    154e:	bf 90       	pop	r11
    1550:	af 90       	pop	r10
    1552:	08 95       	ret

00001554 <printf_putchar(char, __file*)>:
_ZL14printf_putcharcP6__file():
    1554:	fb 01       	movw	r30, r22
    1556:	a4 85       	ldd	r26, Z+12	; 0x0c
    1558:	b5 85       	ldd	r27, Z+13	; 0x0d
    155a:	ed 91       	ld	r30, X+
    155c:	fc 91       	ld	r31, X
    155e:	11 97       	sbiw	r26, 0x01	; 1
    1560:	01 90       	ld	r0, Z+
    1562:	f0 81       	ld	r31, Z
    1564:	e0 2d       	mov	r30, r0
    1566:	68 2f       	mov	r22, r24
    1568:	cd 01       	movw	r24, r26
    156a:	09 95       	icall
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	08 95       	ret

00001572 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    1572:	fb 01       	movw	r30, r22
    1574:	01 90       	ld	r0, Z+
    1576:	00 20       	and	r0, r0
    1578:	e9 f7       	brne	.-6      	; 0x1574 <Print::write(char const*) [clone .part.2]+0x2>
    157a:	31 97       	sbiw	r30, 0x01	; 1
    157c:	af 01       	movw	r20, r30
    157e:	46 1b       	sub	r20, r22
    1580:	57 0b       	sbc	r21, r23
    1582:	dc 01       	movw	r26, r24
    1584:	ed 91       	ld	r30, X+
    1586:	fc 91       	ld	r31, X
    1588:	02 80       	ldd	r0, Z+2	; 0x02
    158a:	f3 81       	ldd	r31, Z+3	; 0x03
    158c:	e0 2d       	mov	r30, r0
    158e:	09 94       	ijmp

00001590 <Print::print(String const&)>:
_ZN5Print5writeEPKcj():
    1590:	db 01       	movw	r26, r22
    1592:	14 96       	adiw	r26, 0x04	; 4
    1594:	4d 91       	ld	r20, X+
    1596:	5c 91       	ld	r21, X
    1598:	15 97       	sbiw	r26, 0x05	; 5
    159a:	6d 91       	ld	r22, X+
    159c:	7c 91       	ld	r23, X
    159e:	dc 01       	movw	r26, r24
    15a0:	ed 91       	ld	r30, X+
    15a2:	fc 91       	ld	r31, X
    15a4:	02 80       	ldd	r0, Z+2	; 0x02
    15a6:	f3 81       	ldd	r31, Z+3	; 0x03
    15a8:	e0 2d       	mov	r30, r0
    15aa:	09 94       	ijmp

000015ac <Print::println()>:
_ZN5Print5writeEPKc():
    15ac:	61 e4       	ldi	r22, 0x41	; 65
    15ae:	72 e0       	ldi	r23, 0x02	; 2
    15b0:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <Print::write(char const*) [clone .part.2]>

000015b4 <Print::println(String const&)>:
_ZN5Print7printlnERK6String():
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	ec 01       	movw	r28, r24
    15be:	0e 94 c8 0a 	call	0x1590	; 0x1590 <Print::print(String const&)>
    15c2:	8c 01       	movw	r16, r24
    15c4:	ce 01       	movw	r24, r28
    15c6:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Print::println()>
    15ca:	80 0f       	add	r24, r16
    15cc:	91 1f       	adc	r25, r17
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	08 95       	ret

000015d8 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    15e2:	d0 e0       	ldi	r29, 0x00	; 0
    15e4:	c0 e0       	ldi	r28, 0x00	; 0
    15e6:	61 15       	cp	r22, r1
    15e8:	71 05       	cpc	r23, r1
    15ea:	19 f0       	breq	.+6      	; 0x15f2 <Print::println(char const*)+0x1a>
    15ec:	0e 94 b9 0a 	call	0x1572	; 0x1572 <Print::write(char const*) [clone .part.2]>
    15f0:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    15f2:	c8 01       	movw	r24, r16
    15f4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Print::println()>
    15f8:	8c 0f       	add	r24, r28
    15fa:	9d 1f       	adc	r25, r29
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	1f 91       	pop	r17
    1602:	0f 91       	pop	r16
    1604:	08 95       	ret

00001606 <Print::printf(char const*, ...)>:
_ZN5Print6printfEPKcz():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:209
  ((class Print *)(fdev_get_udata(fp)))->write((uint8_t)c);
  return 0;
}

int16_t Print::printf(const char *format, ...)
{
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	2e 97       	sbiw	r28, 0x0e	; 14
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:213
  FILE f;
  va_list ap;

  fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
    161a:	8a ea       	ldi	r24, 0xAA	; 170
    161c:	9a e0       	ldi	r25, 0x0A	; 10
    161e:	9a 87       	std	Y+10, r25	; 0x0a
    1620:	89 87       	std	Y+9, r24	; 0x09
    1622:	1c 86       	std	Y+12, r1	; 0x0c
    1624:	1b 86       	std	Y+11, r1	; 0x0b
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:214
  fdev_set_udata(&f, this);
    162a:	8b 89       	ldd	r24, Y+19	; 0x13
    162c:	9c 89       	ldd	r25, Y+20	; 0x14
    162e:	9e 87       	std	Y+14, r25	; 0x0e
    1630:	8d 87       	std	Y+13, r24	; 0x0d
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:216
  va_start(ap, format);
  return vfprintf(&f, format, ap);
    1632:	ae 01       	movw	r20, r28
    1634:	49 5e       	subi	r20, 0xE9	; 233
    1636:	5f 4f       	sbci	r21, 0xFF	; 255
    1638:	6d 89       	ldd	r22, Y+21	; 0x15
    163a:	7e 89       	ldd	r23, Y+22	; 0x16
    163c:	ce 01       	movw	r24, r28
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	0e 94 f7 14 	call	0x29ee	; 0x29ee <vfprintf>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:217
}
    1644:	2e 96       	adiw	r28, 0x0e	; 14
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	df 91       	pop	r29
    1652:	cf 91       	pop	r28
    1654:	08 95       	ret

00001656 <nothing>:
nothing():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:392
        case 0:
          EIMSK &= ~(1 << INT0);
          break;
        case 1:
          EIMSK &= ~(1 << INT1);
          break;
    1656:	08 95       	ret

00001658 <__vector_1>:
__vector_1():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:488
#elif defined(__AVR_ATmega8__)  || defined(__AVR_ATmega48__)  || defined(__AVR_ATmega48P__)  \
|| defined(__AVR_ATmega48PB__)  || defined(__AVR_ATmega88__)  || defined(__AVR_ATmega88P__)  \
|| defined(__AVR_ATmega88PB__)  || defined(__AVR_ATmega168__) || defined(__AVR_ATmega168P__) \
|| defined(__AVR_ATmega168PB__) || defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) \
|| defined(__AVR_ATmega328PB__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1658:	1f 92       	push	r1
    165a:	0f 92       	push	r0
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	0f 92       	push	r0
    1660:	11 24       	eor	r1, r1
    1662:	2f 93       	push	r18
    1664:	3f 93       	push	r19
    1666:	4f 93       	push	r20
    1668:	5f 93       	push	r21
    166a:	6f 93       	push	r22
    166c:	7f 93       	push	r23
    166e:	8f 93       	push	r24
    1670:	9f 93       	push	r25
    1672:	af 93       	push	r26
    1674:	bf 93       	push	r27
    1676:	ef 93       	push	r30
    1678:	ff 93       	push	r31
    167a:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <intFunc>
    167e:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <intFunc+0x1>
    1682:	09 95       	icall
    1684:	ff 91       	pop	r31
    1686:	ef 91       	pop	r30
    1688:	bf 91       	pop	r27
    168a:	af 91       	pop	r26
    168c:	9f 91       	pop	r25
    168e:	8f 91       	pop	r24
    1690:	7f 91       	pop	r23
    1692:	6f 91       	pop	r22
    1694:	5f 91       	pop	r21
    1696:	4f 91       	pop	r20
    1698:	3f 91       	pop	r19
    169a:	2f 91       	pop	r18
    169c:	0f 90       	pop	r0
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	0f 90       	pop	r0
    16a2:	1f 90       	pop	r1
    16a4:	18 95       	reti

000016a6 <__vector_2>:
__vector_2():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:489
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    16a6:	1f 92       	push	r1
    16a8:	0f 92       	push	r0
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	0f 92       	push	r0
    16ae:	11 24       	eor	r1, r1
    16b0:	2f 93       	push	r18
    16b2:	3f 93       	push	r19
    16b4:	4f 93       	push	r20
    16b6:	5f 93       	push	r21
    16b8:	6f 93       	push	r22
    16ba:	7f 93       	push	r23
    16bc:	8f 93       	push	r24
    16be:	9f 93       	push	r25
    16c0:	af 93       	push	r26
    16c2:	bf 93       	push	r27
    16c4:	ef 93       	push	r30
    16c6:	ff 93       	push	r31
    16c8:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <intFunc+0x2>
    16cc:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <intFunc+0x3>
    16d0:	09 95       	icall
    16d2:	ff 91       	pop	r31
    16d4:	ef 91       	pop	r30
    16d6:	bf 91       	pop	r27
    16d8:	af 91       	pop	r26
    16da:	9f 91       	pop	r25
    16dc:	8f 91       	pop	r24
    16de:	7f 91       	pop	r23
    16e0:	6f 91       	pop	r22
    16e2:	5f 91       	pop	r21
    16e4:	4f 91       	pop	r20
    16e6:	3f 91       	pop	r19
    16e8:	2f 91       	pop	r18
    16ea:	0f 90       	pop	r0
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	0f 90       	pop	r0
    16f0:	1f 90       	pop	r1
    16f2:	18 95       	reti

000016f4 <map(long, long, long, long, long)>:
_Z3maplllll():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WMath.cpp:53
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    16f4:	4f 92       	push	r4
    16f6:	5f 92       	push	r5
    16f8:	6f 92       	push	r6
    16fa:	7f 92       	push	r7
    16fc:	af 92       	push	r10
    16fe:	bf 92       	push	r11
    1700:	cf 92       	push	r12
    1702:	df 92       	push	r13
    1704:	ef 92       	push	r14
    1706:	ff 92       	push	r15
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	29 01       	movw	r4, r18
    1716:	3a 01       	movw	r6, r20
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WMath.cpp:54
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1718:	9b 01       	movw	r18, r22
    171a:	ac 01       	movw	r20, r24
    171c:	24 19       	sub	r18, r4
    171e:	35 09       	sbc	r19, r5
    1720:	46 09       	sbc	r20, r6
    1722:	57 09       	sbc	r21, r7
    1724:	89 89       	ldd	r24, Y+17	; 0x11
    1726:	9a 89       	ldd	r25, Y+18	; 0x12
    1728:	ab 89       	ldd	r26, Y+19	; 0x13
    172a:	bc 89       	ldd	r27, Y+20	; 0x14
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	6a 19       	sub	r22, r10
    1732:	7b 09       	sbc	r23, r11
    1734:	8c 09       	sbc	r24, r12
    1736:	9d 09       	sbc	r25, r13
    1738:	0e 94 0e 12 	call	0x241c	; 0x241c <__mulsi3>
    173c:	a8 01       	movw	r20, r16
    173e:	97 01       	movw	r18, r14
    1740:	24 19       	sub	r18, r4
    1742:	35 09       	sbc	r19, r5
    1744:	46 09       	sbc	r20, r6
    1746:	57 09       	sbc	r21, r7
    1748:	0e 94 40 12 	call	0x2480	; 0x2480 <__divmodsi4>
    174c:	ca 01       	movw	r24, r20
    174e:	b9 01       	movw	r22, r18
    1750:	6a 0d       	add	r22, r10
    1752:	7b 1d       	adc	r23, r11
    1754:	8c 1d       	adc	r24, r12
    1756:	9d 1d       	adc	r25, r13
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WMath.cpp:55
}
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	ff 90       	pop	r15
    1762:	ef 90       	pop	r14
    1764:	df 90       	pop	r13
    1766:	cf 90       	pop	r12
    1768:	bf 90       	pop	r11
    176a:	af 90       	pop	r10
    176c:	7f 90       	pop	r7
    176e:	6f 90       	pop	r6
    1770:	5f 90       	pop	r5
    1772:	4f 90       	pop	r4
    1774:	08 95       	ret

00001776 <String::~String()>:
_ZN6StringD2Ev():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.cpp:341

unsigned char String::concat(const __FlashStringHelper * str)
{
  if (!str) return 0;
  int length = strlen_P((const char *) str);
  if (length == 0) return 1;
    1776:	fc 01       	movw	r30, r24
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	0c 94 39 13 	jmp	0x2672	; 0x2672 <free>

00001780 <String::invalidate()>:
_ZN6String10invalidateEv():
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	ec 01       	movw	r28, r24
    1786:	88 81       	ld	r24, Y
    1788:	99 81       	ldd	r25, Y+1	; 0x01
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	11 f0       	breq	.+4      	; 0x1792 <String::invalidate()+0x12>
    178e:	0e 94 39 13 	call	0x2672	; 0x2672 <free>
    1792:	19 82       	std	Y+1, r1	; 0x01
    1794:	18 82       	st	Y, r1
    1796:	1d 82       	std	Y+5, r1	; 0x05
    1798:	1c 82       	std	Y+4, r1	; 0x04
    179a:	1b 82       	std	Y+3, r1	; 0x03
    179c:	1a 82       	std	Y+2, r1	; 0x02
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	ec 01       	movw	r28, r24
    17ae:	8b 01       	movw	r16, r22
    17b0:	6f 5f       	subi	r22, 0xFF	; 255
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	88 81       	ld	r24, Y
    17b6:	99 81       	ldd	r25, Y+1	; 0x01
    17b8:	0e 94 c2 13 	call	0x2784	; 0x2784 <realloc>
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	51 f0       	breq	.+20     	; 0x17d4 <String::changeBuffer(unsigned int)+0x30>
    17c0:	99 83       	std	Y+1, r25	; 0x01
    17c2:	88 83       	st	Y, r24
    17c4:	1b 83       	std	Y+3, r17	; 0x03
    17c6:	0a 83       	std	Y+2, r16	; 0x02
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	08 95       	ret
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	f9 cf       	rjmp	.-14     	; 0x17ca <String::changeBuffer(unsigned int)+0x26>

000017d8 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	ec 01       	movw	r28, r24
    17de:	88 81       	ld	r24, Y
    17e0:	99 81       	ldd	r25, Y+1	; 0x01
    17e2:	89 2b       	or	r24, r25
    17e4:	49 f0       	breq	.+18     	; 0x17f8 <String::reserve(unsigned int)+0x20>
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	9b 81       	ldd	r25, Y+3	; 0x03
    17ea:	86 17       	cp	r24, r22
    17ec:	97 07       	cpc	r25, r23
    17ee:	20 f0       	brcs	.+8      	; 0x17f8 <String::reserve(unsigned int)+0x20>
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	08 95       	ret
    17f8:	ce 01       	movw	r24, r28
    17fa:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <String::changeBuffer(unsigned int)>
    17fe:	88 23       	and	r24, r24
    1800:	c1 f3       	breq	.-16     	; 0x17f2 <String::reserve(unsigned int)+0x1a>
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	9d 81       	ldd	r25, Y+5	; 0x05
    1806:	89 2b       	or	r24, r25
    1808:	99 f7       	brne	.-26     	; 0x17f0 <String::reserve(unsigned int)+0x18>
    180a:	e8 81       	ld	r30, Y
    180c:	f9 81       	ldd	r31, Y+1	; 0x01
    180e:	10 82       	st	Z, r1
    1810:	ef cf       	rjmp	.-34     	; 0x17f0 <String::reserve(unsigned int)+0x18>

00001812 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
    1812:	ef 92       	push	r14
    1814:	ff 92       	push	r15
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	ec 01       	movw	r28, r24
    1820:	7b 01       	movw	r14, r22
    1822:	8a 01       	movw	r16, r20
    1824:	ba 01       	movw	r22, r20
    1826:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <String::reserve(unsigned int)>
    182a:	81 11       	cpse	r24, r1
    182c:	0b c0       	rjmp	.+22     	; 0x1844 <String::copy(char const*, unsigned int)+0x32>
    182e:	ce 01       	movw	r24, r28
    1830:	0e 94 c0 0b 	call	0x1780	; 0x1780 <String::invalidate()>
    1834:	ce 01       	movw	r24, r28
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    1842:	08 95       	ret
    1844:	1d 83       	std	Y+5, r17	; 0x05
    1846:	0c 83       	std	Y+4, r16	; 0x04
    1848:	b7 01       	movw	r22, r14
    184a:	88 81       	ld	r24, Y
    184c:	99 81       	ldd	r25, Y+1	; 0x01
    184e:	0e 94 88 14 	call	0x2910	; 0x2910 <strcpy>
    1852:	f0 cf       	rjmp	.-32     	; 0x1834 <String::copy(char const*, unsigned int)+0x22>

00001854 <String::String(char const*)>:
_ZN6String4initEv():
    1854:	fc 01       	movw	r30, r24
    1856:	11 82       	std	Z+1, r1	; 0x01
    1858:	10 82       	st	Z, r1
    185a:	13 82       	std	Z+3, r1	; 0x03
    185c:	12 82       	std	Z+2, r1	; 0x02
    185e:	15 82       	std	Z+5, r1	; 0x05
    1860:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
    1862:	61 15       	cp	r22, r1
    1864:	71 05       	cpc	r23, r1
    1866:	51 f0       	breq	.+20     	; 0x187c <String::String(char const*)+0x28>
    1868:	fb 01       	movw	r30, r22
    186a:	01 90       	ld	r0, Z+
    186c:	00 20       	and	r0, r0
    186e:	e9 f7       	brne	.-6      	; 0x186a <String::String(char const*)+0x16>
    1870:	31 97       	sbiw	r30, 0x01	; 1
    1872:	af 01       	movw	r20, r30
    1874:	46 1b       	sub	r20, r22
    1876:	57 0b       	sbc	r21, r23
    1878:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <String::copy(char const*, unsigned int)>
    187c:	08 95       	ret

0000187e <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc():
    187e:	fb 01       	movw	r30, r22
    1880:	01 90       	ld	r0, Z+
    1882:	00 20       	and	r0, r0
    1884:	e9 f7       	brne	.-6      	; 0x1880 <String::operator=(char const*) [clone .part.3]+0x2>
    1886:	31 97       	sbiw	r30, 0x01	; 1
    1888:	af 01       	movw	r20, r30
    188a:	46 1b       	sub	r20, r22
    188c:	57 0b       	sbc	r21, r23
    188e:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <String::copy(char const*, unsigned int)>

00001892 <String::String(unsigned char, unsigned char)>:
_ZN6StringC2Ehh():
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	29 97       	sbiw	r28, 0x09	; 9
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	8c 01       	movw	r16, r24
    18ac:	86 2f       	mov	r24, r22
_ZN6String4initEv():
    18ae:	f8 01       	movw	r30, r16
    18b0:	11 82       	std	Z+1, r1	; 0x01
    18b2:	10 82       	st	Z, r1
    18b4:	13 82       	std	Z+3, r1	; 0x03
    18b6:	12 82       	std	Z+2, r1	; 0x02
    18b8:	15 82       	std	Z+5, r1	; 0x05
    18ba:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Ehh():
    18bc:	50 e0       	ldi	r21, 0x00	; 0
utoa():
    18be:	be 01       	movw	r22, r28
    18c0:	6f 5f       	subi	r22, 0xFF	; 255
    18c2:	7f 4f       	sbci	r23, 0xFF	; 255
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <utoa>
_ZN6StringaSEPKc():
    18ca:	be 01       	movw	r22, r28
    18cc:	6f 5f       	subi	r22, 0xFF	; 255
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	c8 01       	movw	r24, r16
    18d2:	0e 94 3f 0c 	call	0x187e	; 0x187e <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Ehh():
    18d6:	29 96       	adiw	r28, 0x09	; 9
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <String::String(int, unsigned char)>:
_ZN6StringC2Eih():
    18ec:	0f 93       	push	r16
    18ee:	1f 93       	push	r17
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	62 97       	sbiw	r28, 0x12	; 18
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	8c 01       	movw	r16, r24
    1906:	cb 01       	movw	r24, r22
_ZN6String4initEv():
    1908:	f8 01       	movw	r30, r16
    190a:	11 82       	std	Z+1, r1	; 0x01
    190c:	10 82       	st	Z, r1
    190e:	13 82       	std	Z+3, r1	; 0x03
    1910:	12 82       	std	Z+2, r1	; 0x02
    1912:	15 82       	std	Z+5, r1	; 0x05
    1914:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Eih():
    1916:	50 e0       	ldi	r21, 0x00	; 0
itoa():
    1918:	be 01       	movw	r22, r28
    191a:	6f 5f       	subi	r22, 0xFF	; 255
    191c:	7f 4f       	sbci	r23, 0xFF	; 255
    191e:	0e 94 8f 14 	call	0x291e	; 0x291e <itoa>
_ZN6StringaSEPKc():
    1922:	be 01       	movw	r22, r28
    1924:	6f 5f       	subi	r22, 0xFF	; 255
    1926:	7f 4f       	sbci	r23, 0xFF	; 255
    1928:	c8 01       	movw	r24, r16
    192a:	0e 94 3f 0c 	call	0x187e	; 0x187e <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Eih():
    192e:	62 96       	adiw	r28, 0x12	; 18
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	08 95       	ret

00001944 <String::String(unsigned int, unsigned char)>:
_ZN6StringC2Ejh():
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	61 97       	sbiw	r28, 0x11	; 17
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	8c 01       	movw	r16, r24
    195e:	cb 01       	movw	r24, r22
_ZN6String4initEv():
    1960:	f8 01       	movw	r30, r16
    1962:	11 82       	std	Z+1, r1	; 0x01
    1964:	10 82       	st	Z, r1
    1966:	13 82       	std	Z+3, r1	; 0x03
    1968:	12 82       	std	Z+2, r1	; 0x02
    196a:	15 82       	std	Z+5, r1	; 0x05
    196c:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Ejh():
    196e:	50 e0       	ldi	r21, 0x00	; 0
utoa():
    1970:	be 01       	movw	r22, r28
    1972:	6f 5f       	subi	r22, 0xFF	; 255
    1974:	7f 4f       	sbci	r23, 0xFF	; 255
    1976:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <utoa>
_ZN6StringaSEPKc():
    197a:	be 01       	movw	r22, r28
    197c:	6f 5f       	subi	r22, 0xFF	; 255
    197e:	7f 4f       	sbci	r23, 0xFF	; 255
    1980:	c8 01       	movw	r24, r16
    1982:	0e 94 3f 0c 	call	0x187e	; 0x187e <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Ejh():
    1986:	61 96       	adiw	r28, 0x11	; 17
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	08 95       	ret

0000199c <String::String(unsigned long, unsigned char)>:
_ZN6StringC2Emh():
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	a1 97       	sbiw	r28, 0x21	; 33
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	8c 01       	movw	r16, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	ba 01       	movw	r22, r20
_ZN6String4initEv():
    19ba:	f8 01       	movw	r30, r16
    19bc:	11 82       	std	Z+1, r1	; 0x01
    19be:	10 82       	st	Z, r1
    19c0:	13 82       	std	Z+3, r1	; 0x03
    19c2:	12 82       	std	Z+2, r1	; 0x02
    19c4:	15 82       	std	Z+5, r1	; 0x05
    19c6:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Emh():
    19c8:	30 e0       	ldi	r19, 0x00	; 0
ultoa():
    19ca:	ae 01       	movw	r20, r28
    19cc:	4f 5f       	subi	r20, 0xFF	; 255
    19ce:	5f 4f       	sbci	r21, 0xFF	; 255
    19d0:	0e 94 a5 14 	call	0x294a	; 0x294a <ultoa>
_ZN6StringaSEPKc():
    19d4:	be 01       	movw	r22, r28
    19d6:	6f 5f       	subi	r22, 0xFF	; 255
    19d8:	7f 4f       	sbci	r23, 0xFF	; 255
    19da:	c8 01       	movw	r24, r16
    19dc:	0e 94 3f 0c 	call	0x187e	; 0x187e <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Emh():
    19e0:	a1 96       	adiw	r28, 0x21	; 33
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	08 95       	ret

000019f6 <String::operator=(String const&)>:
_ZN6StringaSERKS_():
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	ec 01       	movw	r28, r24
    19fc:	fb 01       	movw	r30, r22
    19fe:	86 17       	cp	r24, r22
    1a00:	97 07       	cpc	r25, r23
    1a02:	49 f0       	breq	.+18     	; 0x1a16 <String::operator=(String const&)+0x20>
    1a04:	60 81       	ld	r22, Z
    1a06:	71 81       	ldd	r23, Z+1	; 0x01
    1a08:	61 15       	cp	r22, r1
    1a0a:	71 05       	cpc	r23, r1
    1a0c:	41 f0       	breq	.+16     	; 0x1a1e <String::operator=(String const&)+0x28>
    1a0e:	44 81       	ldd	r20, Z+4	; 0x04
    1a10:	55 81       	ldd	r21, Z+5	; 0x05
    1a12:	0e 94 09 0c 	call	0x1812	; 0x1812 <String::copy(char const*, unsigned int)>
    1a16:	ce 01       	movw	r24, r28
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	08 95       	ret
    1a1e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <String::invalidate()>
    1a22:	f9 cf       	rjmp	.-14     	; 0x1a16 <String::operator=(String const&)+0x20>

00001a24 <String::String(String const&)>:
_ZN6String4initEv():
    1a24:	fc 01       	movw	r30, r24
    1a26:	11 82       	std	Z+1, r1	; 0x01
    1a28:	10 82       	st	Z, r1
    1a2a:	13 82       	std	Z+3, r1	; 0x03
    1a2c:	12 82       	std	Z+2, r1	; 0x02
    1a2e:	15 82       	std	Z+5, r1	; 0x05
    1a30:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2ERKS_():
    1a32:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <String::operator=(String const&)>

00001a36 <String::operator=(char const*)>:
_ZN6StringaSEPKc():
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	ec 01       	movw	r28, r24
    1a3c:	61 15       	cp	r22, r1
    1a3e:	71 05       	cpc	r23, r1
    1a40:	31 f0       	breq	.+12     	; 0x1a4e <String::operator=(char const*)+0x18>
    1a42:	0e 94 3f 0c 	call	0x187e	; 0x187e <String::operator=(char const*) [clone .part.3]>
    1a46:	ce 01       	movw	r24, r28
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	08 95       	ret
    1a4e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <String::invalidate()>
    1a52:	f9 cf       	rjmp	.-14     	; 0x1a46 <String::operator=(char const*)+0x10>

00001a54 <String::String(float, unsigned char)>:
_ZN6StringC2Efh():
    1a54:	ef 92       	push	r14
    1a56:	ff 92       	push	r15
    1a58:	0f 93       	push	r16
    1a5a:	1f 93       	push	r17
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	a1 97       	sbiw	r28, 0x21	; 33
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	7c 01       	movw	r14, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	ba 01       	movw	r22, r20
_ZN6String4initEv():
    1a76:	f7 01       	movw	r30, r14
    1a78:	11 82       	std	Z+1, r1	; 0x01
    1a7a:	10 82       	st	Z, r1
    1a7c:	13 82       	std	Z+3, r1	; 0x03
    1a7e:	12 82       	std	Z+2, r1	; 0x02
    1a80:	15 82       	std	Z+5, r1	; 0x05
    1a82:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Efh():
    1a84:	42 e0       	ldi	r20, 0x02	; 2
    1a86:	42 0f       	add	r20, r18
    1a88:	8e 01       	movw	r16, r28
    1a8a:	0f 5f       	subi	r16, 0xFF	; 255
    1a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <dtostrf>
    1a92:	bc 01       	movw	r22, r24
    1a94:	c7 01       	movw	r24, r14
    1a96:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <String::operator=(char const*)>
    1a9a:	a1 96       	adiw	r28, 0x21	; 33
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	08 95       	ret

00001ab4 <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
    1ab4:	ef 92       	push	r14
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	61 15       	cp	r22, r1
    1ac2:	71 05       	cpc	r23, r1
    1ac4:	41 f4       	brne	.+16     	; 0x1ad6 <String::concat(char const*, unsigned int)+0x22>
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	08 95       	ret
    1ad6:	41 15       	cp	r20, r1
    1ad8:	51 05       	cpc	r21, r1
    1ada:	b1 f0       	breq	.+44     	; 0x1b08 <String::concat(char const*, unsigned int)+0x54>
    1adc:	7b 01       	movw	r14, r22
    1ade:	ec 01       	movw	r28, r24
    1ae0:	0c 81       	ldd	r16, Y+4	; 0x04
    1ae2:	1d 81       	ldd	r17, Y+5	; 0x05
    1ae4:	04 0f       	add	r16, r20
    1ae6:	15 1f       	adc	r17, r21
    1ae8:	b8 01       	movw	r22, r16
    1aea:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <String::reserve(unsigned int)>
    1aee:	88 23       	and	r24, r24
    1af0:	51 f3       	breq	.-44     	; 0x1ac6 <String::concat(char const*, unsigned int)+0x12>
    1af2:	28 81       	ld	r18, Y
    1af4:	39 81       	ldd	r19, Y+1	; 0x01
    1af6:	8c 81       	ldd	r24, Y+4	; 0x04
    1af8:	9d 81       	ldd	r25, Y+5	; 0x05
    1afa:	b7 01       	movw	r22, r14
    1afc:	82 0f       	add	r24, r18
    1afe:	93 1f       	adc	r25, r19
    1b00:	0e 94 88 14 	call	0x2910	; 0x2910 <strcpy>
    1b04:	1d 83       	std	Y+5, r17	; 0x05
    1b06:	0c 83       	std	Y+4, r16	; 0x04
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	de cf       	rjmp	.-68     	; 0x1ac8 <String::concat(char const*, unsigned int)+0x14>

00001b0c <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.cpp:354
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	ec 01       	movw	r28, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.cpp:356
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1b12:	fb 01       	movw	r30, r22
    1b14:	44 81       	ldd	r20, Z+4	; 0x04
    1b16:	55 81       	ldd	r21, Z+5	; 0x05
    1b18:	60 81       	ld	r22, Z
    1b1a:	71 81       	ldd	r23, Z+1	; 0x01
    1b1c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <String::concat(char const*, unsigned int)>
    1b20:	81 11       	cpse	r24, r1
    1b22:	03 c0       	rjmp	.+6      	; 0x1b2a <operator+(StringSumHelper const&, String const&)+0x1e>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.cpp:356 (discriminator 1)
    1b24:	ce 01       	movw	r24, r28
    1b26:	0e 94 c0 0b 	call	0x1780	; 0x1780 <String::invalidate()>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.cpp:358
  return a;
}
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	08 95       	ret

00001b32 <operator+(StringSumHelper const&, char const*)>:
_ZplRK15StringSumHelperPKc():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.cpp:361

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	ec 01       	movw	r28, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.cpp:363
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    1b38:	61 15       	cp	r22, r1
    1b3a:	71 05       	cpc	r23, r1
    1b3c:	39 f4       	brne	.+14     	; 0x1b4c <operator+(StringSumHelper const&, char const*)+0x1a>
    1b3e:	ce 01       	movw	r24, r28
    1b40:	0e 94 c0 0b 	call	0x1780	; 0x1780 <String::invalidate()>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.cpp:365
  return a;
}
    1b44:	ce 01       	movw	r24, r28
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	08 95       	ret
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WString.cpp:363 (discriminator 2)
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    1b4c:	fb 01       	movw	r30, r22
    1b4e:	01 90       	ld	r0, Z+
    1b50:	00 20       	and	r0, r0
    1b52:	e9 f7       	brne	.-6      	; 0x1b4e <operator+(StringSumHelper const&, char const*)+0x1c>
    1b54:	31 97       	sbiw	r30, 0x01	; 1
    1b56:	af 01       	movw	r20, r30
    1b58:	46 1b       	sub	r20, r22
    1b5a:	57 0b       	sbc	r21, r23
    1b5c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <String::concat(char const*, unsigned int)>
    1b60:	88 23       	and	r24, r24
    1b62:	69 f3       	breq	.-38     	; 0x1b3e <operator+(StringSumHelper const&, char const*)+0xc>
    1b64:	ef cf       	rjmp	.-34     	; 0x1b44 <operator+(StringSumHelper const&, char const*)+0x12>

00001b66 <initVariant>:
initVariant():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1b66:	08 95       	ret

00001b68 <main>:
main():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1b68:	0e 94 77 0e 	call	0x1cee	; 0x1cee <init>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    1b6c:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <initVariant>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1b70:	0e 94 0f 01 	call	0x21e	; 0x21e <setup>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1b74:	c0 e0       	ldi	r28, 0x00	; 0
    1b76:	d9 e0       	ldi	r29, 0x09	; 9
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1b78:	0e 94 24 01 	call	0x248	; 0x248 <loop>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1b7c:	20 97       	sbiw	r28, 0x00	; 0
    1b7e:	e1 f3       	breq	.-8      	; 0x1b78 <main+0x10>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1b80:	0e 94 00 09 	call	0x1200	; 0x1200 <serialEventRun()>
    1b84:	f9 cf       	rjmp	.-14     	; 0x1b78 <main+0x10>

00001b86 <__vector_16>:
__vector_16():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    1b86:	1f 92       	push	r1
    1b88:	0f 92       	push	r0
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	0f 92       	push	r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	2f 93       	push	r18
    1b92:	3f 93       	push	r19
    1b94:	8f 93       	push	r24
    1b96:	9f 93       	push	r25
    1b98:	af 93       	push	r26
    1b9a:	bf 93       	push	r27
    1b9c:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <timer0_millis>
    1ba0:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <timer0_millis+0x1>
    1ba4:	a0 91 95 03 	lds	r26, 0x0395	; 0x800395 <timer0_millis+0x2>
    1ba8:	b0 91 96 03 	lds	r27, 0x0396	; 0x800396 <timer0_millis+0x3>
    1bac:	30 91 92 03 	lds	r19, 0x0392	; 0x800392 <timer0_fract>
    1bb0:	23 e0       	ldi	r18, 0x03	; 3
    1bb2:	23 0f       	add	r18, r19
    1bb4:	2d 37       	cpi	r18, 0x7D	; 125
    1bb6:	68 f1       	brcs	.+90     	; 0x1c12 <__vector_16+0x8c>
    1bb8:	26 e8       	ldi	r18, 0x86	; 134
    1bba:	23 0f       	add	r18, r19
    1bbc:	02 96       	adiw	r24, 0x02	; 2
    1bbe:	a1 1d       	adc	r26, r1
    1bc0:	b1 1d       	adc	r27, r1
    1bc2:	20 93 92 03 	sts	0x0392, r18	; 0x800392 <timer0_fract>
    1bc6:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <timer0_millis>
    1bca:	90 93 94 03 	sts	0x0394, r25	; 0x800394 <timer0_millis+0x1>
    1bce:	a0 93 95 03 	sts	0x0395, r26	; 0x800395 <timer0_millis+0x2>
    1bd2:	b0 93 96 03 	sts	0x0396, r27	; 0x800396 <timer0_millis+0x3>
    1bd6:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <timer0_overflow_count>
    1bda:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <timer0_overflow_count+0x1>
    1bde:	a0 91 90 03 	lds	r26, 0x0390	; 0x800390 <timer0_overflow_count+0x2>
    1be2:	b0 91 91 03 	lds	r27, 0x0391	; 0x800391 <timer0_overflow_count+0x3>
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	a1 1d       	adc	r26, r1
    1bea:	b1 1d       	adc	r27, r1
    1bec:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <timer0_overflow_count>
    1bf0:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <timer0_overflow_count+0x1>
    1bf4:	a0 93 90 03 	sts	0x0390, r26	; 0x800390 <timer0_overflow_count+0x2>
    1bf8:	b0 93 91 03 	sts	0x0391, r27	; 0x800391 <timer0_overflow_count+0x3>
    1bfc:	bf 91       	pop	r27
    1bfe:	af 91       	pop	r26
    1c00:	9f 91       	pop	r25
    1c02:	8f 91       	pop	r24
    1c04:	3f 91       	pop	r19
    1c06:	2f 91       	pop	r18
    1c08:	0f 90       	pop	r0
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	0f 90       	pop	r0
    1c0e:	1f 90       	pop	r1
    1c10:	18 95       	reti
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	a1 1d       	adc	r26, r1
    1c16:	b1 1d       	adc	r27, r1
    1c18:	d4 cf       	rjmp	.-88     	; 0x1bc2 <__vector_16+0x3c>

00001c1a <millis>:
millis():
    1c1a:	2f b7       	in	r18, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	60 91 93 03 	lds	r22, 0x0393	; 0x800393 <timer0_millis>
    1c22:	70 91 94 03 	lds	r23, 0x0394	; 0x800394 <timer0_millis+0x1>
    1c26:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <timer0_millis+0x2>
    1c2a:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <timer0_millis+0x3>
    1c2e:	2f bf       	out	0x3f, r18	; 63
    1c30:	08 95       	ret

00001c32 <micros>:
micros():
    1c32:	3f b7       	in	r19, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <timer0_overflow_count>
    1c3a:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <timer0_overflow_count+0x1>
    1c3e:	a0 91 90 03 	lds	r26, 0x0390	; 0x800390 <timer0_overflow_count+0x2>
    1c42:	b0 91 91 03 	lds	r27, 0x0391	; 0x800391 <timer0_overflow_count+0x3>
    1c46:	26 b5       	in	r18, 0x26	; 38
    1c48:	a8 9b       	sbis	0x15, 0	; 21
    1c4a:	05 c0       	rjmp	.+10     	; 0x1c56 <micros+0x24>
    1c4c:	2f 3f       	cpi	r18, 0xFF	; 255
    1c4e:	19 f0       	breq	.+6      	; 0x1c56 <micros+0x24>
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	a1 1d       	adc	r26, r1
    1c54:	b1 1d       	adc	r27, r1
    1c56:	3f bf       	out	0x3f, r19	; 63
    1c58:	ba 2f       	mov	r27, r26
    1c5a:	a9 2f       	mov	r26, r25
    1c5c:	98 2f       	mov	r25, r24
    1c5e:	88 27       	eor	r24, r24
    1c60:	bc 01       	movw	r22, r24
    1c62:	cd 01       	movw	r24, r26
    1c64:	62 0f       	add	r22, r18
    1c66:	71 1d       	adc	r23, r1
    1c68:	81 1d       	adc	r24, r1
    1c6a:	91 1d       	adc	r25, r1
    1c6c:	42 e0       	ldi	r20, 0x02	; 2
    1c6e:	66 0f       	add	r22, r22
    1c70:	77 1f       	adc	r23, r23
    1c72:	88 1f       	adc	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	4a 95       	dec	r20
    1c78:	d1 f7       	brne	.-12     	; 0x1c6e <micros+0x3c>
    1c7a:	08 95       	ret

00001c7c <delay>:
delay():
    1c7c:	8f 92       	push	r8
    1c7e:	9f 92       	push	r9
    1c80:	af 92       	push	r10
    1c82:	bf 92       	push	r11
    1c84:	cf 92       	push	r12
    1c86:	df 92       	push	r13
    1c88:	ef 92       	push	r14
    1c8a:	ff 92       	push	r15
    1c8c:	6b 01       	movw	r12, r22
    1c8e:	7c 01       	movw	r14, r24
    1c90:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <micros>
    1c94:	4b 01       	movw	r8, r22
    1c96:	5c 01       	movw	r10, r24
    1c98:	c1 14       	cp	r12, r1
    1c9a:	d1 04       	cpc	r13, r1
    1c9c:	e1 04       	cpc	r14, r1
    1c9e:	f1 04       	cpc	r15, r1
    1ca0:	e9 f0       	breq	.+58     	; 0x1cdc <delay+0x60>
    1ca2:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <yield>
    1ca6:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <micros>
    1caa:	68 19       	sub	r22, r8
    1cac:	79 09       	sbc	r23, r9
    1cae:	8a 09       	sbc	r24, r10
    1cb0:	9b 09       	sbc	r25, r11
    1cb2:	68 3e       	cpi	r22, 0xE8	; 232
    1cb4:	73 40       	sbci	r23, 0x03	; 3
    1cb6:	81 05       	cpc	r24, r1
    1cb8:	91 05       	cpc	r25, r1
    1cba:	70 f3       	brcs	.-36     	; 0x1c98 <delay+0x1c>
    1cbc:	21 e0       	ldi	r18, 0x01	; 1
    1cbe:	c2 1a       	sub	r12, r18
    1cc0:	d1 08       	sbc	r13, r1
    1cc2:	e1 08       	sbc	r14, r1
    1cc4:	f1 08       	sbc	r15, r1
    1cc6:	88 ee       	ldi	r24, 0xE8	; 232
    1cc8:	88 0e       	add	r8, r24
    1cca:	83 e0       	ldi	r24, 0x03	; 3
    1ccc:	98 1e       	adc	r9, r24
    1cce:	a1 1c       	adc	r10, r1
    1cd0:	b1 1c       	adc	r11, r1
    1cd2:	c1 14       	cp	r12, r1
    1cd4:	d1 04       	cpc	r13, r1
    1cd6:	e1 04       	cpc	r14, r1
    1cd8:	f1 04       	cpc	r15, r1
    1cda:	29 f7       	brne	.-54     	; 0x1ca6 <delay+0x2a>
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	df 90       	pop	r13
    1ce2:	cf 90       	pop	r12
    1ce4:	bf 90       	pop	r11
    1ce6:	af 90       	pop	r10
    1ce8:	9f 90       	pop	r9
    1cea:	8f 90       	pop	r8
    1cec:	08 95       	ret

00001cee <init>:
init():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1cee:	78 94       	sei
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1cf0:	84 b5       	in	r24, 0x24	; 36
    1cf2:	83 60       	ori	r24, 0x03	; 3
    1cf4:	84 bd       	out	0x24, r24	; 36
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    1cf6:	85 b5       	in	r24, 0x25	; 37
    1cf8:	83 60       	ori	r24, 0x03	; 3
    1cfa:	85 bd       	out	0x25, r24	; 37
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1cfc:	ee e6       	ldi	r30, 0x6E	; 110
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	81 60       	ori	r24, 0x01	; 1
    1d04:	80 83       	st	Z, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    1d06:	e1 e8       	ldi	r30, 0x81	; 129
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	82 e0       	ldi	r24, 0x02	; 2
    1d0c:	80 83       	st	Z, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1d0e:	80 81       	ld	r24, Z
    1d10:	81 60       	ori	r24, 0x01	; 1
    1d12:	80 83       	st	Z, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    1d14:	e0 e8       	ldi	r30, 0x80	; 128
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	81 60       	ori	r24, 0x01	; 1
    1d1c:	80 83       	st	Z, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    1d1e:	e1 eb       	ldi	r30, 0xB1	; 177
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	84 60       	ori	r24, 0x04	; 4
    1d26:	80 83       	st	Z, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    1d28:	e0 eb       	ldi	r30, 0xB0	; 176
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	81 60       	ori	r24, 0x01	; 1
    1d30:	80 83       	st	Z, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    1d32:	87 e8       	ldi	r24, 0x87	; 135
    1d34:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    1d38:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    1d3c:	08 95       	ret

00001d3e <analogRead>:
analogRead():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    1d3e:	88 30       	cpi	r24, 0x08	; 8
    1d40:	20 f0       	brcs	.+8      	; 0x1d4a <analogRead+0xc>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    1d42:	8d 30       	cpi	r24, 0x0D	; 13
    1d44:	08 f4       	brcc	.+2      	; 0x1d48 <analogRead+0xa>
    1d46:	8d e0       	ldi	r24, 0x0D	; 13
    1d48:	8e 50       	subi	r24, 0x0E	; 14
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 4)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    1d4a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <analog_reference>
    1d4e:	90 e4       	ldi	r25, 0x40	; 64
    1d50:	29 9f       	mul	r18, r25
    1d52:	90 01       	movw	r18, r0
    1d54:	11 24       	eor	r1, r1
    1d56:	87 70       	andi	r24, 0x07	; 7
    1d58:	82 2b       	or	r24, r18
    1d5a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 4)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    1d5e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1d62:	80 64       	ori	r24, 0x40	; 64
    1d64:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    1d68:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1d6c:	86 fd       	sbrc	r24, 6
    1d6e:	fc cf       	rjmp	.-8      	; 0x1d68 <analogRead+0x2a>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    1d70:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    1d74:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    1d78:	08 95       	ret

00001d7a <analogWrite>:
analogWrite():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:104
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    1d7a:	1f 93       	push	r17
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	18 2f       	mov	r17, r24
    1d82:	eb 01       	movw	r28, r22
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:110
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    1d84:	61 e0       	ldi	r22, 0x01	; 1
    1d86:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <pinMode>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:111
  if (val == 0)
    1d8a:	20 97       	sbiw	r28, 0x00	; 0
    1d8c:	39 f4       	brne	.+14     	; 0x1d9c <analogWrite+0x22>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:113
  {
    digitalWrite(pin, LOW);
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:117
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    1d90:	81 2f       	mov	r24, r17
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:308
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:117
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    1d98:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <digitalWrite>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:115
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
    1d9c:	cf 3f       	cpi	r28, 0xFF	; 255
    1d9e:	d1 05       	cpc	r29, r1
    1da0:	11 f4       	brne	.+4      	; 0x1da6 <analogWrite+0x2c>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:117
  {
    digitalWrite(pin, HIGH);
    1da2:	61 e0       	ldi	r22, 0x01	; 1
    1da4:	f5 cf       	rjmp	.-22     	; 0x1d90 <analogWrite+0x16>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:121
  }
  else
  {
    switch(digitalPinToTimer(pin))
    1da6:	e1 2f       	mov	r30, r17
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	ee 59       	subi	r30, 0x9E	; 158
    1dac:	fe 4f       	sbci	r31, 0xFE	; 254
    1dae:	e4 91       	lpm	r30, Z
    1db0:	e4 30       	cpi	r30, 0x04	; 4
    1db2:	31 f1       	breq	.+76     	; 0x1e00 <analogWrite+0x86>
    1db4:	40 f4       	brcc	.+16     	; 0x1dc6 <analogWrite+0x4c>
    1db6:	e2 30       	cpi	r30, 0x02	; 2
    1db8:	b1 f0       	breq	.+44     	; 0x1de6 <analogWrite+0x6c>
    1dba:	e3 30       	cpi	r30, 0x03	; 3
    1dbc:	e1 f0       	breq	.+56     	; 0x1df6 <analogWrite+0x7c>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:301
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
    1dbe:	c0 38       	cpi	r28, 0x80	; 128
    1dc0:	d1 05       	cpc	r29, r1
    1dc2:	7c f7       	brge	.-34     	; 0x1da2 <analogWrite+0x28>
    1dc4:	e4 cf       	rjmp	.-56     	; 0x1d8e <analogWrite+0x14>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:121
  {
    digitalWrite(pin, HIGH);
  }
  else
  {
    switch(digitalPinToTimer(pin))
    1dc6:	e8 30       	cpi	r30, 0x08	; 8
    1dc8:	29 f1       	breq	.+74     	; 0x1e14 <analogWrite+0x9a>
    1dca:	e9 30       	cpi	r30, 0x09	; 9
    1dcc:	59 f1       	breq	.+86     	; 0x1e24 <analogWrite+0xaa>
    1dce:	e5 30       	cpi	r30, 0x05	; 5
    1dd0:	b1 f7       	brne	.-20     	; 0x1dbe <analogWrite+0x44>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:165
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
    1dd2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1dd6:	80 62       	ori	r24, 0x20	; 32
    1dd8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:166
        OCR1B = val; // set pwm duty
    1ddc:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    1de0:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:167
        break;
    1de4:	04 c0       	rjmp	.+8      	; 0x1dee <analogWrite+0x74>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:141
      #endif

      #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        // connect pwm to pin on timer 0, channel A
        TCCR0A |= _BV(COM0A1);
    1de6:	84 b5       	in	r24, 0x24	; 36
    1de8:	80 68       	ori	r24, 0x80	; 128
    1dea:	84 bd       	out	0x24, r24	; 36
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:142
        OCR0A = val; // set pwm duty
    1dec:	c7 bd       	out	0x27, r28	; 39
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:308
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	1f 91       	pop	r17
    1df4:	08 95       	ret
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:149
      #endif

      #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        // connect pwm to pin on timer 0, channel B
        TCCR0A |= _BV(COM0B1);
    1df6:	84 b5       	in	r24, 0x24	; 36
    1df8:	80 62       	ori	r24, 0x20	; 32
    1dfa:	84 bd       	out	0x24, r24	; 36
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:150
        OCR0B = val; // set pwm duty
    1dfc:	c8 bd       	out	0x28, r28	; 40
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:151
        break;
    1dfe:	f7 cf       	rjmp	.-18     	; 0x1dee <analogWrite+0x74>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:157
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
    1e00:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1e04:	80 68       	ori	r24, 0x80	; 128
    1e06:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:158
        OCR1A = val; // set pwm duty
    1e0a:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1e0e:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:159
        break;
    1e12:	ed cf       	rjmp	.-38     	; 0x1dee <analogWrite+0x74>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:189
      #endif

      #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        // connect pwm to pin on timer 2, channel A
        TCCR2A |= _BV(COM2A1);
    1e14:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1e18:	80 68       	ori	r24, 0x80	; 128
    1e1a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:190
        OCR2A = val; // set pwm duty
    1e1e:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:191
        break;
    1e22:	e5 cf       	rjmp	.-54     	; 0x1dee <analogWrite+0x74>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:197
      #endif

      #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        // connect pwm to pin on timer 2, channel B
        TCCR2A |= _BV(COM2B1);
    1e24:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1e28:	80 62       	ori	r24, 0x20	; 32
    1e2a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:198
        OCR2B = val; // set pwm duty
    1e2e:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:199
        break;
    1e32:	dd cf       	rjmp	.-70     	; 0x1dee <analogWrite+0x74>

00001e34 <turnOffPWM>:
turnOffPWM():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    1e34:	84 30       	cpi	r24, 0x04	; 4
    1e36:	81 f0       	breq	.+32     	; 0x1e58 <turnOffPWM+0x24>
    1e38:	28 f4       	brcc	.+10     	; 0x1e44 <turnOffPWM+0x10>
    1e3a:	82 30       	cpi	r24, 0x02	; 2
    1e3c:	e9 f0       	breq	.+58     	; 0x1e78 <turnOffPWM+0x44>
    1e3e:	83 30       	cpi	r24, 0x03	; 3
    1e40:	f9 f0       	breq	.+62     	; 0x1e80 <turnOffPWM+0x4c>
    1e42:	08 95       	ret
    1e44:	88 30       	cpi	r24, 0x08	; 8
    1e46:	71 f0       	breq	.+28     	; 0x1e64 <turnOffPWM+0x30>
    1e48:	89 30       	cpi	r24, 0x09	; 9
    1e4a:	91 f0       	breq	.+36     	; 0x1e70 <turnOffPWM+0x3c>
    1e4c:	85 30       	cpi	r24, 0x05	; 5
    1e4e:	b9 f4       	brne	.+46     	; 0x1e7e <turnOffPWM+0x4a>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1e50:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1e54:	8f 7d       	andi	r24, 0xDF	; 223
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <turnOffPWM+0x2a>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    1e58:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1e5c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    1e5e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    1e62:	08 95       	ret
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    1e64:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1e68:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1e6a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    1e6e:	08 95       	ret
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1e70:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1e74:	8f 7d       	andi	r24, 0xDF	; 223
    1e76:	f9 cf       	rjmp	.-14     	; 0x1e6a <turnOffPWM+0x36>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    1e78:	84 b5       	in	r24, 0x24	; 36
    1e7a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1e7c:	84 bd       	out	0x24, r24	; 36
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    1e7e:	08 95       	ret
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1e80:	84 b5       	in	r24, 0x24	; 36
    1e82:	8f 7d       	andi	r24, 0xDF	; 223
    1e84:	fb cf       	rjmp	.-10     	; 0x1e7c <turnOffPWM+0x48>

00001e86 <pinMode>:
pinMode():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1e86:	cf 93       	push	r28
    1e88:	df 93       	push	r29
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	e7 58       	subi	r30, 0x87	; 135
    1e90:	fe 4f       	sbci	r31, 0xFE	; 254
    1e92:	24 91       	lpm	r18, Z
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    1e94:	80 57       	subi	r24, 0x70	; 112
    1e96:	9e 4f       	sbci	r25, 0xFE	; 254
    1e98:	fc 01       	movw	r30, r24
    1e9a:	84 91       	lpm	r24, Z
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    1e9c:	88 23       	and	r24, r24
    1e9e:	c9 f0       	breq	.+50     	; 0x1ed2 <pinMode+0x4c>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	e5 54       	subi	r30, 0x45	; 69
    1eaa:	fe 4f       	sbci	r31, 0xFE	; 254
    1eac:	a5 91       	lpm	r26, Z+
    1eae:	b4 91       	lpm	r27, Z
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	ef 54       	subi	r30, 0x4F	; 79
    1eb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb6:	c5 91       	lpm	r28, Z+
    1eb8:	d4 91       	lpm	r29, Z
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    1eba:	61 11       	cpse	r22, r1
    1ebc:	0d c0       	rjmp	.+26     	; 0x1ed8 <pinMode+0x52>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    1ebe:	9f b7       	in	r25, 0x3f	; 63
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    1ec0:	f8 94       	cli
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    1ec2:	8c 91       	ld	r24, X
    1ec4:	20 95       	com	r18
    1ec6:	82 23       	and	r24, r18
    1ec8:	8c 93       	st	X, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    1eca:	88 81       	ld	r24, Y
    1ecc:	28 23       	and	r18, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1ece:	28 83       	st	Y, r18
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1ed0:	9f bf       	out	0x3f, r25	; 63
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	08 95       	ret
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    1ed8:	62 30       	cpi	r22, 0x02	; 2
    1eda:	51 f4       	brne	.+20     	; 0x1ef0 <pinMode+0x6a>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1edc:	9f b7       	in	r25, 0x3f	; 63
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    1ede:	f8 94       	cli
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1ee0:	3c 91       	ld	r19, X
    1ee2:	82 2f       	mov	r24, r18
    1ee4:	80 95       	com	r24
    1ee6:	83 23       	and	r24, r19
    1ee8:	8c 93       	st	X, r24
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    1eea:	e8 81       	ld	r30, Y
    1eec:	2e 2b       	or	r18, r30
    1eee:	ef cf       	rjmp	.-34     	; 0x1ece <pinMode+0x48>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1ef0:	8f b7       	in	r24, 0x3f	; 63
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    1ef2:	f8 94       	cli
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    1ef4:	ec 91       	ld	r30, X
    1ef6:	2e 2b       	or	r18, r30
    1ef8:	2c 93       	st	X, r18
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    1efa:	8f bf       	out	0x3f, r24	; 63
    1efc:	ea cf       	rjmp	.-44     	; 0x1ed2 <pinMode+0x4c>

00001efe <digitalWrite>:
digitalWrite():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1efe:	1f 93       	push	r17
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	f9 01       	movw	r30, r18
    1f0a:	ee 59       	subi	r30, 0x9E	; 158
    1f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f0e:	84 91       	lpm	r24, Z
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    1f10:	f9 01       	movw	r30, r18
    1f12:	e7 58       	subi	r30, 0x87	; 135
    1f14:	fe 4f       	sbci	r31, 0xFE	; 254
    1f16:	d4 91       	lpm	r29, Z
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    1f18:	f9 01       	movw	r30, r18
    1f1a:	e0 57       	subi	r30, 0x70	; 112
    1f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1e:	c4 91       	lpm	r28, Z
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    1f20:	cc 23       	and	r28, r28
    1f22:	a9 f0       	breq	.+42     	; 0x1f4e <digitalWrite+0x50>
    1f24:	16 2f       	mov	r17, r22
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1f26:	81 11       	cpse	r24, r1
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    1f28:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <turnOffPWM>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    1f2c:	ec 2f       	mov	r30, r28
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	ee 0f       	add	r30, r30
    1f32:	ff 1f       	adc	r31, r31
    1f34:	ef 54       	subi	r30, 0x4F	; 79
    1f36:	fe 4f       	sbci	r31, 0xFE	; 254
    1f38:	a5 91       	lpm	r26, Z+
    1f3a:	b4 91       	lpm	r27, Z
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    1f3c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    1f3e:	f8 94       	cli
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    1f40:	ec 91       	ld	r30, X
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    1f42:	11 11       	cpse	r17, r1
    1f44:	08 c0       	rjmp	.+16     	; 0x1f56 <digitalWrite+0x58>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    1f46:	d0 95       	com	r29
    1f48:	de 23       	and	r29, r30
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    1f4a:	dc 93       	st	X, r29
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    1f4c:	8f bf       	out	0x3f, r24	; 63
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:212
}
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	1f 91       	pop	r17
    1f54:	08 95       	ret
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    1f56:	de 2b       	or	r29, r30
    1f58:	f8 cf       	rjmp	.-16     	; 0x1f4a <digitalWrite+0x4c>

00001f5a <digitalRead>:
digitalRead():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	f9 01       	movw	r30, r18
    1f64:	ee 59       	subi	r30, 0x9E	; 158
    1f66:	fe 4f       	sbci	r31, 0xFE	; 254
    1f68:	84 91       	lpm	r24, Z
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    1f6a:	f9 01       	movw	r30, r18
    1f6c:	e7 58       	subi	r30, 0x87	; 135
    1f6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f70:	d4 91       	lpm	r29, Z
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    1f72:	f9 01       	movw	r30, r18
    1f74:	e0 57       	subi	r30, 0x70	; 112
    1f76:	fe 4f       	sbci	r31, 0xFE	; 254
    1f78:	c4 91       	lpm	r28, Z
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    1f7a:	cc 23       	and	r28, r28
    1f7c:	a1 f0       	breq	.+40     	; 0x1fa6 <digitalRead+0x4c>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1f7e:	81 11       	cpse	r24, r1
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    1f80:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <turnOffPWM>
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    1f84:	ec 2f       	mov	r30, r28
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	ee 0f       	add	r30, r30
    1f8a:	ff 1f       	adc	r31, r31
    1f8c:	e9 55       	subi	r30, 0x59	; 89
    1f8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f90:	a5 91       	lpm	r26, Z+
    1f92:	b4 91       	lpm	r27, Z
    1f94:	ec 91       	ld	r30, X
    1f96:	ed 23       	and	r30, r29
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <digitalRead+0x46>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	08 95       	ret
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	fa cf       	rjmp	.-12     	; 0x1fa0 <digitalRead+0x46>

00001fac <yield>:
__empty():
C:\Users\UERJBotz\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    1fac:	08 95       	ret

00001fae <__subsf3>:
__subsf3():
    1fae:	50 58       	subi	r21, 0x80	; 128

00001fb0 <__addsf3>:
    1fb0:	bb 27       	eor	r27, r27
    1fb2:	aa 27       	eor	r26, r26
    1fb4:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <__addsf3x>
    1fb8:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__fp_round>
__addsf3():
    1fbc:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__fp_pscA>
    1fc0:	38 f0       	brcs	.+14     	; 0x1fd0 <__addsf3+0x20>
    1fc2:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__fp_pscB>
    1fc6:	20 f0       	brcs	.+8      	; 0x1fd0 <__addsf3+0x20>
    1fc8:	39 f4       	brne	.+14     	; 0x1fd8 <__addsf3+0x28>
    1fca:	9f 3f       	cpi	r25, 0xFF	; 255
    1fcc:	19 f4       	brne	.+6      	; 0x1fd4 <__addsf3+0x24>
    1fce:	26 f4       	brtc	.+8      	; 0x1fd8 <__addsf3+0x28>
    1fd0:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__fp_nan>
    1fd4:	0e f4       	brtc	.+2      	; 0x1fd8 <__addsf3+0x28>
    1fd6:	e0 95       	com	r30
    1fd8:	e7 fb       	bst	r30, 7
    1fda:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__fp_inf>

00001fde <__addsf3x>:
__addsf3x():
    1fde:	e9 2f       	mov	r30, r25
    1fe0:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__fp_split3>
    1fe4:	58 f3       	brcs	.-42     	; 0x1fbc <__addsf3+0xc>
    1fe6:	ba 17       	cp	r27, r26
    1fe8:	62 07       	cpc	r22, r18
    1fea:	73 07       	cpc	r23, r19
    1fec:	84 07       	cpc	r24, r20
    1fee:	95 07       	cpc	r25, r21
    1ff0:	20 f0       	brcs	.+8      	; 0x1ffa <__addsf3x+0x1c>
    1ff2:	79 f4       	brne	.+30     	; 0x2012 <__addsf3x+0x34>
    1ff4:	a6 f5       	brtc	.+104    	; 0x205e <__addsf3x+0x80>
    1ff6:	0c 94 95 11 	jmp	0x232a	; 0x232a <__fp_zero>
    1ffa:	0e f4       	brtc	.+2      	; 0x1ffe <__addsf3x+0x20>
    1ffc:	e0 95       	com	r30
    1ffe:	0b 2e       	mov	r0, r27
    2000:	ba 2f       	mov	r27, r26
    2002:	a0 2d       	mov	r26, r0
    2004:	0b 01       	movw	r0, r22
    2006:	b9 01       	movw	r22, r18
    2008:	90 01       	movw	r18, r0
    200a:	0c 01       	movw	r0, r24
    200c:	ca 01       	movw	r24, r20
    200e:	a0 01       	movw	r20, r0
    2010:	11 24       	eor	r1, r1
    2012:	ff 27       	eor	r31, r31
    2014:	59 1b       	sub	r21, r25
    2016:	99 f0       	breq	.+38     	; 0x203e <__addsf3x+0x60>
    2018:	59 3f       	cpi	r21, 0xF9	; 249
    201a:	50 f4       	brcc	.+20     	; 0x2030 <__addsf3x+0x52>
    201c:	50 3e       	cpi	r21, 0xE0	; 224
    201e:	68 f1       	brcs	.+90     	; 0x207a <__addsf3x+0x9c>
    2020:	1a 16       	cp	r1, r26
    2022:	f0 40       	sbci	r31, 0x00	; 0
    2024:	a2 2f       	mov	r26, r18
    2026:	23 2f       	mov	r18, r19
    2028:	34 2f       	mov	r19, r20
    202a:	44 27       	eor	r20, r20
    202c:	58 5f       	subi	r21, 0xF8	; 248
    202e:	f3 cf       	rjmp	.-26     	; 0x2016 <__addsf3x+0x38>
    2030:	46 95       	lsr	r20
    2032:	37 95       	ror	r19
    2034:	27 95       	ror	r18
    2036:	a7 95       	ror	r26
    2038:	f0 40       	sbci	r31, 0x00	; 0
    203a:	53 95       	inc	r21
    203c:	c9 f7       	brne	.-14     	; 0x2030 <__addsf3x+0x52>
    203e:	7e f4       	brtc	.+30     	; 0x205e <__addsf3x+0x80>
    2040:	1f 16       	cp	r1, r31
    2042:	ba 0b       	sbc	r27, r26
    2044:	62 0b       	sbc	r22, r18
    2046:	73 0b       	sbc	r23, r19
    2048:	84 0b       	sbc	r24, r20
    204a:	ba f0       	brmi	.+46     	; 0x207a <__addsf3x+0x9c>
    204c:	91 50       	subi	r25, 0x01	; 1
    204e:	a1 f0       	breq	.+40     	; 0x2078 <__addsf3x+0x9a>
    2050:	ff 0f       	add	r31, r31
    2052:	bb 1f       	adc	r27, r27
    2054:	66 1f       	adc	r22, r22
    2056:	77 1f       	adc	r23, r23
    2058:	88 1f       	adc	r24, r24
    205a:	c2 f7       	brpl	.-16     	; 0x204c <__addsf3x+0x6e>
    205c:	0e c0       	rjmp	.+28     	; 0x207a <__addsf3x+0x9c>
    205e:	ba 0f       	add	r27, r26
    2060:	62 1f       	adc	r22, r18
    2062:	73 1f       	adc	r23, r19
    2064:	84 1f       	adc	r24, r20
    2066:	48 f4       	brcc	.+18     	; 0x207a <__addsf3x+0x9c>
    2068:	87 95       	ror	r24
    206a:	77 95       	ror	r23
    206c:	67 95       	ror	r22
    206e:	b7 95       	ror	r27
    2070:	f7 95       	ror	r31
    2072:	9e 3f       	cpi	r25, 0xFE	; 254
    2074:	08 f0       	brcs	.+2      	; 0x2078 <__addsf3x+0x9a>
    2076:	b0 cf       	rjmp	.-160    	; 0x1fd8 <__addsf3+0x28>
    2078:	93 95       	inc	r25
    207a:	88 0f       	add	r24, r24
    207c:	08 f0       	brcs	.+2      	; 0x2080 <__addsf3x+0xa2>
    207e:	99 27       	eor	r25, r25
    2080:	ee 0f       	add	r30, r30
    2082:	97 95       	ror	r25
    2084:	87 95       	ror	r24
    2086:	08 95       	ret

00002088 <__cmpsf2>:
    2088:	0e 94 27 11 	call	0x224e	; 0x224e <__fp_cmp>
    208c:	08 f4       	brcc	.+2      	; 0x2090 <__cmpsf2+0x8>
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	08 95       	ret

00002092 <__divsf3>:
    2092:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__divsf3x>
    2096:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__fp_round>
    209a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__fp_pscB>
    209e:	58 f0       	brcs	.+22     	; 0x20b6 <__divsf3+0x24>
    20a0:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__fp_pscA>
    20a4:	40 f0       	brcs	.+16     	; 0x20b6 <__divsf3+0x24>
    20a6:	29 f4       	brne	.+10     	; 0x20b2 <__divsf3+0x20>
    20a8:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    20aa:	29 f0       	breq	.+10     	; 0x20b6 <__divsf3+0x24>
    20ac:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__fp_inf>
    20b0:	51 11       	cpse	r21, r1
    20b2:	0c 94 96 11 	jmp	0x232c	; 0x232c <__fp_szero>
    20b6:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__fp_nan>

000020ba <__divsf3x>:
__divsf3x():
    20ba:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__fp_split3>
    20be:	68 f3       	brcs	.-38     	; 0x209a <__divsf3+0x8>

000020c0 <__divsf3_pse>:
    20c0:	99 23       	and	r25, r25
    20c2:	b1 f3       	breq	.-20     	; 0x20b0 <__divsf3+0x1e>
    20c4:	55 23       	and	r21, r21
    20c6:	91 f3       	breq	.-28     	; 0x20ac <__divsf3+0x1a>
    20c8:	95 1b       	sub	r25, r21
    20ca:	55 0b       	sbc	r21, r21
    20cc:	bb 27       	eor	r27, r27
    20ce:	aa 27       	eor	r26, r26
    20d0:	62 17       	cp	r22, r18
    20d2:	73 07       	cpc	r23, r19
    20d4:	84 07       	cpc	r24, r20
    20d6:	38 f0       	brcs	.+14     	; 0x20e6 <__divsf3_pse+0x26>
    20d8:	9f 5f       	subi	r25, 0xFF	; 255
    20da:	5f 4f       	sbci	r21, 0xFF	; 255
    20dc:	22 0f       	add	r18, r18
    20de:	33 1f       	adc	r19, r19
    20e0:	44 1f       	adc	r20, r20
    20e2:	aa 1f       	adc	r26, r26
    20e4:	a9 f3       	breq	.-22     	; 0x20d0 <__divsf3_pse+0x10>
    20e6:	35 d0       	rcall	.+106    	; 0x2152 <__divsf3_pse+0x92>
    20e8:	0e 2e       	mov	r0, r30
    20ea:	3a f0       	brmi	.+14     	; 0x20fa <__divsf3_pse+0x3a>
    20ec:	e0 e8       	ldi	r30, 0x80	; 128
    20ee:	32 d0       	rcall	.+100    	; 0x2154 <__divsf3_pse+0x94>
    20f0:	91 50       	subi	r25, 0x01	; 1
    20f2:	50 40       	sbci	r21, 0x00	; 0
    20f4:	e6 95       	lsr	r30
    20f6:	00 1c       	adc	r0, r0
    20f8:	ca f7       	brpl	.-14     	; 0x20ec <__divsf3_pse+0x2c>
    20fa:	2b d0       	rcall	.+86     	; 0x2152 <__divsf3_pse+0x92>
    20fc:	fe 2f       	mov	r31, r30
    20fe:	29 d0       	rcall	.+82     	; 0x2152 <__divsf3_pse+0x92>
    2100:	66 0f       	add	r22, r22
    2102:	77 1f       	adc	r23, r23
    2104:	88 1f       	adc	r24, r24
    2106:	bb 1f       	adc	r27, r27
    2108:	26 17       	cp	r18, r22
    210a:	37 07       	cpc	r19, r23
    210c:	48 07       	cpc	r20, r24
    210e:	ab 07       	cpc	r26, r27
    2110:	b0 e8       	ldi	r27, 0x80	; 128
    2112:	09 f0       	breq	.+2      	; 0x2116 <__divsf3_pse+0x56>
    2114:	bb 0b       	sbc	r27, r27
    2116:	80 2d       	mov	r24, r0
    2118:	bf 01       	movw	r22, r30
    211a:	ff 27       	eor	r31, r31
    211c:	93 58       	subi	r25, 0x83	; 131
    211e:	5f 4f       	sbci	r21, 0xFF	; 255
    2120:	3a f0       	brmi	.+14     	; 0x2130 <__divsf3_pse+0x70>
    2122:	9e 3f       	cpi	r25, 0xFE	; 254
    2124:	51 05       	cpc	r21, r1
    2126:	78 f0       	brcs	.+30     	; 0x2146 <__divsf3_pse+0x86>
    2128:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__fp_inf>
    212c:	0c 94 96 11 	jmp	0x232c	; 0x232c <__fp_szero>
    2130:	5f 3f       	cpi	r21, 0xFF	; 255
    2132:	e4 f3       	brlt	.-8      	; 0x212c <__divsf3_pse+0x6c>
    2134:	98 3e       	cpi	r25, 0xE8	; 232
    2136:	d4 f3       	brlt	.-12     	; 0x212c <__divsf3_pse+0x6c>
    2138:	86 95       	lsr	r24
    213a:	77 95       	ror	r23
    213c:	67 95       	ror	r22
    213e:	b7 95       	ror	r27
    2140:	f7 95       	ror	r31
    2142:	9f 5f       	subi	r25, 0xFF	; 255
    2144:	c9 f7       	brne	.-14     	; 0x2138 <__divsf3_pse+0x78>
    2146:	88 0f       	add	r24, r24
    2148:	91 1d       	adc	r25, r1
    214a:	96 95       	lsr	r25
    214c:	87 95       	ror	r24
    214e:	97 f9       	bld	r25, 7
    2150:	08 95       	ret
    2152:	e1 e0       	ldi	r30, 0x01	; 1
    2154:	66 0f       	add	r22, r22
    2156:	77 1f       	adc	r23, r23
    2158:	88 1f       	adc	r24, r24
    215a:	bb 1f       	adc	r27, r27
    215c:	62 17       	cp	r22, r18
    215e:	73 07       	cpc	r23, r19
    2160:	84 07       	cpc	r24, r20
    2162:	ba 07       	cpc	r27, r26
    2164:	20 f0       	brcs	.+8      	; 0x216e <__divsf3_pse+0xae>
    2166:	62 1b       	sub	r22, r18
    2168:	73 0b       	sbc	r23, r19
    216a:	84 0b       	sbc	r24, r20
    216c:	ba 0b       	sbc	r27, r26
    216e:	ee 1f       	adc	r30, r30
    2170:	88 f7       	brcc	.-30     	; 0x2154 <__divsf3_pse+0x94>
    2172:	e0 95       	com	r30
    2174:	08 95       	ret

00002176 <__fixunssfsi>:
    2176:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__fp_splitA>
    217a:	88 f0       	brcs	.+34     	; 0x219e <__fixunssfsi+0x28>
    217c:	9f 57       	subi	r25, 0x7F	; 127
    217e:	98 f0       	brcs	.+38     	; 0x21a6 <__fixunssfsi+0x30>
    2180:	b9 2f       	mov	r27, r25
    2182:	99 27       	eor	r25, r25
    2184:	b7 51       	subi	r27, 0x17	; 23
    2186:	b0 f0       	brcs	.+44     	; 0x21b4 <__fixunssfsi+0x3e>
    2188:	e1 f0       	breq	.+56     	; 0x21c2 <__fixunssfsi+0x4c>
    218a:	66 0f       	add	r22, r22
    218c:	77 1f       	adc	r23, r23
    218e:	88 1f       	adc	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	1a f0       	brmi	.+6      	; 0x219a <__fixunssfsi+0x24>
    2194:	ba 95       	dec	r27
__fixunssfsi():
    2196:	c9 f7       	brne	.-14     	; 0x218a <__fixunssfsi+0x14>
    2198:	14 c0       	rjmp	.+40     	; 0x21c2 <__fixunssfsi+0x4c>
    219a:	b1 30       	cpi	r27, 0x01	; 1
    219c:	91 f0       	breq	.+36     	; 0x21c2 <__fixunssfsi+0x4c>
    219e:	0e 94 95 11 	call	0x232a	; 0x232a <__fp_zero>
    21a2:	b1 e0       	ldi	r27, 0x01	; 1
    21a4:	08 95       	ret
    21a6:	0c 94 95 11 	jmp	0x232a	; 0x232a <__fp_zero>
    21aa:	67 2f       	mov	r22, r23
    21ac:	78 2f       	mov	r23, r24
    21ae:	88 27       	eor	r24, r24
    21b0:	b8 5f       	subi	r27, 0xF8	; 248
    21b2:	39 f0       	breq	.+14     	; 0x21c2 <__fixunssfsi+0x4c>
    21b4:	b9 3f       	cpi	r27, 0xF9	; 249
    21b6:	cc f3       	brlt	.-14     	; 0x21aa <__fixunssfsi+0x34>
    21b8:	86 95       	lsr	r24
    21ba:	77 95       	ror	r23
    21bc:	67 95       	ror	r22
    21be:	b3 95       	inc	r27
    21c0:	d9 f7       	brne	.-10     	; 0x21b8 <__fixunssfsi+0x42>
    21c2:	3e f4       	brtc	.+14     	; 0x21d2 <__fixunssfsi+0x5c>
    21c4:	90 95       	com	r25
    21c6:	80 95       	com	r24
    21c8:	70 95       	com	r23
    21ca:	61 95       	neg	r22
    21cc:	7f 4f       	sbci	r23, 0xFF	; 255
    21ce:	8f 4f       	sbci	r24, 0xFF	; 255
    21d0:	9f 4f       	sbci	r25, 0xFF	; 255
    21d2:	08 95       	ret

000021d4 <__floatunsisf>:
__floatunsisf():
    21d4:	e8 94       	clt
    21d6:	09 c0       	rjmp	.+18     	; 0x21ea <__floatsisf+0x12>

000021d8 <__floatsisf>:
    21d8:	97 fb       	bst	r25, 7
    21da:	3e f4       	brtc	.+14     	; 0x21ea <__floatsisf+0x12>
    21dc:	90 95       	com	r25
    21de:	80 95       	com	r24
    21e0:	70 95       	com	r23
    21e2:	61 95       	neg	r22
    21e4:	7f 4f       	sbci	r23, 0xFF	; 255
    21e6:	8f 4f       	sbci	r24, 0xFF	; 255
    21e8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ea:	99 23       	and	r25, r25
    21ec:	a9 f0       	breq	.+42     	; 0x2218 <__floatsisf+0x40>
    21ee:	f9 2f       	mov	r31, r25
    21f0:	96 e9       	ldi	r25, 0x96	; 150
    21f2:	bb 27       	eor	r27, r27
    21f4:	93 95       	inc	r25
    21f6:	f6 95       	lsr	r31
    21f8:	87 95       	ror	r24
    21fa:	77 95       	ror	r23
    21fc:	67 95       	ror	r22
    21fe:	b7 95       	ror	r27
    2200:	f1 11       	cpse	r31, r1
    2202:	f8 cf       	rjmp	.-16     	; 0x21f4 <__floatsisf+0x1c>
    2204:	fa f4       	brpl	.+62     	; 0x2244 <__floatsisf+0x6c>
    2206:	bb 0f       	add	r27, r27
    2208:	11 f4       	brne	.+4      	; 0x220e <__floatsisf+0x36>
    220a:	60 ff       	sbrs	r22, 0
    220c:	1b c0       	rjmp	.+54     	; 0x2244 <__floatsisf+0x6c>
    220e:	6f 5f       	subi	r22, 0xFF	; 255
    2210:	7f 4f       	sbci	r23, 0xFF	; 255
    2212:	8f 4f       	sbci	r24, 0xFF	; 255
    2214:	9f 4f       	sbci	r25, 0xFF	; 255
    2216:	16 c0       	rjmp	.+44     	; 0x2244 <__floatsisf+0x6c>
    2218:	88 23       	and	r24, r24
    221a:	11 f0       	breq	.+4      	; 0x2220 <__floatsisf+0x48>
    221c:	96 e9       	ldi	r25, 0x96	; 150
    221e:	11 c0       	rjmp	.+34     	; 0x2242 <__floatsisf+0x6a>
    2220:	77 23       	and	r23, r23
    2222:	21 f0       	breq	.+8      	; 0x222c <__floatsisf+0x54>
    2224:	9e e8       	ldi	r25, 0x8E	; 142
    2226:	87 2f       	mov	r24, r23
    2228:	76 2f       	mov	r23, r22
    222a:	05 c0       	rjmp	.+10     	; 0x2236 <__floatsisf+0x5e>
    222c:	66 23       	and	r22, r22
    222e:	71 f0       	breq	.+28     	; 0x224c <__floatsisf+0x74>
    2230:	96 e8       	ldi	r25, 0x86	; 134
    2232:	86 2f       	mov	r24, r22
    2234:	70 e0       	ldi	r23, 0x00	; 0
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	2a f0       	brmi	.+10     	; 0x2244 <__floatsisf+0x6c>
    223a:	9a 95       	dec	r25
    223c:	66 0f       	add	r22, r22
    223e:	77 1f       	adc	r23, r23
    2240:	88 1f       	adc	r24, r24
    2242:	da f7       	brpl	.-10     	; 0x223a <__floatsisf+0x62>
    2244:	88 0f       	add	r24, r24
    2246:	96 95       	lsr	r25
    2248:	87 95       	ror	r24
    224a:	97 f9       	bld	r25, 7
    224c:	08 95       	ret

0000224e <__fp_cmp>:
__fp_cmp():
    224e:	99 0f       	add	r25, r25
    2250:	00 08       	sbc	r0, r0
    2252:	55 0f       	add	r21, r21
    2254:	aa 0b       	sbc	r26, r26
    2256:	e0 e8       	ldi	r30, 0x80	; 128
    2258:	fe ef       	ldi	r31, 0xFE	; 254
    225a:	16 16       	cp	r1, r22
    225c:	17 06       	cpc	r1, r23
    225e:	e8 07       	cpc	r30, r24
    2260:	f9 07       	cpc	r31, r25
    2262:	c0 f0       	brcs	.+48     	; 0x2294 <__fp_cmp+0x46>
    2264:	12 16       	cp	r1, r18
    2266:	13 06       	cpc	r1, r19
    2268:	e4 07       	cpc	r30, r20
    226a:	f5 07       	cpc	r31, r21
    226c:	98 f0       	brcs	.+38     	; 0x2294 <__fp_cmp+0x46>
    226e:	62 1b       	sub	r22, r18
    2270:	73 0b       	sbc	r23, r19
    2272:	84 0b       	sbc	r24, r20
    2274:	95 0b       	sbc	r25, r21
    2276:	39 f4       	brne	.+14     	; 0x2286 <__fp_cmp+0x38>
    2278:	0a 26       	eor	r0, r26
    227a:	61 f0       	breq	.+24     	; 0x2294 <__fp_cmp+0x46>
    227c:	23 2b       	or	r18, r19
    227e:	24 2b       	or	r18, r20
    2280:	25 2b       	or	r18, r21
    2282:	21 f4       	brne	.+8      	; 0x228c <__fp_cmp+0x3e>
    2284:	08 95       	ret
    2286:	0a 26       	eor	r0, r26
    2288:	09 f4       	brne	.+2      	; 0x228c <__fp_cmp+0x3e>
    228a:	a1 40       	sbci	r26, 0x01	; 1
    228c:	a6 95       	lsr	r26
    228e:	8f ef       	ldi	r24, 0xFF	; 255
    2290:	81 1d       	adc	r24, r1
    2292:	81 1d       	adc	r24, r1
    2294:	08 95       	ret

00002296 <__fp_inf>:
__fp_inf():
    2296:	97 f9       	bld	r25, 7
    2298:	9f 67       	ori	r25, 0x7F	; 127
    229a:	80 e8       	ldi	r24, 0x80	; 128
    229c:	70 e0       	ldi	r23, 0x00	; 0
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	08 95       	ret

000022a2 <__fp_nan>:
__fp_nan():
    22a2:	9f ef       	ldi	r25, 0xFF	; 255
    22a4:	80 ec       	ldi	r24, 0xC0	; 192
    22a6:	08 95       	ret

000022a8 <__fp_pscA>:
__fp_pscA():
    22a8:	00 24       	eor	r0, r0
    22aa:	0a 94       	dec	r0
    22ac:	16 16       	cp	r1, r22
    22ae:	17 06       	cpc	r1, r23
    22b0:	18 06       	cpc	r1, r24
    22b2:	09 06       	cpc	r0, r25
    22b4:	08 95       	ret

000022b6 <__fp_pscB>:
__fp_pscB():
    22b6:	00 24       	eor	r0, r0
    22b8:	0a 94       	dec	r0
    22ba:	12 16       	cp	r1, r18
    22bc:	13 06       	cpc	r1, r19
    22be:	14 06       	cpc	r1, r20
    22c0:	05 06       	cpc	r0, r21
    22c2:	08 95       	ret

000022c4 <__fp_round>:
__fp_round():
    22c4:	09 2e       	mov	r0, r25
    22c6:	03 94       	inc	r0
    22c8:	00 0c       	add	r0, r0
    22ca:	11 f4       	brne	.+4      	; 0x22d0 <__fp_round+0xc>
    22cc:	88 23       	and	r24, r24
    22ce:	52 f0       	brmi	.+20     	; 0x22e4 <__fp_round+0x20>
    22d0:	bb 0f       	add	r27, r27
    22d2:	40 f4       	brcc	.+16     	; 0x22e4 <__fp_round+0x20>
    22d4:	bf 2b       	or	r27, r31
    22d6:	11 f4       	brne	.+4      	; 0x22dc <__fp_round+0x18>
    22d8:	60 ff       	sbrs	r22, 0
    22da:	04 c0       	rjmp	.+8      	; 0x22e4 <__fp_round+0x20>
    22dc:	6f 5f       	subi	r22, 0xFF	; 255
    22de:	7f 4f       	sbci	r23, 0xFF	; 255
    22e0:	8f 4f       	sbci	r24, 0xFF	; 255
    22e2:	9f 4f       	sbci	r25, 0xFF	; 255
    22e4:	08 95       	ret

000022e6 <__fp_split3>:
__fp_split3():
    22e6:	57 fd       	sbrc	r21, 7
    22e8:	90 58       	subi	r25, 0x80	; 128
    22ea:	44 0f       	add	r20, r20
    22ec:	55 1f       	adc	r21, r21
    22ee:	59 f0       	breq	.+22     	; 0x2306 <__fp_splitA+0x10>
    22f0:	5f 3f       	cpi	r21, 0xFF	; 255
    22f2:	71 f0       	breq	.+28     	; 0x2310 <__fp_splitA+0x1a>
    22f4:	47 95       	ror	r20

000022f6 <__fp_splitA>:
    22f6:	88 0f       	add	r24, r24
    22f8:	97 fb       	bst	r25, 7
    22fa:	99 1f       	adc	r25, r25
    22fc:	61 f0       	breq	.+24     	; 0x2316 <__fp_splitA+0x20>
    22fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2300:	79 f0       	breq	.+30     	; 0x2320 <__fp_splitA+0x2a>
    2302:	87 95       	ror	r24
    2304:	08 95       	ret
    2306:	12 16       	cp	r1, r18
    2308:	13 06       	cpc	r1, r19
    230a:	14 06       	cpc	r1, r20
    230c:	55 1f       	adc	r21, r21
    230e:	f2 cf       	rjmp	.-28     	; 0x22f4 <__fp_split3+0xe>
    2310:	46 95       	lsr	r20
    2312:	f1 df       	rcall	.-30     	; 0x22f6 <__fp_splitA>
    2314:	08 c0       	rjmp	.+16     	; 0x2326 <__fp_splitA+0x30>
    2316:	16 16       	cp	r1, r22
    2318:	17 06       	cpc	r1, r23
    231a:	18 06       	cpc	r1, r24
    231c:	99 1f       	adc	r25, r25
    231e:	f1 cf       	rjmp	.-30     	; 0x2302 <__fp_splitA+0xc>
    2320:	86 95       	lsr	r24
    2322:	71 05       	cpc	r23, r1
    2324:	61 05       	cpc	r22, r1
    2326:	08 94       	sec
    2328:	08 95       	ret

0000232a <__fp_zero>:
__fp_zero():
    232a:	e8 94       	clt

0000232c <__fp_szero>:
    232c:	bb 27       	eor	r27, r27
    232e:	66 27       	eor	r22, r22
    2330:	77 27       	eor	r23, r23
    2332:	cb 01       	movw	r24, r22
    2334:	97 f9       	bld	r25, 7
    2336:	08 95       	ret

00002338 <__gesf2>:
__gesf2():
    2338:	0e 94 27 11 	call	0x224e	; 0x224e <__fp_cmp>
    233c:	08 f4       	brcc	.+2      	; 0x2340 <__gesf2+0x8>
    233e:	8f ef       	ldi	r24, 0xFF	; 255
    2340:	08 95       	ret

00002342 <__mulsf3>:
__mulsf3():
    2342:	0e 94 b4 11 	call	0x2368	; 0x2368 <__mulsf3x>
    2346:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__fp_round>
    234a:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__fp_pscA>
    234e:	38 f0       	brcs	.+14     	; 0x235e <__mulsf3+0x1c>
    2350:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__fp_pscB>
    2354:	20 f0       	brcs	.+8      	; 0x235e <__mulsf3+0x1c>
    2356:	95 23       	and	r25, r21
    2358:	11 f0       	breq	.+4      	; 0x235e <__mulsf3+0x1c>
    235a:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__fp_inf>
    235e:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__fp_nan>
    2362:	11 24       	eor	r1, r1
    2364:	0c 94 96 11 	jmp	0x232c	; 0x232c <__fp_szero>

00002368 <__mulsf3x>:
__mulsf3x():
    2368:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__fp_split3>
    236c:	70 f3       	brcs	.-36     	; 0x234a <__mulsf3+0x8>

0000236e <__mulsf3_pse>:
    236e:	95 9f       	mul	r25, r21
    2370:	c1 f3       	breq	.-16     	; 0x2362 <__mulsf3+0x20>
    2372:	95 0f       	add	r25, r21
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	55 1f       	adc	r21, r21
    2378:	62 9f       	mul	r22, r18
    237a:	f0 01       	movw	r30, r0
    237c:	72 9f       	mul	r23, r18
    237e:	bb 27       	eor	r27, r27
    2380:	f0 0d       	add	r31, r0
    2382:	b1 1d       	adc	r27, r1
    2384:	63 9f       	mul	r22, r19
    2386:	aa 27       	eor	r26, r26
    2388:	f0 0d       	add	r31, r0
    238a:	b1 1d       	adc	r27, r1
    238c:	aa 1f       	adc	r26, r26
    238e:	64 9f       	mul	r22, r20
    2390:	66 27       	eor	r22, r22
    2392:	b0 0d       	add	r27, r0
    2394:	a1 1d       	adc	r26, r1
    2396:	66 1f       	adc	r22, r22
    2398:	82 9f       	mul	r24, r18
    239a:	22 27       	eor	r18, r18
    239c:	b0 0d       	add	r27, r0
    239e:	a1 1d       	adc	r26, r1
    23a0:	62 1f       	adc	r22, r18
    23a2:	73 9f       	mul	r23, r19
    23a4:	b0 0d       	add	r27, r0
    23a6:	a1 1d       	adc	r26, r1
    23a8:	62 1f       	adc	r22, r18
    23aa:	83 9f       	mul	r24, r19
    23ac:	a0 0d       	add	r26, r0
    23ae:	61 1d       	adc	r22, r1
    23b0:	22 1f       	adc	r18, r18
    23b2:	74 9f       	mul	r23, r20
    23b4:	33 27       	eor	r19, r19
    23b6:	a0 0d       	add	r26, r0
    23b8:	61 1d       	adc	r22, r1
    23ba:	23 1f       	adc	r18, r19
    23bc:	84 9f       	mul	r24, r20
    23be:	60 0d       	add	r22, r0
    23c0:	21 1d       	adc	r18, r1
    23c2:	82 2f       	mov	r24, r18
    23c4:	76 2f       	mov	r23, r22
    23c6:	6a 2f       	mov	r22, r26
    23c8:	11 24       	eor	r1, r1
    23ca:	9f 57       	subi	r25, 0x7F	; 127
    23cc:	50 40       	sbci	r21, 0x00	; 0
    23ce:	9a f0       	brmi	.+38     	; 0x23f6 <__mulsf3_pse+0x88>
    23d0:	f1 f0       	breq	.+60     	; 0x240e <__mulsf3_pse+0xa0>
    23d2:	88 23       	and	r24, r24
    23d4:	4a f0       	brmi	.+18     	; 0x23e8 <__mulsf3_pse+0x7a>
    23d6:	ee 0f       	add	r30, r30
    23d8:	ff 1f       	adc	r31, r31
    23da:	bb 1f       	adc	r27, r27
    23dc:	66 1f       	adc	r22, r22
    23de:	77 1f       	adc	r23, r23
    23e0:	88 1f       	adc	r24, r24
    23e2:	91 50       	subi	r25, 0x01	; 1
    23e4:	50 40       	sbci	r21, 0x00	; 0
    23e6:	a9 f7       	brne	.-22     	; 0x23d2 <__mulsf3_pse+0x64>
    23e8:	9e 3f       	cpi	r25, 0xFE	; 254
    23ea:	51 05       	cpc	r21, r1
    23ec:	80 f0       	brcs	.+32     	; 0x240e <__mulsf3_pse+0xa0>
    23ee:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__fp_inf>
    23f2:	0c 94 96 11 	jmp	0x232c	; 0x232c <__fp_szero>
    23f6:	5f 3f       	cpi	r21, 0xFF	; 255
    23f8:	e4 f3       	brlt	.-8      	; 0x23f2 <__mulsf3_pse+0x84>
    23fa:	98 3e       	cpi	r25, 0xE8	; 232
    23fc:	d4 f3       	brlt	.-12     	; 0x23f2 <__mulsf3_pse+0x84>
    23fe:	86 95       	lsr	r24
    2400:	77 95       	ror	r23
    2402:	67 95       	ror	r22
    2404:	b7 95       	ror	r27
    2406:	f7 95       	ror	r31
    2408:	e7 95       	ror	r30
    240a:	9f 5f       	subi	r25, 0xFF	; 255
    240c:	c1 f7       	brne	.-16     	; 0x23fe <__mulsf3_pse+0x90>
    240e:	fe 2b       	or	r31, r30
    2410:	88 0f       	add	r24, r24
    2412:	91 1d       	adc	r25, r1
    2414:	96 95       	lsr	r25
    2416:	87 95       	ror	r24
    2418:	97 f9       	bld	r25, 7
    241a:	08 95       	ret

0000241c <__mulsi3>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    241c:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    241e:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    2420:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    2422:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    2426:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    2428:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    242a:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    242c:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    242e:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    2430:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    2432:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    2434:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    2436:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    2438:	11 24       	eor	r1, r1
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    243a:	08 95       	ret

0000243c <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    243c:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    243e:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    2440:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    2442:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    2444:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    2446:	0d c0       	rjmp	.+26     	; 0x2462 <__udivmodsi4_ep>

00002448 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    2448:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    244a:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    244c:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    244e:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    2450:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    2452:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    2454:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    2456:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    2458:	20 f0       	brcs	.+8      	; 0x2462 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    245a:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    245c:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    245e:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    2460:	f5 0b       	sbc	r31, r21

00002462 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    2462:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    2464:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    2466:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    2468:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    246a:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    246c:	69 f7       	brne	.-38     	; 0x2448 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    246e:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    2470:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    2472:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    2474:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    2476:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    2478:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    247a:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    247c:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    247e:	08 95       	ret

00002480 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    2480:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    2482:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    2484:	1e f4       	brtc	.+6      	; 0x248c <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    2486:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    2488:	0e 94 57 12 	call	0x24ae	; 0x24ae <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    248c:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    248e:	07 d0       	rcall	.+14     	; 0x249e <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    2490:	0e 94 1e 12 	call	0x243c	; 0x243c <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    2494:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    2496:	03 d0       	rcall	.+6      	; 0x249e <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    2498:	4e f4       	brtc	.+18     	; 0x24ac <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    249a:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__negsi2>

0000249e <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    249e:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    24a0:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    24a2:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    24a4:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    24a6:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    24a8:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    24aa:	5f 4f       	sbci	r21, 0xFF	; 255

000024ac <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    24ac:	08 95       	ret

000024ae <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    24ae:	90 95       	com	r25
    24b0:	80 95       	com	r24
    24b2:	70 95       	com	r23
    24b4:	61 95       	neg	r22
    24b6:	7f 4f       	sbci	r23, 0xFF	; 255
    24b8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ba:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    24bc:	08 95       	ret

000024be <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    24be:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    24c0:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    24c2:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    24c4:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    24c6:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    24c8:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    24ca:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    24cc:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    24ce:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    24d0:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    24d2:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    24d4:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    24d6:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    24d8:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    24da:	08 95       	ret

000024dc <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    24dc:	0e 94 5f 12 	call	0x24be	; 0x24be <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    24e0:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    24e2:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    24e4:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    24e6:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    24e8:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    24ea:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    24ec:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    24ee:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    24f0:	08 95       	ret

000024f2 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    24f2:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    24f4:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    24f6:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    24f8:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    24fa:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    24fc:	09 94       	ijmp

000024fe <dtostrf>:
dtostrf():
    24fe:	ef 92       	push	r14
    2500:	0f 93       	push	r16
    2502:	1f 93       	push	r17
    2504:	cf 93       	push	r28
    2506:	df 93       	push	r29
    2508:	e8 01       	movw	r28, r16
    250a:	34 e0       	ldi	r19, 0x04	; 4
    250c:	47 fd       	sbrc	r20, 7
    250e:	34 e1       	ldi	r19, 0x14	; 20
    2510:	04 2e       	mov	r0, r20
    2512:	00 0c       	add	r0, r0
    2514:	55 0b       	sbc	r21, r21
    2516:	57 ff       	sbrs	r21, 7
    2518:	03 c0       	rjmp	.+6      	; 0x2520 <dtostrf+0x22>
    251a:	51 95       	neg	r21
    251c:	41 95       	neg	r20
    251e:	51 09       	sbc	r21, r1
    2520:	e3 2e       	mov	r14, r19
    2522:	02 2f       	mov	r16, r18
    2524:	24 2f       	mov	r18, r20
    2526:	ae 01       	movw	r20, r28
    2528:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <dtoa_prf>
    252c:	ce 01       	movw	r24, r28
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	1f 91       	pop	r17
    2534:	0f 91       	pop	r16
    2536:	ef 90       	pop	r14
    2538:	08 95       	ret

0000253a <malloc>:
malloc():
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	82 30       	cpi	r24, 0x02	; 2
    2544:	91 05       	cpc	r25, r1
    2546:	10 f4       	brcc	.+4      	; 0x254c <malloc+0x12>
    2548:	82 e0       	ldi	r24, 0x02	; 2
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <__flp>
    2550:	f0 91 9a 03 	lds	r31, 0x039A	; 0x80039a <__flp+0x1>
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	a0 e0       	ldi	r26, 0x00	; 0
    255c:	30 97       	sbiw	r30, 0x00	; 0
    255e:	99 f4       	brne	.+38     	; 0x2586 <malloc+0x4c>
    2560:	21 15       	cp	r18, r1
    2562:	31 05       	cpc	r19, r1
    2564:	09 f4       	brne	.+2      	; 0x2568 <malloc+0x2e>
    2566:	4a c0       	rjmp	.+148    	; 0x25fc <malloc+0xc2>
    2568:	28 1b       	sub	r18, r24
    256a:	39 0b       	sbc	r19, r25
    256c:	24 30       	cpi	r18, 0x04	; 4
    256e:	31 05       	cpc	r19, r1
    2570:	d8 f5       	brcc	.+118    	; 0x25e8 <malloc+0xae>
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	9b 81       	ldd	r25, Y+3	; 0x03
    2576:	61 15       	cp	r22, r1
    2578:	71 05       	cpc	r23, r1
    257a:	89 f1       	breq	.+98     	; 0x25de <malloc+0xa4>
    257c:	fb 01       	movw	r30, r22
    257e:	93 83       	std	Z+3, r25	; 0x03
    2580:	82 83       	std	Z+2, r24	; 0x02
    2582:	fe 01       	movw	r30, r28
    2584:	11 c0       	rjmp	.+34     	; 0x25a8 <malloc+0x6e>
    2586:	40 81       	ld	r20, Z
    2588:	51 81       	ldd	r21, Z+1	; 0x01
    258a:	02 81       	ldd	r16, Z+2	; 0x02
    258c:	13 81       	ldd	r17, Z+3	; 0x03
    258e:	48 17       	cp	r20, r24
    2590:	59 07       	cpc	r21, r25
    2592:	e0 f0       	brcs	.+56     	; 0x25cc <malloc+0x92>
    2594:	48 17       	cp	r20, r24
    2596:	59 07       	cpc	r21, r25
    2598:	99 f4       	brne	.+38     	; 0x25c0 <malloc+0x86>
    259a:	10 97       	sbiw	r26, 0x00	; 0
    259c:	61 f0       	breq	.+24     	; 0x25b6 <malloc+0x7c>
    259e:	12 96       	adiw	r26, 0x02	; 2
    25a0:	0c 93       	st	X, r16
    25a2:	12 97       	sbiw	r26, 0x02	; 2
    25a4:	13 96       	adiw	r26, 0x03	; 3
    25a6:	1c 93       	st	X, r17
    25a8:	32 96       	adiw	r30, 0x02	; 2
    25aa:	cf 01       	movw	r24, r30
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	1f 91       	pop	r17
    25b2:	0f 91       	pop	r16
    25b4:	08 95       	ret
    25b6:	00 93 99 03 	sts	0x0399, r16	; 0x800399 <__flp>
    25ba:	10 93 9a 03 	sts	0x039A, r17	; 0x80039a <__flp+0x1>
    25be:	f4 cf       	rjmp	.-24     	; 0x25a8 <malloc+0x6e>
    25c0:	21 15       	cp	r18, r1
    25c2:	31 05       	cpc	r19, r1
    25c4:	51 f0       	breq	.+20     	; 0x25da <malloc+0xa0>
    25c6:	42 17       	cp	r20, r18
    25c8:	53 07       	cpc	r21, r19
    25ca:	38 f0       	brcs	.+14     	; 0x25da <malloc+0xa0>
    25cc:	a9 01       	movw	r20, r18
    25ce:	db 01       	movw	r26, r22
    25d0:	9a 01       	movw	r18, r20
    25d2:	bd 01       	movw	r22, r26
    25d4:	df 01       	movw	r26, r30
    25d6:	f8 01       	movw	r30, r16
    25d8:	c1 cf       	rjmp	.-126    	; 0x255c <malloc+0x22>
    25da:	ef 01       	movw	r28, r30
    25dc:	f9 cf       	rjmp	.-14     	; 0x25d0 <malloc+0x96>
    25de:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <__flp+0x1>
    25e2:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <__flp>
    25e6:	cd cf       	rjmp	.-102    	; 0x2582 <malloc+0x48>
    25e8:	fe 01       	movw	r30, r28
    25ea:	e2 0f       	add	r30, r18
    25ec:	f3 1f       	adc	r31, r19
    25ee:	81 93       	st	Z+, r24
    25f0:	91 93       	st	Z+, r25
    25f2:	22 50       	subi	r18, 0x02	; 2
    25f4:	31 09       	sbc	r19, r1
    25f6:	39 83       	std	Y+1, r19	; 0x01
    25f8:	28 83       	st	Y, r18
    25fa:	d7 cf       	rjmp	.-82     	; 0x25aa <malloc+0x70>
    25fc:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <__brkval>
    2600:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <__brkval+0x1>
    2604:	23 2b       	or	r18, r19
    2606:	41 f4       	brne	.+16     	; 0x2618 <malloc+0xde>
    2608:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    260c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2610:	30 93 98 03 	sts	0x0398, r19	; 0x800398 <__brkval+0x1>
    2614:	20 93 97 03 	sts	0x0397, r18	; 0x800397 <__brkval>
    2618:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    261c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2620:	21 15       	cp	r18, r1
    2622:	31 05       	cpc	r19, r1
    2624:	41 f4       	brne	.+16     	; 0x2636 <malloc+0xfc>
    2626:	2d b7       	in	r18, 0x3d	; 61
    2628:	3e b7       	in	r19, 0x3e	; 62
    262a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    262e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2632:	24 1b       	sub	r18, r20
    2634:	35 0b       	sbc	r19, r21
    2636:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <__brkval>
    263a:	f0 91 98 03 	lds	r31, 0x0398	; 0x800398 <__brkval+0x1>
    263e:	e2 17       	cp	r30, r18
    2640:	f3 07       	cpc	r31, r19
    2642:	a0 f4       	brcc	.+40     	; 0x266c <malloc+0x132>
    2644:	2e 1b       	sub	r18, r30
    2646:	3f 0b       	sbc	r19, r31
    2648:	28 17       	cp	r18, r24
    264a:	39 07       	cpc	r19, r25
    264c:	78 f0       	brcs	.+30     	; 0x266c <malloc+0x132>
    264e:	ac 01       	movw	r20, r24
    2650:	4e 5f       	subi	r20, 0xFE	; 254
    2652:	5f 4f       	sbci	r21, 0xFF	; 255
    2654:	24 17       	cp	r18, r20
    2656:	35 07       	cpc	r19, r21
    2658:	48 f0       	brcs	.+18     	; 0x266c <malloc+0x132>
    265a:	4e 0f       	add	r20, r30
    265c:	5f 1f       	adc	r21, r31
    265e:	50 93 98 03 	sts	0x0398, r21	; 0x800398 <__brkval+0x1>
    2662:	40 93 97 03 	sts	0x0397, r20	; 0x800397 <__brkval>
    2666:	81 93       	st	Z+, r24
    2668:	91 93       	st	Z+, r25
    266a:	9f cf       	rjmp	.-194    	; 0x25aa <malloc+0x70>
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	e0 e0       	ldi	r30, 0x00	; 0
    2670:	9c cf       	rjmp	.-200    	; 0x25aa <malloc+0x70>

00002672 <free>:
free():
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	e9 f0       	breq	.+58     	; 0x26b4 <free+0x42>
    267a:	fc 01       	movw	r30, r24
    267c:	32 97       	sbiw	r30, 0x02	; 2
    267e:	13 82       	std	Z+3, r1	; 0x03
    2680:	12 82       	std	Z+2, r1	; 0x02
    2682:	a0 91 99 03 	lds	r26, 0x0399	; 0x800399 <__flp>
    2686:	b0 91 9a 03 	lds	r27, 0x039A	; 0x80039a <__flp+0x1>
    268a:	ed 01       	movw	r28, r26
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	10 97       	sbiw	r26, 0x00	; 0
    2692:	a1 f4       	brne	.+40     	; 0x26bc <free+0x4a>
    2694:	20 81       	ld	r18, Z
    2696:	31 81       	ldd	r19, Z+1	; 0x01
    2698:	82 0f       	add	r24, r18
    269a:	93 1f       	adc	r25, r19
    269c:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <__brkval>
    26a0:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <__brkval+0x1>
    26a4:	28 17       	cp	r18, r24
    26a6:	39 07       	cpc	r19, r25
    26a8:	09 f0       	breq	.+2      	; 0x26ac <free+0x3a>
    26aa:	61 c0       	rjmp	.+194    	; 0x276e <free+0xfc>
    26ac:	f0 93 98 03 	sts	0x0398, r31	; 0x800398 <__brkval+0x1>
    26b0:	e0 93 97 03 	sts	0x0397, r30	; 0x800397 <__brkval>
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	08 95       	ret
    26ba:	ea 01       	movw	r28, r20
    26bc:	ce 17       	cp	r28, r30
    26be:	df 07       	cpc	r29, r31
    26c0:	e8 f5       	brcc	.+122    	; 0x273c <free+0xca>
    26c2:	4a 81       	ldd	r20, Y+2	; 0x02
    26c4:	5b 81       	ldd	r21, Y+3	; 0x03
    26c6:	9e 01       	movw	r18, r28
    26c8:	41 15       	cp	r20, r1
    26ca:	51 05       	cpc	r21, r1
    26cc:	b1 f7       	brne	.-20     	; 0x26ba <free+0x48>
    26ce:	e9 01       	movw	r28, r18
    26d0:	fb 83       	std	Y+3, r31	; 0x03
    26d2:	ea 83       	std	Y+2, r30	; 0x02
    26d4:	49 91       	ld	r20, Y+
    26d6:	59 91       	ld	r21, Y+
    26d8:	c4 0f       	add	r28, r20
    26da:	d5 1f       	adc	r29, r21
    26dc:	ec 17       	cp	r30, r28
    26de:	fd 07       	cpc	r31, r29
    26e0:	61 f4       	brne	.+24     	; 0x26fa <free+0x88>
    26e2:	80 81       	ld	r24, Z
    26e4:	91 81       	ldd	r25, Z+1	; 0x01
    26e6:	02 96       	adiw	r24, 0x02	; 2
    26e8:	84 0f       	add	r24, r20
    26ea:	95 1f       	adc	r25, r21
    26ec:	e9 01       	movw	r28, r18
    26ee:	99 83       	std	Y+1, r25	; 0x01
    26f0:	88 83       	st	Y, r24
    26f2:	82 81       	ldd	r24, Z+2	; 0x02
    26f4:	93 81       	ldd	r25, Z+3	; 0x03
    26f6:	9b 83       	std	Y+3, r25	; 0x03
    26f8:	8a 83       	std	Y+2, r24	; 0x02
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	e0 e0       	ldi	r30, 0x00	; 0
    26fe:	12 96       	adiw	r26, 0x02	; 2
    2700:	8d 91       	ld	r24, X+
    2702:	9c 91       	ld	r25, X
    2704:	13 97       	sbiw	r26, 0x03	; 3
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	b9 f5       	brne	.+110    	; 0x2778 <free+0x106>
    270a:	2d 91       	ld	r18, X+
    270c:	3c 91       	ld	r19, X
    270e:	11 97       	sbiw	r26, 0x01	; 1
    2710:	cd 01       	movw	r24, r26
    2712:	02 96       	adiw	r24, 0x02	; 2
    2714:	82 0f       	add	r24, r18
    2716:	93 1f       	adc	r25, r19
    2718:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <__brkval>
    271c:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <__brkval+0x1>
    2720:	28 17       	cp	r18, r24
    2722:	39 07       	cpc	r19, r25
    2724:	39 f6       	brne	.-114    	; 0x26b4 <free+0x42>
    2726:	30 97       	sbiw	r30, 0x00	; 0
    2728:	51 f5       	brne	.+84     	; 0x277e <free+0x10c>
    272a:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <__flp+0x1>
    272e:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <__flp>
    2732:	b0 93 98 03 	sts	0x0398, r27	; 0x800398 <__brkval+0x1>
    2736:	a0 93 97 03 	sts	0x0397, r26	; 0x800397 <__brkval>
    273a:	bc cf       	rjmp	.-136    	; 0x26b4 <free+0x42>
    273c:	d3 83       	std	Z+3, r29	; 0x03
    273e:	c2 83       	std	Z+2, r28	; 0x02
    2740:	40 81       	ld	r20, Z
    2742:	51 81       	ldd	r21, Z+1	; 0x01
    2744:	84 0f       	add	r24, r20
    2746:	95 1f       	adc	r25, r21
    2748:	c8 17       	cp	r28, r24
    274a:	d9 07       	cpc	r29, r25
    274c:	61 f4       	brne	.+24     	; 0x2766 <free+0xf4>
    274e:	4e 5f       	subi	r20, 0xFE	; 254
    2750:	5f 4f       	sbci	r21, 0xFF	; 255
    2752:	88 81       	ld	r24, Y
    2754:	99 81       	ldd	r25, Y+1	; 0x01
    2756:	48 0f       	add	r20, r24
    2758:	59 1f       	adc	r21, r25
    275a:	51 83       	std	Z+1, r21	; 0x01
    275c:	40 83       	st	Z, r20
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	9b 81       	ldd	r25, Y+3	; 0x03
    2762:	93 83       	std	Z+3, r25	; 0x03
    2764:	82 83       	std	Z+2, r24	; 0x02
    2766:	21 15       	cp	r18, r1
    2768:	31 05       	cpc	r19, r1
    276a:	09 f0       	breq	.+2      	; 0x276e <free+0xfc>
    276c:	b0 cf       	rjmp	.-160    	; 0x26ce <free+0x5c>
    276e:	f0 93 9a 03 	sts	0x039A, r31	; 0x80039a <__flp+0x1>
    2772:	e0 93 99 03 	sts	0x0399, r30	; 0x800399 <__flp>
    2776:	9e cf       	rjmp	.-196    	; 0x26b4 <free+0x42>
    2778:	fd 01       	movw	r30, r26
    277a:	dc 01       	movw	r26, r24
    277c:	c0 cf       	rjmp	.-128    	; 0x26fe <free+0x8c>
    277e:	13 82       	std	Z+3, r1	; 0x03
    2780:	12 82       	std	Z+2, r1	; 0x02
    2782:	d7 cf       	rjmp	.-82     	; 0x2732 <free+0xc0>

00002784 <realloc>:
realloc():
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	a0 e0       	ldi	r26, 0x00	; 0
    2788:	e8 ec       	ldi	r30, 0xC8	; 200
    278a:	f3 e1       	ldi	r31, 0x13	; 19
    278c:	0c 94 be 19 	jmp	0x337c	; 0x337c <__prologue_saves__+0x4>
    2790:	8c 01       	movw	r16, r24
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	51 f4       	brne	.+20     	; 0x27aa <realloc+0x26>
    2796:	cb 01       	movw	r24, r22
    2798:	0e 94 9d 12 	call	0x253a	; 0x253a <malloc>
    279c:	8c 01       	movw	r16, r24
    279e:	c8 01       	movw	r24, r16
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	e0 e1       	ldi	r30, 0x10	; 16
    27a6:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <__epilogue_restores__+0x4>
    27aa:	fc 01       	movw	r30, r24
    27ac:	e6 0f       	add	r30, r22
    27ae:	f7 1f       	adc	r31, r23
    27b0:	9c 01       	movw	r18, r24
    27b2:	22 50       	subi	r18, 0x02	; 2
    27b4:	31 09       	sbc	r19, r1
    27b6:	e2 17       	cp	r30, r18
    27b8:	f3 07       	cpc	r31, r19
    27ba:	08 f4       	brcc	.+2      	; 0x27be <realloc+0x3a>
    27bc:	9d c0       	rjmp	.+314    	; 0x28f8 <realloc+0x174>
    27be:	d9 01       	movw	r26, r18
    27c0:	cd 91       	ld	r28, X+
    27c2:	dc 91       	ld	r29, X
    27c4:	11 97       	sbiw	r26, 0x01	; 1
    27c6:	c6 17       	cp	r28, r22
    27c8:	d7 07       	cpc	r29, r23
    27ca:	98 f0       	brcs	.+38     	; 0x27f2 <realloc+0x6e>
    27cc:	c5 30       	cpi	r28, 0x05	; 5
    27ce:	d1 05       	cpc	r29, r1
    27d0:	30 f3       	brcs	.-52     	; 0x279e <realloc+0x1a>
    27d2:	ce 01       	movw	r24, r28
    27d4:	04 97       	sbiw	r24, 0x04	; 4
    27d6:	86 17       	cp	r24, r22
    27d8:	97 07       	cpc	r25, r23
    27da:	08 f3       	brcs	.-62     	; 0x279e <realloc+0x1a>
    27dc:	c6 1b       	sub	r28, r22
    27de:	d7 0b       	sbc	r29, r23
    27e0:	22 97       	sbiw	r28, 0x02	; 2
    27e2:	c1 93       	st	Z+, r28
    27e4:	d1 93       	st	Z+, r29
    27e6:	6d 93       	st	X+, r22
    27e8:	7c 93       	st	X, r23
    27ea:	cf 01       	movw	r24, r30
    27ec:	0e 94 39 13 	call	0x2672	; 0x2672 <free>
    27f0:	d6 cf       	rjmp	.-84     	; 0x279e <realloc+0x1a>
    27f2:	5b 01       	movw	r10, r22
    27f4:	ac 1a       	sub	r10, r28
    27f6:	bd 0a       	sbc	r11, r29
    27f8:	4c 01       	movw	r8, r24
    27fa:	8c 0e       	add	r8, r28
    27fc:	9d 1e       	adc	r9, r29
    27fe:	a0 91 99 03 	lds	r26, 0x0399	; 0x800399 <__flp>
    2802:	b0 91 9a 03 	lds	r27, 0x039A	; 0x80039a <__flp+0x1>
    2806:	51 2c       	mov	r5, r1
    2808:	41 2c       	mov	r4, r1
    280a:	f1 2c       	mov	r15, r1
    280c:	e1 2c       	mov	r14, r1
    280e:	10 97       	sbiw	r26, 0x00	; 0
    2810:	31 f5       	brne	.+76     	; 0x285e <realloc+0xda>
    2812:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <__brkval>
    2816:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <__brkval+0x1>
    281a:	88 15       	cp	r24, r8
    281c:	99 05       	cpc	r25, r9
    281e:	09 f0       	breq	.+2      	; 0x2822 <realloc+0x9e>
    2820:	5c c0       	rjmp	.+184    	; 0x28da <realloc+0x156>
    2822:	46 16       	cp	r4, r22
    2824:	57 06       	cpc	r5, r23
    2826:	08 f0       	brcs	.+2      	; 0x282a <realloc+0xa6>
    2828:	58 c0       	rjmp	.+176    	; 0x28da <realloc+0x156>
    282a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    282e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	41 f4       	brne	.+16     	; 0x2846 <realloc+0xc2>
    2836:	8d b7       	in	r24, 0x3d	; 61
    2838:	9e b7       	in	r25, 0x3e	; 62
    283a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    283e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2842:	84 1b       	sub	r24, r20
    2844:	95 0b       	sbc	r25, r21
    2846:	e8 17       	cp	r30, r24
    2848:	f9 07       	cpc	r31, r25
    284a:	08 f0       	brcs	.+2      	; 0x284e <realloc+0xca>
    284c:	55 c0       	rjmp	.+170    	; 0x28f8 <realloc+0x174>
    284e:	f0 93 98 03 	sts	0x0398, r31	; 0x800398 <__brkval+0x1>
    2852:	e0 93 97 03 	sts	0x0397, r30	; 0x800397 <__brkval>
    2856:	f9 01       	movw	r30, r18
    2858:	71 83       	std	Z+1, r23	; 0x01
    285a:	60 83       	st	Z, r22
    285c:	a0 cf       	rjmp	.-192    	; 0x279e <realloc+0x1a>
    285e:	8d 91       	ld	r24, X+
    2860:	9c 91       	ld	r25, X
    2862:	11 97       	sbiw	r26, 0x01	; 1
    2864:	12 96       	adiw	r26, 0x02	; 2
    2866:	6c 90       	ld	r6, X
    2868:	12 97       	sbiw	r26, 0x02	; 2
    286a:	13 96       	adiw	r26, 0x03	; 3
    286c:	7c 90       	ld	r7, X
    286e:	13 97       	sbiw	r26, 0x03	; 3
    2870:	a8 15       	cp	r26, r8
    2872:	b9 05       	cpc	r27, r9
    2874:	59 f5       	brne	.+86     	; 0x28cc <realloc+0x148>
    2876:	6c 01       	movw	r12, r24
    2878:	42 e0       	ldi	r20, 0x02	; 2
    287a:	c4 0e       	add	r12, r20
    287c:	d1 1c       	adc	r13, r1
    287e:	ca 14       	cp	r12, r10
    2880:	db 04       	cpc	r13, r11
    2882:	20 f1       	brcs	.+72     	; 0x28cc <realloc+0x148>
    2884:	ac 01       	movw	r20, r24
    2886:	4a 19       	sub	r20, r10
    2888:	5b 09       	sbc	r21, r11
    288a:	da 01       	movw	r26, r20
    288c:	12 96       	adiw	r26, 0x02	; 2
    288e:	15 97       	sbiw	r26, 0x05	; 5
    2890:	80 f0       	brcs	.+32     	; 0x28b2 <realloc+0x12e>
    2892:	62 82       	std	Z+2, r6	; 0x02
    2894:	73 82       	std	Z+3, r7	; 0x03
    2896:	51 83       	std	Z+1, r21	; 0x01
    2898:	40 83       	st	Z, r20
    289a:	d9 01       	movw	r26, r18
    289c:	6d 93       	st	X+, r22
    289e:	7c 93       	st	X, r23
    28a0:	e1 14       	cp	r14, r1
    28a2:	f1 04       	cpc	r15, r1
    28a4:	71 f0       	breq	.+28     	; 0x28c2 <realloc+0x13e>
    28a6:	d7 01       	movw	r26, r14
    28a8:	13 96       	adiw	r26, 0x03	; 3
    28aa:	fc 93       	st	X, r31
    28ac:	ee 93       	st	-X, r30
    28ae:	12 97       	sbiw	r26, 0x02	; 2
    28b0:	76 cf       	rjmp	.-276    	; 0x279e <realloc+0x1a>
    28b2:	22 96       	adiw	r28, 0x02	; 2
    28b4:	8c 0f       	add	r24, r28
    28b6:	9d 1f       	adc	r25, r29
    28b8:	f9 01       	movw	r30, r18
    28ba:	91 83       	std	Z+1, r25	; 0x01
    28bc:	80 83       	st	Z, r24
    28be:	f3 01       	movw	r30, r6
    28c0:	ef cf       	rjmp	.-34     	; 0x28a0 <realloc+0x11c>
    28c2:	f0 93 9a 03 	sts	0x039A, r31	; 0x80039a <__flp+0x1>
    28c6:	e0 93 99 03 	sts	0x0399, r30	; 0x800399 <__flp>
    28ca:	69 cf       	rjmp	.-302    	; 0x279e <realloc+0x1a>
    28cc:	48 16       	cp	r4, r24
    28ce:	59 06       	cpc	r5, r25
    28d0:	08 f4       	brcc	.+2      	; 0x28d4 <realloc+0x150>
    28d2:	2c 01       	movw	r4, r24
    28d4:	7d 01       	movw	r14, r26
    28d6:	d3 01       	movw	r26, r6
    28d8:	9a cf       	rjmp	.-204    	; 0x280e <realloc+0x8a>
    28da:	cb 01       	movw	r24, r22
    28dc:	0e 94 9d 12 	call	0x253a	; 0x253a <malloc>
    28e0:	7c 01       	movw	r14, r24
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	49 f0       	breq	.+18     	; 0x28f8 <realloc+0x174>
    28e6:	ae 01       	movw	r20, r28
    28e8:	b8 01       	movw	r22, r16
    28ea:	0e 94 7f 14 	call	0x28fe	; 0x28fe <memcpy>
    28ee:	c8 01       	movw	r24, r16
    28f0:	0e 94 39 13 	call	0x2672	; 0x2672 <free>
    28f4:	87 01       	movw	r16, r14
    28f6:	53 cf       	rjmp	.-346    	; 0x279e <realloc+0x1a>
    28f8:	10 e0       	ldi	r17, 0x00	; 0
    28fa:	00 e0       	ldi	r16, 0x00	; 0
    28fc:	50 cf       	rjmp	.-352    	; 0x279e <realloc+0x1a>

000028fe <memcpy>:
memcpy():
    28fe:	fb 01       	movw	r30, r22
    2900:	dc 01       	movw	r26, r24
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <memcpy+0xa>
    2904:	01 90       	ld	r0, Z+
    2906:	0d 92       	st	X+, r0
    2908:	41 50       	subi	r20, 0x01	; 1
    290a:	50 40       	sbci	r21, 0x00	; 0
    290c:	d8 f7       	brcc	.-10     	; 0x2904 <memcpy+0x6>
    290e:	08 95       	ret

00002910 <strcpy>:
strcpy():
    2910:	fb 01       	movw	r30, r22
    2912:	dc 01       	movw	r26, r24
    2914:	01 90       	ld	r0, Z+
    2916:	0d 92       	st	X+, r0
    2918:	00 20       	and	r0, r0
    291a:	e1 f7       	brne	.-8      	; 0x2914 <strcpy+0x4>
    291c:	08 95       	ret

0000291e <itoa>:
itoa():
    291e:	45 32       	cpi	r20, 0x25	; 37
    2920:	51 05       	cpc	r21, r1
    2922:	20 f4       	brcc	.+8      	; 0x292c <itoa+0xe>
    2924:	42 30       	cpi	r20, 0x02	; 2
    2926:	10 f0       	brcs	.+4      	; 0x292c <itoa+0xe>
    2928:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__itoa_ncheck>
    292c:	fb 01       	movw	r30, r22
    292e:	10 82       	st	Z, r1
    2930:	cb 01       	movw	r24, r22
    2932:	08 95       	ret

00002934 <__itoa_ncheck>:
__itoa_ncheck():
    2934:	bb 27       	eor	r27, r27
    2936:	4a 30       	cpi	r20, 0x0A	; 10
    2938:	31 f4       	brne	.+12     	; 0x2946 <__itoa_ncheck+0x12>
    293a:	99 23       	and	r25, r25
    293c:	22 f4       	brpl	.+8      	; 0x2946 <__itoa_ncheck+0x12>
    293e:	bd e2       	ldi	r27, 0x2D	; 45
    2940:	90 95       	com	r25
    2942:	81 95       	neg	r24
    2944:	9f 4f       	sbci	r25, 0xFF	; 255
    2946:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__utoa_common>

0000294a <ultoa>:
ultoa():
    294a:	25 32       	cpi	r18, 0x25	; 37
    294c:	31 05       	cpc	r19, r1
    294e:	20 f4       	brcc	.+8      	; 0x2958 <ultoa+0xe>
    2950:	22 30       	cpi	r18, 0x02	; 2
    2952:	10 f0       	brcs	.+4      	; 0x2958 <ultoa+0xe>
    2954:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__ultoa_ncheck>
    2958:	fa 01       	movw	r30, r20
    295a:	10 82       	st	Z, r1
    295c:	ca 01       	movw	r24, r20
    295e:	08 95       	ret

00002960 <__ultoa_ncheck>:
__ultoa_ncheck():
    2960:	bb 27       	eor	r27, r27

00002962 <__ultoa_common>:
    2962:	fa 01       	movw	r30, r20
    2964:	a6 2f       	mov	r26, r22
    2966:	62 17       	cp	r22, r18
    2968:	71 05       	cpc	r23, r1
    296a:	81 05       	cpc	r24, r1
    296c:	91 05       	cpc	r25, r1
    296e:	33 0b       	sbc	r19, r19
    2970:	30 fb       	bst	r19, 0
    2972:	66 f0       	brts	.+24     	; 0x298c <__ultoa_common+0x2a>
    2974:	aa 27       	eor	r26, r26
    2976:	66 0f       	add	r22, r22
    2978:	77 1f       	adc	r23, r23
    297a:	88 1f       	adc	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	aa 1f       	adc	r26, r26
    2980:	a2 17       	cp	r26, r18
    2982:	10 f0       	brcs	.+4      	; 0x2988 <__ultoa_common+0x26>
    2984:	a2 1b       	sub	r26, r18
    2986:	63 95       	inc	r22
    2988:	38 50       	subi	r19, 0x08	; 8
    298a:	a9 f7       	brne	.-22     	; 0x2976 <__ultoa_common+0x14>
    298c:	a0 5d       	subi	r26, 0xD0	; 208
    298e:	aa 33       	cpi	r26, 0x3A	; 58
    2990:	08 f0       	brcs	.+2      	; 0x2994 <__ultoa_common+0x32>
    2992:	a9 5d       	subi	r26, 0xD9	; 217
    2994:	a1 93       	st	Z+, r26
    2996:	36 f7       	brtc	.-52     	; 0x2964 <__ultoa_common+0x2>
    2998:	b1 11       	cpse	r27, r1
    299a:	b1 93       	st	Z+, r27
    299c:	10 82       	st	Z, r1
    299e:	ca 01       	movw	r24, r20
    29a0:	0c 94 1e 19 	jmp	0x323c	; 0x323c <strrev>

000029a4 <utoa>:
utoa():
    29a4:	45 32       	cpi	r20, 0x25	; 37
    29a6:	51 05       	cpc	r21, r1
    29a8:	20 f4       	brcc	.+8      	; 0x29b2 <utoa+0xe>
    29aa:	42 30       	cpi	r20, 0x02	; 2
    29ac:	10 f0       	brcs	.+4      	; 0x29b2 <utoa+0xe>
    29ae:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__utoa_ncheck>
    29b2:	fb 01       	movw	r30, r22
    29b4:	10 82       	st	Z, r1
    29b6:	cb 01       	movw	r24, r22
    29b8:	08 95       	ret

000029ba <__utoa_ncheck>:
__utoa_ncheck():
    29ba:	bb 27       	eor	r27, r27

000029bc <__utoa_common>:
    29bc:	fb 01       	movw	r30, r22
    29be:	55 27       	eor	r21, r21
    29c0:	aa 27       	eor	r26, r26
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	aa 1f       	adc	r26, r26
    29c8:	a4 17       	cp	r26, r20
    29ca:	10 f0       	brcs	.+4      	; 0x29d0 <__utoa_common+0x14>
    29cc:	a4 1b       	sub	r26, r20
    29ce:	83 95       	inc	r24
    29d0:	50 51       	subi	r21, 0x10	; 16
    29d2:	b9 f7       	brne	.-18     	; 0x29c2 <__utoa_common+0x6>
    29d4:	a0 5d       	subi	r26, 0xD0	; 208
    29d6:	aa 33       	cpi	r26, 0x3A	; 58
    29d8:	08 f0       	brcs	.+2      	; 0x29dc <__utoa_common+0x20>
    29da:	a9 5d       	subi	r26, 0xD9	; 217
    29dc:	a1 93       	st	Z+, r26
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	79 f7       	brne	.-34     	; 0x29c0 <__utoa_common+0x4>
    29e2:	b1 11       	cpse	r27, r1
    29e4:	b1 93       	st	Z+, r27
    29e6:	11 92       	st	Z+, r1
    29e8:	cb 01       	movw	r24, r22
    29ea:	0c 94 1e 19 	jmp	0x323c	; 0x323c <strrev>

000029ee <vfprintf>:
vfprintf():
    29ee:	ab e0       	ldi	r26, 0x0B	; 11
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	ed ef       	ldi	r30, 0xFD	; 253
    29f4:	f4 e1       	ldi	r31, 0x14	; 20
    29f6:	0c 94 bc 19 	jmp	0x3378	; 0x3378 <__prologue_saves__>
    29fa:	7c 01       	movw	r14, r24
    29fc:	3b 01       	movw	r6, r22
    29fe:	8a 01       	movw	r16, r20
    2a00:	fc 01       	movw	r30, r24
    2a02:	17 82       	std	Z+7, r1	; 0x07
    2a04:	16 82       	std	Z+6, r1	; 0x06
    2a06:	83 81       	ldd	r24, Z+3	; 0x03
    2a08:	81 ff       	sbrs	r24, 1
    2a0a:	c8 c1       	rjmp	.+912    	; 0x2d9c <vfprintf+0x3ae>
    2a0c:	ce 01       	movw	r24, r28
    2a0e:	01 96       	adiw	r24, 0x01	; 1
    2a10:	5c 01       	movw	r10, r24
    2a12:	f7 01       	movw	r30, r14
    2a14:	93 81       	ldd	r25, Z+3	; 0x03
    2a16:	f3 01       	movw	r30, r6
    2a18:	93 fd       	sbrc	r25, 3
    2a1a:	85 91       	lpm	r24, Z+
    2a1c:	93 ff       	sbrs	r25, 3
    2a1e:	81 91       	ld	r24, Z+
    2a20:	3f 01       	movw	r6, r30
    2a22:	88 23       	and	r24, r24
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <vfprintf+0x3a>
    2a26:	53 c1       	rjmp	.+678    	; 0x2cce <vfprintf+0x2e0>
    2a28:	85 32       	cpi	r24, 0x25	; 37
    2a2a:	39 f4       	brne	.+14     	; 0x2a3a <vfprintf+0x4c>
    2a2c:	93 fd       	sbrc	r25, 3
    2a2e:	85 91       	lpm	r24, Z+
    2a30:	93 ff       	sbrs	r25, 3
    2a32:	81 91       	ld	r24, Z+
    2a34:	3f 01       	movw	r6, r30
    2a36:	85 32       	cpi	r24, 0x25	; 37
    2a38:	29 f4       	brne	.+10     	; 0x2a44 <vfprintf+0x56>
    2a3a:	b7 01       	movw	r22, r14
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	0e 94 2e 19 	call	0x325c	; 0x325c <fputc>
    2a42:	e7 cf       	rjmp	.-50     	; 0x2a12 <vfprintf+0x24>
    2a44:	91 2c       	mov	r9, r1
    2a46:	21 2c       	mov	r2, r1
    2a48:	31 2c       	mov	r3, r1
    2a4a:	ff e1       	ldi	r31, 0x1F	; 31
    2a4c:	f3 15       	cp	r31, r3
    2a4e:	38 f0       	brcs	.+14     	; 0x2a5e <vfprintf+0x70>
    2a50:	8b 32       	cpi	r24, 0x2B	; 43
    2a52:	11 f1       	breq	.+68     	; 0x2a98 <vfprintf+0xaa>
    2a54:	90 f4       	brcc	.+36     	; 0x2a7a <vfprintf+0x8c>
    2a56:	80 32       	cpi	r24, 0x20	; 32
    2a58:	09 f1       	breq	.+66     	; 0x2a9c <vfprintf+0xae>
    2a5a:	83 32       	cpi	r24, 0x23	; 35
    2a5c:	29 f1       	breq	.+74     	; 0x2aa8 <vfprintf+0xba>
    2a5e:	37 fc       	sbrc	r3, 7
    2a60:	3c c0       	rjmp	.+120    	; 0x2ada <vfprintf+0xec>
    2a62:	20 ed       	ldi	r18, 0xD0	; 208
    2a64:	28 0f       	add	r18, r24
    2a66:	2a 30       	cpi	r18, 0x0A	; 10
    2a68:	50 f5       	brcc	.+84     	; 0x2abe <vfprintf+0xd0>
    2a6a:	36 fe       	sbrs	r3, 6
    2a6c:	20 c0       	rjmp	.+64     	; 0x2aae <vfprintf+0xc0>
    2a6e:	8a e0       	ldi	r24, 0x0A	; 10
    2a70:	98 9e       	mul	r9, r24
    2a72:	20 0d       	add	r18, r0
    2a74:	11 24       	eor	r1, r1
    2a76:	92 2e       	mov	r9, r18
    2a78:	06 c0       	rjmp	.+12     	; 0x2a86 <vfprintf+0x98>
    2a7a:	8d 32       	cpi	r24, 0x2D	; 45
    2a7c:	91 f0       	breq	.+36     	; 0x2aa2 <vfprintf+0xb4>
    2a7e:	80 33       	cpi	r24, 0x30	; 48
    2a80:	71 f7       	brne	.-36     	; 0x2a5e <vfprintf+0x70>
    2a82:	68 94       	set
    2a84:	30 f8       	bld	r3, 0
    2a86:	f3 01       	movw	r30, r6
    2a88:	93 fd       	sbrc	r25, 3
    2a8a:	85 91       	lpm	r24, Z+
    2a8c:	93 ff       	sbrs	r25, 3
    2a8e:	81 91       	ld	r24, Z+
    2a90:	3f 01       	movw	r6, r30
    2a92:	81 11       	cpse	r24, r1
    2a94:	da cf       	rjmp	.-76     	; 0x2a4a <vfprintf+0x5c>
    2a96:	21 c0       	rjmp	.+66     	; 0x2ada <vfprintf+0xec>
    2a98:	68 94       	set
    2a9a:	31 f8       	bld	r3, 1
    2a9c:	68 94       	set
    2a9e:	32 f8       	bld	r3, 2
    2aa0:	f2 cf       	rjmp	.-28     	; 0x2a86 <vfprintf+0x98>
    2aa2:	68 94       	set
    2aa4:	33 f8       	bld	r3, 3
    2aa6:	ef cf       	rjmp	.-34     	; 0x2a86 <vfprintf+0x98>
    2aa8:	68 94       	set
    2aaa:	34 f8       	bld	r3, 4
    2aac:	ec cf       	rjmp	.-40     	; 0x2a86 <vfprintf+0x98>
    2aae:	ea e0       	ldi	r30, 0x0A	; 10
    2ab0:	2e 9e       	mul	r2, r30
    2ab2:	20 0d       	add	r18, r0
    2ab4:	11 24       	eor	r1, r1
    2ab6:	22 2e       	mov	r2, r18
    2ab8:	68 94       	set
    2aba:	35 f8       	bld	r3, 5
    2abc:	e4 cf       	rjmp	.-56     	; 0x2a86 <vfprintf+0x98>
    2abe:	8e 32       	cpi	r24, 0x2E	; 46
    2ac0:	29 f4       	brne	.+10     	; 0x2acc <vfprintf+0xde>
    2ac2:	36 fc       	sbrc	r3, 6
    2ac4:	04 c1       	rjmp	.+520    	; 0x2cce <vfprintf+0x2e0>
    2ac6:	68 94       	set
    2ac8:	36 f8       	bld	r3, 6
    2aca:	dd cf       	rjmp	.-70     	; 0x2a86 <vfprintf+0x98>
    2acc:	8c 36       	cpi	r24, 0x6C	; 108
    2ace:	19 f4       	brne	.+6      	; 0x2ad6 <vfprintf+0xe8>
    2ad0:	68 94       	set
    2ad2:	37 f8       	bld	r3, 7
    2ad4:	d8 cf       	rjmp	.-80     	; 0x2a86 <vfprintf+0x98>
    2ad6:	88 36       	cpi	r24, 0x68	; 104
    2ad8:	b1 f2       	breq	.-84     	; 0x2a86 <vfprintf+0x98>
    2ada:	98 2f       	mov	r25, r24
    2adc:	9f 7d       	andi	r25, 0xDF	; 223
    2ade:	95 54       	subi	r25, 0x45	; 69
    2ae0:	93 30       	cpi	r25, 0x03	; 3
    2ae2:	e0 f0       	brcs	.+56     	; 0x2b1c <vfprintf+0x12e>
    2ae4:	83 36       	cpi	r24, 0x63	; 99
    2ae6:	a1 f1       	breq	.+104    	; 0x2b50 <vfprintf+0x162>
    2ae8:	83 37       	cpi	r24, 0x73	; 115
    2aea:	c1 f1       	breq	.+112    	; 0x2b5c <vfprintf+0x16e>
    2aec:	83 35       	cpi	r24, 0x53	; 83
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <vfprintf+0x104>
    2af0:	63 c0       	rjmp	.+198    	; 0x2bb8 <vfprintf+0x1ca>
    2af2:	28 01       	movw	r4, r16
    2af4:	f2 e0       	ldi	r31, 0x02	; 2
    2af6:	4f 0e       	add	r4, r31
    2af8:	51 1c       	adc	r5, r1
    2afa:	f8 01       	movw	r30, r16
    2afc:	c0 80       	ld	r12, Z
    2afe:	d1 80       	ldd	r13, Z+1	; 0x01
    2b00:	69 2d       	mov	r22, r9
    2b02:	70 e0       	ldi	r23, 0x00	; 0
    2b04:	36 fc       	sbrc	r3, 6
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <vfprintf+0x11e>
    2b08:	6f ef       	ldi	r22, 0xFF	; 255
    2b0a:	7f ef       	ldi	r23, 0xFF	; 255
    2b0c:	c6 01       	movw	r24, r12
    2b0e:	0e 94 08 19 	call	0x3210	; 0x3210 <strnlen_P>
    2b12:	4c 01       	movw	r8, r24
    2b14:	68 94       	set
    2b16:	37 f8       	bld	r3, 7
    2b18:	82 01       	movw	r16, r4
    2b1a:	0a c0       	rjmp	.+20     	; 0x2b30 <vfprintf+0x142>
    2b1c:	0c 5f       	subi	r16, 0xFC	; 252
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	ff e3       	ldi	r31, 0x3F	; 63
    2b22:	f9 83       	std	Y+1, r31	; 0x01
    2b24:	88 24       	eor	r8, r8
    2b26:	83 94       	inc	r8
    2b28:	91 2c       	mov	r9, r1
    2b2a:	65 01       	movw	r12, r10
    2b2c:	e8 94       	clt
    2b2e:	37 f8       	bld	r3, 7
    2b30:	33 fe       	sbrs	r3, 3
    2b32:	2d c0       	rjmp	.+90     	; 0x2b8e <vfprintf+0x1a0>
    2b34:	52 2c       	mov	r5, r2
    2b36:	81 14       	cp	r8, r1
    2b38:	91 04       	cpc	r9, r1
    2b3a:	71 f5       	brne	.+92     	; 0x2b98 <vfprintf+0x1aa>
    2b3c:	55 20       	and	r5, r5
    2b3e:	09 f4       	brne	.+2      	; 0x2b42 <vfprintf+0x154>
    2b40:	68 cf       	rjmp	.-304    	; 0x2a12 <vfprintf+0x24>
    2b42:	b7 01       	movw	r22, r14
    2b44:	80 e2       	ldi	r24, 0x20	; 32
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	0e 94 2e 19 	call	0x325c	; 0x325c <fputc>
    2b4c:	5a 94       	dec	r5
    2b4e:	f6 cf       	rjmp	.-20     	; 0x2b3c <vfprintf+0x14e>
    2b50:	f8 01       	movw	r30, r16
    2b52:	80 81       	ld	r24, Z
    2b54:	89 83       	std	Y+1, r24	; 0x01
    2b56:	0e 5f       	subi	r16, 0xFE	; 254
    2b58:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5a:	e4 cf       	rjmp	.-56     	; 0x2b24 <vfprintf+0x136>
    2b5c:	28 01       	movw	r4, r16
    2b5e:	f2 e0       	ldi	r31, 0x02	; 2
    2b60:	4f 0e       	add	r4, r31
    2b62:	51 1c       	adc	r5, r1
    2b64:	f8 01       	movw	r30, r16
    2b66:	c0 80       	ld	r12, Z
    2b68:	d1 80       	ldd	r13, Z+1	; 0x01
    2b6a:	69 2d       	mov	r22, r9
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	36 fc       	sbrc	r3, 6
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <vfprintf+0x188>
    2b72:	6f ef       	ldi	r22, 0xFF	; 255
    2b74:	7f ef       	ldi	r23, 0xFF	; 255
    2b76:	c6 01       	movw	r24, r12
    2b78:	0e 94 13 19 	call	0x3226	; 0x3226 <strnlen>
    2b7c:	4c 01       	movw	r8, r24
    2b7e:	82 01       	movw	r16, r4
    2b80:	d5 cf       	rjmp	.-86     	; 0x2b2c <vfprintf+0x13e>
    2b82:	b7 01       	movw	r22, r14
    2b84:	80 e2       	ldi	r24, 0x20	; 32
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	0e 94 2e 19 	call	0x325c	; 0x325c <fputc>
    2b8c:	2a 94       	dec	r2
    2b8e:	28 14       	cp	r2, r8
    2b90:	19 04       	cpc	r1, r9
    2b92:	09 f0       	breq	.+2      	; 0x2b96 <vfprintf+0x1a8>
    2b94:	b0 f7       	brcc	.-20     	; 0x2b82 <vfprintf+0x194>
    2b96:	ce cf       	rjmp	.-100    	; 0x2b34 <vfprintf+0x146>
    2b98:	f6 01       	movw	r30, r12
    2b9a:	37 fc       	sbrc	r3, 7
    2b9c:	85 91       	lpm	r24, Z+
    2b9e:	37 fe       	sbrs	r3, 7
    2ba0:	81 91       	ld	r24, Z+
    2ba2:	6f 01       	movw	r12, r30
    2ba4:	b7 01       	movw	r22, r14
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	0e 94 2e 19 	call	0x325c	; 0x325c <fputc>
    2bac:	51 10       	cpse	r5, r1
    2bae:	5a 94       	dec	r5
    2bb0:	f1 e0       	ldi	r31, 0x01	; 1
    2bb2:	8f 1a       	sub	r8, r31
    2bb4:	91 08       	sbc	r9, r1
    2bb6:	bf cf       	rjmp	.-130    	; 0x2b36 <vfprintf+0x148>
    2bb8:	84 36       	cpi	r24, 0x64	; 100
    2bba:	19 f0       	breq	.+6      	; 0x2bc2 <vfprintf+0x1d4>
    2bbc:	89 36       	cpi	r24, 0x69	; 105
    2bbe:	09 f0       	breq	.+2      	; 0x2bc2 <vfprintf+0x1d4>
    2bc0:	77 c0       	rjmp	.+238    	; 0x2cb0 <vfprintf+0x2c2>
    2bc2:	f8 01       	movw	r30, r16
    2bc4:	37 fe       	sbrs	r3, 7
    2bc6:	6b c0       	rjmp	.+214    	; 0x2c9e <vfprintf+0x2b0>
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	0c 5f       	subi	r16, 0xFC	; 252
    2bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd4:	f3 2d       	mov	r31, r3
    2bd6:	ff 76       	andi	r31, 0x6F	; 111
    2bd8:	3f 2e       	mov	r3, r31
    2bda:	97 ff       	sbrs	r25, 7
    2bdc:	09 c0       	rjmp	.+18     	; 0x2bf0 <vfprintf+0x202>
    2bde:	90 95       	com	r25
    2be0:	80 95       	com	r24
    2be2:	70 95       	com	r23
    2be4:	61 95       	neg	r22
    2be6:	7f 4f       	sbci	r23, 0xFF	; 255
    2be8:	8f 4f       	sbci	r24, 0xFF	; 255
    2bea:	9f 4f       	sbci	r25, 0xFF	; 255
    2bec:	68 94       	set
    2bee:	37 f8       	bld	r3, 7
    2bf0:	2a e0       	ldi	r18, 0x0A	; 10
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	a5 01       	movw	r20, r10
    2bf6:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__ultoa_invert>
    2bfa:	c8 2e       	mov	r12, r24
    2bfc:	ca 18       	sub	r12, r10
    2bfe:	8c 2c       	mov	r8, r12
    2c00:	43 2c       	mov	r4, r3
    2c02:	36 fe       	sbrs	r3, 6
    2c04:	0c c0       	rjmp	.+24     	; 0x2c1e <vfprintf+0x230>
    2c06:	e8 94       	clt
    2c08:	40 f8       	bld	r4, 0
    2c0a:	c9 14       	cp	r12, r9
    2c0c:	40 f4       	brcc	.+16     	; 0x2c1e <vfprintf+0x230>
    2c0e:	34 fe       	sbrs	r3, 4
    2c10:	05 c0       	rjmp	.+10     	; 0x2c1c <vfprintf+0x22e>
    2c12:	32 fc       	sbrc	r3, 2
    2c14:	03 c0       	rjmp	.+6      	; 0x2c1c <vfprintf+0x22e>
    2c16:	f3 2d       	mov	r31, r3
    2c18:	fe 7e       	andi	r31, 0xEE	; 238
    2c1a:	4f 2e       	mov	r4, r31
    2c1c:	89 2c       	mov	r8, r9
    2c1e:	44 fe       	sbrs	r4, 4
    2c20:	95 c0       	rjmp	.+298    	; 0x2d4c <vfprintf+0x35e>
    2c22:	fe 01       	movw	r30, r28
    2c24:	ec 0d       	add	r30, r12
    2c26:	f1 1d       	adc	r31, r1
    2c28:	80 81       	ld	r24, Z
    2c2a:	80 33       	cpi	r24, 0x30	; 48
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <vfprintf+0x242>
    2c2e:	87 c0       	rjmp	.+270    	; 0x2d3e <vfprintf+0x350>
    2c30:	24 2d       	mov	r18, r4
    2c32:	29 7e       	andi	r18, 0xE9	; 233
    2c34:	42 2e       	mov	r4, r18
    2c36:	84 2d       	mov	r24, r4
    2c38:	88 70       	andi	r24, 0x08	; 8
    2c3a:	58 2e       	mov	r5, r24
    2c3c:	43 fc       	sbrc	r4, 3
    2c3e:	95 c0       	rjmp	.+298    	; 0x2d6a <vfprintf+0x37c>
    2c40:	40 fe       	sbrs	r4, 0
    2c42:	8f c0       	rjmp	.+286    	; 0x2d62 <vfprintf+0x374>
    2c44:	9c 2c       	mov	r9, r12
    2c46:	82 14       	cp	r8, r2
    2c48:	18 f4       	brcc	.+6      	; 0x2c50 <vfprintf+0x262>
    2c4a:	2c 0c       	add	r2, r12
    2c4c:	92 2c       	mov	r9, r2
    2c4e:	98 18       	sub	r9, r8
    2c50:	44 fe       	sbrs	r4, 4
    2c52:	91 c0       	rjmp	.+290    	; 0x2d76 <vfprintf+0x388>
    2c54:	b7 01       	movw	r22, r14
    2c56:	80 e3       	ldi	r24, 0x30	; 48
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	0e 94 2e 19 	call	0x325c	; 0x325c <fputc>
    2c5e:	42 fe       	sbrs	r4, 2
    2c60:	09 c0       	rjmp	.+18     	; 0x2c74 <vfprintf+0x286>
    2c62:	88 e7       	ldi	r24, 0x78	; 120
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	41 fe       	sbrs	r4, 1
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <vfprintf+0x280>
    2c6a:	88 e5       	ldi	r24, 0x58	; 88
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	b7 01       	movw	r22, r14
    2c70:	0e 94 2e 19 	call	0x325c	; 0x325c <fputc>
    2c74:	c9 14       	cp	r12, r9
    2c76:	08 f4       	brcc	.+2      	; 0x2c7a <vfprintf+0x28c>
    2c78:	8a c0       	rjmp	.+276    	; 0x2d8e <vfprintf+0x3a0>
    2c7a:	ca 94       	dec	r12
    2c7c:	d1 2c       	mov	r13, r1
    2c7e:	9f ef       	ldi	r25, 0xFF	; 255
    2c80:	c9 1a       	sub	r12, r25
    2c82:	d9 0a       	sbc	r13, r25
    2c84:	ca 0c       	add	r12, r10
    2c86:	db 1c       	adc	r13, r11
    2c88:	f6 01       	movw	r30, r12
    2c8a:	82 91       	ld	r24, -Z
    2c8c:	6f 01       	movw	r12, r30
    2c8e:	b7 01       	movw	r22, r14
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	0e 94 2e 19 	call	0x325c	; 0x325c <fputc>
    2c96:	ac 14       	cp	r10, r12
    2c98:	bd 04       	cpc	r11, r13
    2c9a:	b1 f7       	brne	.-20     	; 0x2c88 <vfprintf+0x29a>
    2c9c:	4f cf       	rjmp	.-354    	; 0x2b3c <vfprintf+0x14e>
    2c9e:	60 81       	ld	r22, Z
    2ca0:	71 81       	ldd	r23, Z+1	; 0x01
    2ca2:	07 2e       	mov	r0, r23
    2ca4:	00 0c       	add	r0, r0
    2ca6:	88 0b       	sbc	r24, r24
    2ca8:	99 0b       	sbc	r25, r25
    2caa:	0e 5f       	subi	r16, 0xFE	; 254
    2cac:	1f 4f       	sbci	r17, 0xFF	; 255
    2cae:	92 cf       	rjmp	.-220    	; 0x2bd4 <vfprintf+0x1e6>
    2cb0:	d3 2c       	mov	r13, r3
    2cb2:	e8 94       	clt
    2cb4:	d4 f8       	bld	r13, 4
    2cb6:	2a e0       	ldi	r18, 0x0A	; 10
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	85 37       	cpi	r24, 0x75	; 117
    2cbc:	39 f1       	breq	.+78     	; 0x2d0c <vfprintf+0x31e>
    2cbe:	23 2d       	mov	r18, r3
    2cc0:	29 7f       	andi	r18, 0xF9	; 249
    2cc2:	d2 2e       	mov	r13, r18
    2cc4:	8f 36       	cpi	r24, 0x6F	; 111
    2cc6:	01 f1       	breq	.+64     	; 0x2d08 <vfprintf+0x31a>
    2cc8:	48 f4       	brcc	.+18     	; 0x2cdc <vfprintf+0x2ee>
    2cca:	88 35       	cpi	r24, 0x58	; 88
    2ccc:	a9 f0       	breq	.+42     	; 0x2cf8 <vfprintf+0x30a>
    2cce:	f7 01       	movw	r30, r14
    2cd0:	86 81       	ldd	r24, Z+6	; 0x06
    2cd2:	97 81       	ldd	r25, Z+7	; 0x07
    2cd4:	2b 96       	adiw	r28, 0x0b	; 11
    2cd6:	e2 e1       	ldi	r30, 0x12	; 18
    2cd8:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__epilogue_restores__>
    2cdc:	80 37       	cpi	r24, 0x70	; 112
    2cde:	49 f0       	breq	.+18     	; 0x2cf2 <vfprintf+0x304>
    2ce0:	88 37       	cpi	r24, 0x78	; 120
    2ce2:	a9 f7       	brne	.-22     	; 0x2cce <vfprintf+0x2e0>
    2ce4:	d4 fe       	sbrs	r13, 4
    2ce6:	02 c0       	rjmp	.+4      	; 0x2cec <vfprintf+0x2fe>
    2ce8:	68 94       	set
    2cea:	d2 f8       	bld	r13, 2
    2cec:	20 e1       	ldi	r18, 0x10	; 16
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	0d c0       	rjmp	.+26     	; 0x2d0c <vfprintf+0x31e>
    2cf2:	68 94       	set
    2cf4:	d4 f8       	bld	r13, 4
    2cf6:	f6 cf       	rjmp	.-20     	; 0x2ce4 <vfprintf+0x2f6>
    2cf8:	34 fe       	sbrs	r3, 4
    2cfa:	03 c0       	rjmp	.+6      	; 0x2d02 <vfprintf+0x314>
    2cfc:	82 2f       	mov	r24, r18
    2cfe:	86 60       	ori	r24, 0x06	; 6
    2d00:	d8 2e       	mov	r13, r24
    2d02:	20 e1       	ldi	r18, 0x10	; 16
    2d04:	32 e0       	ldi	r19, 0x02	; 2
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <vfprintf+0x31e>
    2d08:	28 e0       	ldi	r18, 0x08	; 8
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	f8 01       	movw	r30, r16
    2d0e:	d7 fe       	sbrs	r13, 7
    2d10:	0f c0       	rjmp	.+30     	; 0x2d30 <vfprintf+0x342>
    2d12:	60 81       	ld	r22, Z
    2d14:	71 81       	ldd	r23, Z+1	; 0x01
    2d16:	82 81       	ldd	r24, Z+2	; 0x02
    2d18:	93 81       	ldd	r25, Z+3	; 0x03
    2d1a:	0c 5f       	subi	r16, 0xFC	; 252
    2d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1e:	a5 01       	movw	r20, r10
    2d20:	0e 94 5e 19 	call	0x32bc	; 0x32bc <__ultoa_invert>
    2d24:	c8 2e       	mov	r12, r24
    2d26:	ca 18       	sub	r12, r10
    2d28:	3d 2c       	mov	r3, r13
    2d2a:	e8 94       	clt
    2d2c:	37 f8       	bld	r3, 7
    2d2e:	67 cf       	rjmp	.-306    	; 0x2bfe <vfprintf+0x210>
    2d30:	60 81       	ld	r22, Z
    2d32:	71 81       	ldd	r23, Z+1	; 0x01
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	0e 5f       	subi	r16, 0xFE	; 254
    2d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3c:	f0 cf       	rjmp	.-32     	; 0x2d1e <vfprintf+0x330>
    2d3e:	42 fc       	sbrc	r4, 2
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <vfprintf+0x358>
    2d42:	83 94       	inc	r8
    2d44:	78 cf       	rjmp	.-272    	; 0x2c36 <vfprintf+0x248>
    2d46:	83 94       	inc	r8
    2d48:	83 94       	inc	r8
    2d4a:	75 cf       	rjmp	.-278    	; 0x2c36 <vfprintf+0x248>
    2d4c:	84 2d       	mov	r24, r4
    2d4e:	86 78       	andi	r24, 0x86	; 134
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <vfprintf+0x366>
    2d52:	71 cf       	rjmp	.-286    	; 0x2c36 <vfprintf+0x248>
    2d54:	f6 cf       	rjmp	.-20     	; 0x2d42 <vfprintf+0x354>
    2d56:	b7 01       	movw	r22, r14
    2d58:	80 e2       	ldi	r24, 0x20	; 32
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	0e 94 2e 19 	call	0x325c	; 0x325c <fputc>
    2d60:	83 94       	inc	r8
    2d62:	82 14       	cp	r8, r2
    2d64:	c0 f3       	brcs	.-16     	; 0x2d56 <vfprintf+0x368>
    2d66:	51 2c       	mov	r5, r1
    2d68:	73 cf       	rjmp	.-282    	; 0x2c50 <vfprintf+0x262>
    2d6a:	52 2c       	mov	r5, r2
    2d6c:	58 18       	sub	r5, r8
    2d6e:	82 14       	cp	r8, r2
    2d70:	08 f4       	brcc	.+2      	; 0x2d74 <vfprintf+0x386>
    2d72:	6e cf       	rjmp	.-292    	; 0x2c50 <vfprintf+0x262>
    2d74:	f8 cf       	rjmp	.-16     	; 0x2d66 <vfprintf+0x378>
    2d76:	84 2d       	mov	r24, r4
    2d78:	86 78       	andi	r24, 0x86	; 134
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <vfprintf+0x390>
    2d7c:	7b cf       	rjmp	.-266    	; 0x2c74 <vfprintf+0x286>
    2d7e:	8b e2       	ldi	r24, 0x2B	; 43
    2d80:	41 fe       	sbrs	r4, 1
    2d82:	80 e2       	ldi	r24, 0x20	; 32
    2d84:	47 fc       	sbrc	r4, 7
    2d86:	8d e2       	ldi	r24, 0x2D	; 45
    2d88:	b7 01       	movw	r22, r14
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	71 cf       	rjmp	.-286    	; 0x2c70 <vfprintf+0x282>
    2d8e:	b7 01       	movw	r22, r14
    2d90:	80 e3       	ldi	r24, 0x30	; 48
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 2e 19 	call	0x325c	; 0x325c <fputc>
    2d98:	9a 94       	dec	r9
    2d9a:	6c cf       	rjmp	.-296    	; 0x2c74 <vfprintf+0x286>
    2d9c:	8f ef       	ldi	r24, 0xFF	; 255
    2d9e:	9f ef       	ldi	r25, 0xFF	; 255
    2da0:	99 cf       	rjmp	.-206    	; 0x2cd4 <vfprintf+0x2e6>

00002da2 <dtoa_prf>:
dtoa_prf():
    2da2:	a9 e0       	ldi	r26, 0x09	; 9
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e7 ed       	ldi	r30, 0xD7	; 215
    2da8:	f6 e1       	ldi	r31, 0x16	; 22
    2daa:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__prologue_saves__+0xc>
    2dae:	6a 01       	movw	r12, r20
    2db0:	f2 2e       	mov	r15, r18
    2db2:	b0 2e       	mov	r11, r16
    2db4:	10 2f       	mov	r17, r16
    2db6:	fb e3       	ldi	r31, 0x3B	; 59
    2db8:	af 2e       	mov	r10, r31
    2dba:	a0 16       	cp	r10, r16
    2dbc:	08 f4       	brcc	.+2      	; 0x2dc0 <dtoa_prf+0x1e>
    2dbe:	1b e3       	ldi	r17, 0x3B	; 59
    2dc0:	1f 5f       	subi	r17, 0xFF	; 255
    2dc2:	01 2f       	mov	r16, r17
    2dc4:	27 e0       	ldi	r18, 0x07	; 7
    2dc6:	ae 01       	movw	r20, r28
    2dc8:	4f 5f       	subi	r20, 0xFF	; 255
    2dca:	5f 4f       	sbci	r21, 0xFF	; 255
    2dcc:	0e 94 30 18 	call	0x3060	; 0x3060 <__ftoa_engine>
    2dd0:	bc 01       	movw	r22, r24
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	98 2f       	mov	r25, r24
    2dd6:	99 70       	andi	r25, 0x09	; 9
    2dd8:	91 30       	cpi	r25, 0x01	; 1
    2dda:	09 f4       	brne	.+2      	; 0x2dde <dtoa_prf+0x3c>
    2ddc:	3f c0       	rjmp	.+126    	; 0x2e5c <dtoa_prf+0xba>
    2dde:	9b e2       	ldi	r25, 0x2B	; 43
    2de0:	e1 fc       	sbrc	r14, 1
    2de2:	04 c0       	rjmp	.+8      	; 0x2dec <dtoa_prf+0x4a>
    2de4:	9e 2d       	mov	r25, r14
    2de6:	91 70       	andi	r25, 0x01	; 1
    2de8:	e0 fc       	sbrc	r14, 0
    2dea:	3a c0       	rjmp	.+116    	; 0x2e60 <dtoa_prf+0xbe>
    2dec:	5e 2d       	mov	r21, r14
    2dee:	50 71       	andi	r21, 0x10	; 16
    2df0:	e8 2f       	mov	r30, r24
    2df2:	e8 70       	andi	r30, 0x08	; 8
    2df4:	83 ff       	sbrs	r24, 3
    2df6:	46 c0       	rjmp	.+140    	; 0x2e84 <dtoa_prf+0xe2>
    2df8:	84 e0       	ldi	r24, 0x04	; 4
    2dfa:	91 11       	cpse	r25, r1
    2dfc:	01 c0       	rjmp	.+2      	; 0x2e00 <dtoa_prf+0x5e>
    2dfe:	83 e0       	ldi	r24, 0x03	; 3
    2e00:	ef 2d       	mov	r30, r15
    2e02:	e8 1b       	sub	r30, r24
    2e04:	8f 15       	cp	r24, r15
    2e06:	08 f0       	brcs	.+2      	; 0x2e0a <dtoa_prf+0x68>
    2e08:	e0 e0       	ldi	r30, 0x00	; 0
    2e0a:	d6 01       	movw	r26, r12
    2e0c:	8e 2f       	mov	r24, r30
    2e0e:	20 e2       	ldi	r18, 0x20	; 32
    2e10:	55 23       	and	r21, r21
    2e12:	51 f1       	breq	.+84     	; 0x2e68 <dtoa_prf+0xc6>
    2e14:	99 23       	and	r25, r25
    2e16:	29 f0       	breq	.+10     	; 0x2e22 <dtoa_prf+0x80>
    2e18:	d6 01       	movw	r26, r12
    2e1a:	9c 93       	st	X, r25
    2e1c:	c6 01       	movw	r24, r12
    2e1e:	01 96       	adiw	r24, 0x01	; 1
    2e20:	6c 01       	movw	r12, r24
    2e22:	96 01       	movw	r18, r12
    2e24:	2d 5f       	subi	r18, 0xFD	; 253
    2e26:	3f 4f       	sbci	r19, 0xFF	; 255
    2e28:	e2 fe       	sbrs	r14, 2
    2e2a:	24 c0       	rjmp	.+72     	; 0x2e74 <dtoa_prf+0xd2>
    2e2c:	8e e4       	ldi	r24, 0x4E	; 78
    2e2e:	d6 01       	movw	r26, r12
    2e30:	8c 93       	st	X, r24
    2e32:	91 e4       	ldi	r25, 0x41	; 65
    2e34:	11 96       	adiw	r26, 0x01	; 1
    2e36:	9c 93       	st	X, r25
    2e38:	11 97       	sbiw	r26, 0x01	; 1
    2e3a:	12 96       	adiw	r26, 0x02	; 2
    2e3c:	8c 93       	st	X, r24
    2e3e:	d9 01       	movw	r26, r18
    2e40:	8e 2f       	mov	r24, r30
    2e42:	90 e2       	ldi	r25, 0x20	; 32
    2e44:	81 11       	cpse	r24, r1
    2e46:	1b c0       	rjmp	.+54     	; 0x2e7e <dtoa_prf+0xdc>
    2e48:	e2 0f       	add	r30, r18
    2e4a:	f3 2f       	mov	r31, r19
    2e4c:	f1 1d       	adc	r31, r1
    2e4e:	10 82       	st	Z, r1
    2e50:	8e ef       	ldi	r24, 0xFE	; 254
    2e52:	9f ef       	ldi	r25, 0xFF	; 255
    2e54:	29 96       	adiw	r28, 0x09	; 9
    2e56:	ec e0       	ldi	r30, 0x0C	; 12
    2e58:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <__epilogue_restores__+0xc>
    2e5c:	9d e2       	ldi	r25, 0x2D	; 45
    2e5e:	c6 cf       	rjmp	.-116    	; 0x2dec <dtoa_prf+0x4a>
    2e60:	90 e2       	ldi	r25, 0x20	; 32
    2e62:	c4 cf       	rjmp	.-120    	; 0x2dec <dtoa_prf+0x4a>
    2e64:	2d 93       	st	X+, r18
    2e66:	81 50       	subi	r24, 0x01	; 1
    2e68:	81 11       	cpse	r24, r1
    2e6a:	fc cf       	rjmp	.-8      	; 0x2e64 <dtoa_prf+0xc2>
    2e6c:	ce 0e       	add	r12, r30
    2e6e:	d1 1c       	adc	r13, r1
    2e70:	e0 e0       	ldi	r30, 0x00	; 0
    2e72:	d0 cf       	rjmp	.-96     	; 0x2e14 <dtoa_prf+0x72>
    2e74:	8e e6       	ldi	r24, 0x6E	; 110
    2e76:	d6 01       	movw	r26, r12
    2e78:	8c 93       	st	X, r24
    2e7a:	91 e6       	ldi	r25, 0x61	; 97
    2e7c:	db cf       	rjmp	.-74     	; 0x2e34 <dtoa_prf+0x92>
    2e7e:	9d 93       	st	X+, r25
    2e80:	81 50       	subi	r24, 0x01	; 1
    2e82:	e0 cf       	rjmp	.-64     	; 0x2e44 <dtoa_prf+0xa2>
    2e84:	48 2f       	mov	r20, r24
    2e86:	44 70       	andi	r20, 0x04	; 4
    2e88:	82 ff       	sbrs	r24, 2
    2e8a:	3d c0       	rjmp	.+122    	; 0x2f06 <dtoa_prf+0x164>
    2e8c:	84 e0       	ldi	r24, 0x04	; 4
    2e8e:	91 11       	cpse	r25, r1
    2e90:	01 c0       	rjmp	.+2      	; 0x2e94 <dtoa_prf+0xf2>
    2e92:	83 e0       	ldi	r24, 0x03	; 3
    2e94:	8f 15       	cp	r24, r15
    2e96:	10 f4       	brcc	.+4      	; 0x2e9c <dtoa_prf+0xfa>
    2e98:	ef 2d       	mov	r30, r15
    2e9a:	e8 1b       	sub	r30, r24
    2e9c:	d6 01       	movw	r26, r12
    2e9e:	8e 2f       	mov	r24, r30
    2ea0:	20 e2       	ldi	r18, 0x20	; 32
    2ea2:	55 23       	and	r21, r21
    2ea4:	09 f1       	breq	.+66     	; 0x2ee8 <dtoa_prf+0x146>
    2ea6:	99 23       	and	r25, r25
    2ea8:	29 f0       	breq	.+10     	; 0x2eb4 <dtoa_prf+0x112>
    2eaa:	d6 01       	movw	r26, r12
    2eac:	9c 93       	st	X, r25
    2eae:	c6 01       	movw	r24, r12
    2eb0:	01 96       	adiw	r24, 0x01	; 1
    2eb2:	6c 01       	movw	r12, r24
    2eb4:	96 01       	movw	r18, r12
    2eb6:	2d 5f       	subi	r18, 0xFD	; 253
    2eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eba:	e2 fe       	sbrs	r14, 2
    2ebc:	1b c0       	rjmp	.+54     	; 0x2ef4 <dtoa_prf+0x152>
    2ebe:	89 e4       	ldi	r24, 0x49	; 73
    2ec0:	d6 01       	movw	r26, r12
    2ec2:	8c 93       	st	X, r24
    2ec4:	8e e4       	ldi	r24, 0x4E	; 78
    2ec6:	11 96       	adiw	r26, 0x01	; 1
    2ec8:	8c 93       	st	X, r24
    2eca:	11 97       	sbiw	r26, 0x01	; 1
    2ecc:	86 e4       	ldi	r24, 0x46	; 70
    2ece:	12 96       	adiw	r26, 0x02	; 2
    2ed0:	8c 93       	st	X, r24
    2ed2:	d9 01       	movw	r26, r18
    2ed4:	8e 2f       	mov	r24, r30
    2ed6:	90 e2       	ldi	r25, 0x20	; 32
    2ed8:	88 23       	and	r24, r24
    2eda:	09 f4       	brne	.+2      	; 0x2ede <dtoa_prf+0x13c>
    2edc:	b5 cf       	rjmp	.-150    	; 0x2e48 <dtoa_prf+0xa6>
    2ede:	9d 93       	st	X+, r25
    2ee0:	81 50       	subi	r24, 0x01	; 1
    2ee2:	fa cf       	rjmp	.-12     	; 0x2ed8 <dtoa_prf+0x136>
    2ee4:	2d 93       	st	X+, r18
    2ee6:	81 50       	subi	r24, 0x01	; 1
    2ee8:	81 11       	cpse	r24, r1
    2eea:	fc cf       	rjmp	.-8      	; 0x2ee4 <dtoa_prf+0x142>
    2eec:	ce 0e       	add	r12, r30
    2eee:	d1 1c       	adc	r13, r1
    2ef0:	e0 e0       	ldi	r30, 0x00	; 0
    2ef2:	d9 cf       	rjmp	.-78     	; 0x2ea6 <dtoa_prf+0x104>
    2ef4:	89 e6       	ldi	r24, 0x69	; 105
    2ef6:	d6 01       	movw	r26, r12
    2ef8:	8c 93       	st	X, r24
    2efa:	8e e6       	ldi	r24, 0x6E	; 110
    2efc:	11 96       	adiw	r26, 0x01	; 1
    2efe:	8c 93       	st	X, r24
    2f00:	11 97       	sbiw	r26, 0x01	; 1
    2f02:	86 e6       	ldi	r24, 0x66	; 102
    2f04:	e4 cf       	rjmp	.-56     	; 0x2ece <dtoa_prf+0x12c>
    2f06:	9b 01       	movw	r18, r22
    2f08:	77 ff       	sbrs	r23, 7
    2f0a:	02 c0       	rjmp	.+4      	; 0x2f10 <dtoa_prf+0x16e>
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	a1 e0       	ldi	r26, 0x01	; 1
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	91 11       	cpse	r25, r1
    2f16:	02 c0       	rjmp	.+4      	; 0x2f1c <dtoa_prf+0x17a>
    2f18:	b0 e0       	ldi	r27, 0x00	; 0
    2f1a:	a0 e0       	ldi	r26, 0x00	; 0
    2f1c:	f9 01       	movw	r30, r18
    2f1e:	31 96       	adiw	r30, 0x01	; 1
    2f20:	ae 0f       	add	r26, r30
    2f22:	bf 1f       	adc	r27, r31
    2f24:	8b 2c       	mov	r8, r11
    2f26:	91 2c       	mov	r9, r1
    2f28:	bb 20       	and	r11, r11
    2f2a:	09 f4       	brne	.+2      	; 0x2f2e <dtoa_prf+0x18c>
    2f2c:	61 c0       	rjmp	.+194    	; 0x2ff0 <dtoa_prf+0x24e>
    2f2e:	54 01       	movw	r10, r8
    2f30:	ef ef       	ldi	r30, 0xFF	; 255
    2f32:	ae 1a       	sub	r10, r30
    2f34:	be 0a       	sbc	r11, r30
    2f36:	aa 0d       	add	r26, r10
    2f38:	bb 1d       	adc	r27, r11
    2f3a:	fa 16       	cp	r15, r26
    2f3c:	1b 06       	cpc	r1, r27
    2f3e:	19 f0       	breq	.+6      	; 0x2f46 <dtoa_prf+0x1a4>
    2f40:	14 f0       	brlt	.+4      	; 0x2f46 <dtoa_prf+0x1a4>
    2f42:	4f 2d       	mov	r20, r15
    2f44:	4a 1b       	sub	r20, r26
    2f46:	51 11       	cpse	r21, r1
    2f48:	88 c0       	rjmp	.+272    	; 0x305a <dtoa_prf+0x2b8>
    2f4a:	e3 fc       	sbrc	r14, 3
    2f4c:	59 c0       	rjmp	.+178    	; 0x3000 <dtoa_prf+0x25e>
    2f4e:	76 01       	movw	r14, r12
    2f50:	a4 2f       	mov	r26, r20
    2f52:	b0 e2       	ldi	r27, 0x20	; 32
    2f54:	a1 11       	cpse	r26, r1
    2f56:	4f c0       	rjmp	.+158    	; 0x2ff6 <dtoa_prf+0x254>
    2f58:	c4 0e       	add	r12, r20
    2f5a:	d1 1c       	adc	r13, r1
    2f5c:	99 23       	and	r25, r25
    2f5e:	09 f4       	brne	.+2      	; 0x2f62 <dtoa_prf+0x1c0>
    2f60:	5b c0       	rjmp	.+182    	; 0x3018 <dtoa_prf+0x276>
    2f62:	40 e0       	ldi	r20, 0x00	; 0
    2f64:	d6 01       	movw	r26, r12
    2f66:	11 96       	adiw	r26, 0x01	; 1
    2f68:	f6 01       	movw	r30, r12
    2f6a:	90 83       	st	Z, r25
    2f6c:	6d 01       	movw	r12, r26
    2f6e:	55 23       	and	r21, r21
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <dtoa_prf+0x1d2>
    2f72:	48 c0       	rjmp	.+144    	; 0x3004 <dtoa_prf+0x262>
    2f74:	01 2f       	mov	r16, r17
    2f76:	06 0f       	add	r16, r22
    2f78:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7a:	58 2f       	mov	r21, r24
    2f7c:	50 71       	andi	r21, 0x10	; 16
    2f7e:	84 ff       	sbrs	r24, 4
    2f80:	03 c0       	rjmp	.+6      	; 0x2f88 <dtoa_prf+0x1e6>
    2f82:	91 33       	cpi	r25, 0x31	; 49
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <dtoa_prf+0x1e6>
    2f86:	01 50       	subi	r16, 0x01	; 1
    2f88:	10 16       	cp	r1, r16
    2f8a:	0c f0       	brlt	.+2      	; 0x2f8e <dtoa_prf+0x1ec>
    2f8c:	47 c0       	rjmp	.+142    	; 0x301c <dtoa_prf+0x27a>
    2f8e:	09 30       	cpi	r16, 0x09	; 9
    2f90:	08 f0       	brcs	.+2      	; 0x2f94 <dtoa_prf+0x1f2>
    2f92:	08 e0       	ldi	r16, 0x08	; 8
    2f94:	ee e2       	ldi	r30, 0x2E	; 46
    2f96:	fe 2e       	mov	r15, r30
    2f98:	5b 01       	movw	r10, r22
    2f9a:	a0 1a       	sub	r10, r16
    2f9c:	b1 08       	sbc	r11, r1
    2f9e:	85 01       	movw	r16, r10
    2fa0:	91 94       	neg	r9
    2fa2:	81 94       	neg	r8
    2fa4:	91 08       	sbc	r9, r1
    2fa6:	2f 3f       	cpi	r18, 0xFF	; 255
    2fa8:	32 07       	cpc	r19, r18
    2faa:	29 f4       	brne	.+10     	; 0x2fb6 <dtoa_prf+0x214>
    2fac:	d6 01       	movw	r26, r12
    2fae:	fc 92       	st	X, r15
    2fb0:	f6 01       	movw	r30, r12
    2fb2:	31 96       	adiw	r30, 0x01	; 1
    2fb4:	6f 01       	movw	r12, r30
    2fb6:	62 17       	cp	r22, r18
    2fb8:	73 07       	cpc	r23, r19
    2fba:	94 f1       	brlt	.+100    	; 0x3020 <dtoa_prf+0x27e>
    2fbc:	02 17       	cp	r16, r18
    2fbe:	13 07       	cpc	r17, r19
    2fc0:	7c f5       	brge	.+94     	; 0x3020 <dtoa_prf+0x27e>
    2fc2:	db 01       	movw	r26, r22
    2fc4:	a2 1b       	sub	r26, r18
    2fc6:	b3 0b       	sbc	r27, r19
    2fc8:	aa 24       	eor	r10, r10
    2fca:	a3 94       	inc	r10
    2fcc:	b1 2c       	mov	r11, r1
    2fce:	ac 0e       	add	r10, r28
    2fd0:	bd 1e       	adc	r11, r29
    2fd2:	aa 0d       	add	r26, r10
    2fd4:	bb 1d       	adc	r27, r11
    2fd6:	11 96       	adiw	r26, 0x01	; 1
    2fd8:	8c 91       	ld	r24, X
    2fda:	21 50       	subi	r18, 0x01	; 1
    2fdc:	31 09       	sbc	r19, r1
    2fde:	d6 01       	movw	r26, r12
    2fe0:	11 96       	adiw	r26, 0x01	; 1
    2fe2:	28 15       	cp	r18, r8
    2fe4:	39 05       	cpc	r19, r9
    2fe6:	f4 f0       	brlt	.+60     	; 0x3024 <dtoa_prf+0x282>
    2fe8:	f6 01       	movw	r30, r12
    2fea:	80 83       	st	Z, r24
    2fec:	6d 01       	movw	r12, r26
    2fee:	db cf       	rjmp	.-74     	; 0x2fa6 <dtoa_prf+0x204>
    2ff0:	b1 2c       	mov	r11, r1
    2ff2:	a1 2c       	mov	r10, r1
    2ff4:	a0 cf       	rjmp	.-192    	; 0x2f36 <dtoa_prf+0x194>
    2ff6:	f7 01       	movw	r30, r14
    2ff8:	b1 93       	st	Z+, r27
    2ffa:	7f 01       	movw	r14, r30
    2ffc:	a1 50       	subi	r26, 0x01	; 1
    2ffe:	aa cf       	rjmp	.-172    	; 0x2f54 <dtoa_prf+0x1b2>
    3000:	91 11       	cpse	r25, r1
    3002:	b0 cf       	rjmp	.-160    	; 0x2f64 <dtoa_prf+0x1c2>
    3004:	d6 01       	movw	r26, r12
    3006:	94 2f       	mov	r25, r20
    3008:	50 e3       	ldi	r21, 0x30	; 48
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <dtoa_prf+0x26e>
    300c:	5d 93       	st	X+, r21
    300e:	91 50       	subi	r25, 0x01	; 1
    3010:	91 11       	cpse	r25, r1
    3012:	fc cf       	rjmp	.-8      	; 0x300c <dtoa_prf+0x26a>
    3014:	c4 0e       	add	r12, r20
    3016:	d1 1c       	adc	r13, r1
    3018:	40 e0       	ldi	r20, 0x00	; 0
    301a:	ac cf       	rjmp	.-168    	; 0x2f74 <dtoa_prf+0x1d2>
    301c:	01 e0       	ldi	r16, 0x01	; 1
    301e:	ba cf       	rjmp	.-140    	; 0x2f94 <dtoa_prf+0x1f2>
    3020:	80 e3       	ldi	r24, 0x30	; 48
    3022:	db cf       	rjmp	.-74     	; 0x2fda <dtoa_prf+0x238>
    3024:	62 17       	cp	r22, r18
    3026:	73 07       	cpc	r23, r19
    3028:	31 f4       	brne	.+12     	; 0x3036 <dtoa_prf+0x294>
    302a:	96 33       	cpi	r25, 0x36	; 54
    302c:	88 f4       	brcc	.+34     	; 0x3050 <dtoa_prf+0x2ae>
    302e:	95 33       	cpi	r25, 0x35	; 53
    3030:	11 f4       	brne	.+4      	; 0x3036 <dtoa_prf+0x294>
    3032:	55 23       	and	r21, r21
    3034:	69 f0       	breq	.+26     	; 0x3050 <dtoa_prf+0x2ae>
    3036:	f6 01       	movw	r30, r12
    3038:	80 83       	st	Z, r24
    303a:	fd 01       	movw	r30, r26
    303c:	84 2f       	mov	r24, r20
    303e:	90 e2       	ldi	r25, 0x20	; 32
    3040:	81 11       	cpse	r24, r1
    3042:	08 c0       	rjmp	.+16     	; 0x3054 <dtoa_prf+0x2b2>
    3044:	a4 0f       	add	r26, r20
    3046:	b1 1d       	adc	r27, r1
    3048:	1c 92       	st	X, r1
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	02 cf       	rjmp	.-508    	; 0x2e54 <dtoa_prf+0xb2>
    3050:	81 e3       	ldi	r24, 0x31	; 49
    3052:	f1 cf       	rjmp	.-30     	; 0x3036 <dtoa_prf+0x294>
    3054:	91 93       	st	Z+, r25
    3056:	81 50       	subi	r24, 0x01	; 1
    3058:	f3 cf       	rjmp	.-26     	; 0x3040 <dtoa_prf+0x29e>
    305a:	91 11       	cpse	r25, r1
    305c:	83 cf       	rjmp	.-250    	; 0x2f64 <dtoa_prf+0x1c2>
    305e:	8a cf       	rjmp	.-236    	; 0x2f74 <dtoa_prf+0x1d2>

00003060 <__ftoa_engine>:
__ftoa_engine():
    3060:	28 30       	cpi	r18, 0x08	; 8
    3062:	08 f0       	brcs	.+2      	; 0x3066 <__ftoa_engine+0x6>
    3064:	27 e0       	ldi	r18, 0x07	; 7
    3066:	33 27       	eor	r19, r19
    3068:	da 01       	movw	r26, r20
    306a:	99 0f       	add	r25, r25
    306c:	31 1d       	adc	r19, r1
    306e:	87 fd       	sbrc	r24, 7
    3070:	91 60       	ori	r25, 0x01	; 1
    3072:	00 96       	adiw	r24, 0x00	; 0
    3074:	61 05       	cpc	r22, r1
    3076:	71 05       	cpc	r23, r1
    3078:	39 f4       	brne	.+14     	; 0x3088 <__ftoa_engine+0x28>
    307a:	32 60       	ori	r19, 0x02	; 2
    307c:	2e 5f       	subi	r18, 0xFE	; 254
    307e:	3d 93       	st	X+, r19
    3080:	30 e3       	ldi	r19, 0x30	; 48
    3082:	2a 95       	dec	r18
    3084:	e1 f7       	brne	.-8      	; 0x307e <__ftoa_engine+0x1e>
    3086:	08 95       	ret
    3088:	9f 3f       	cpi	r25, 0xFF	; 255
    308a:	30 f0       	brcs	.+12     	; 0x3098 <__ftoa_engine+0x38>
    308c:	80 38       	cpi	r24, 0x80	; 128
    308e:	71 05       	cpc	r23, r1
    3090:	61 05       	cpc	r22, r1
    3092:	09 f0       	breq	.+2      	; 0x3096 <__ftoa_engine+0x36>
    3094:	3c 5f       	subi	r19, 0xFC	; 252
    3096:	3c 5f       	subi	r19, 0xFC	; 252
    3098:	3d 93       	st	X+, r19
    309a:	91 30       	cpi	r25, 0x01	; 1
    309c:	08 f0       	brcs	.+2      	; 0x30a0 <__ftoa_engine+0x40>
    309e:	80 68       	ori	r24, 0x80	; 128
    30a0:	91 1d       	adc	r25, r1
    30a2:	df 93       	push	r29
    30a4:	cf 93       	push	r28
    30a6:	1f 93       	push	r17
    30a8:	0f 93       	push	r16
    30aa:	ff 92       	push	r15
    30ac:	ef 92       	push	r14
    30ae:	19 2f       	mov	r17, r25
    30b0:	98 7f       	andi	r25, 0xF8	; 248
    30b2:	96 95       	lsr	r25
    30b4:	e9 2f       	mov	r30, r25
    30b6:	96 95       	lsr	r25
    30b8:	96 95       	lsr	r25
    30ba:	e9 0f       	add	r30, r25
    30bc:	ff 27       	eor	r31, r31
    30be:	ee 53       	subi	r30, 0x3E	; 62
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	99 27       	eor	r25, r25
    30c4:	33 27       	eor	r19, r19
    30c6:	ee 24       	eor	r14, r14
    30c8:	ff 24       	eor	r15, r15
    30ca:	a7 01       	movw	r20, r14
    30cc:	e7 01       	movw	r28, r14
    30ce:	05 90       	lpm	r0, Z+
    30d0:	08 94       	sec
    30d2:	07 94       	ror	r0
    30d4:	28 f4       	brcc	.+10     	; 0x30e0 <__ftoa_engine+0x80>
    30d6:	36 0f       	add	r19, r22
    30d8:	e7 1e       	adc	r14, r23
    30da:	f8 1e       	adc	r15, r24
    30dc:	49 1f       	adc	r20, r25
    30de:	51 1d       	adc	r21, r1
    30e0:	66 0f       	add	r22, r22
    30e2:	77 1f       	adc	r23, r23
    30e4:	88 1f       	adc	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	06 94       	lsr	r0
    30ea:	a1 f7       	brne	.-24     	; 0x30d4 <__ftoa_engine+0x74>
    30ec:	05 90       	lpm	r0, Z+
    30ee:	07 94       	ror	r0
    30f0:	28 f4       	brcc	.+10     	; 0x30fc <__ftoa_engine+0x9c>
    30f2:	e7 0e       	add	r14, r23
    30f4:	f8 1e       	adc	r15, r24
    30f6:	49 1f       	adc	r20, r25
    30f8:	56 1f       	adc	r21, r22
    30fa:	c1 1d       	adc	r28, r1
    30fc:	77 0f       	add	r23, r23
    30fe:	88 1f       	adc	r24, r24
    3100:	99 1f       	adc	r25, r25
    3102:	66 1f       	adc	r22, r22
    3104:	06 94       	lsr	r0
    3106:	a1 f7       	brne	.-24     	; 0x30f0 <__ftoa_engine+0x90>
    3108:	05 90       	lpm	r0, Z+
    310a:	07 94       	ror	r0
    310c:	28 f4       	brcc	.+10     	; 0x3118 <__ftoa_engine+0xb8>
    310e:	f8 0e       	add	r15, r24
    3110:	49 1f       	adc	r20, r25
    3112:	56 1f       	adc	r21, r22
    3114:	c7 1f       	adc	r28, r23
    3116:	d1 1d       	adc	r29, r1
    3118:	88 0f       	add	r24, r24
    311a:	99 1f       	adc	r25, r25
    311c:	66 1f       	adc	r22, r22
    311e:	77 1f       	adc	r23, r23
    3120:	06 94       	lsr	r0
    3122:	a1 f7       	brne	.-24     	; 0x310c <__ftoa_engine+0xac>
    3124:	05 90       	lpm	r0, Z+
    3126:	07 94       	ror	r0
    3128:	20 f4       	brcc	.+8      	; 0x3132 <__ftoa_engine+0xd2>
    312a:	49 0f       	add	r20, r25
    312c:	56 1f       	adc	r21, r22
    312e:	c7 1f       	adc	r28, r23
    3130:	d8 1f       	adc	r29, r24
    3132:	99 0f       	add	r25, r25
    3134:	66 1f       	adc	r22, r22
    3136:	77 1f       	adc	r23, r23
    3138:	88 1f       	adc	r24, r24
    313a:	06 94       	lsr	r0
    313c:	a9 f7       	brne	.-22     	; 0x3128 <__ftoa_engine+0xc8>
    313e:	84 91       	lpm	r24, Z
    3140:	10 95       	com	r17
    3142:	17 70       	andi	r17, 0x07	; 7
    3144:	41 f0       	breq	.+16     	; 0x3156 <__ftoa_engine+0xf6>
    3146:	d6 95       	lsr	r29
    3148:	c7 95       	ror	r28
    314a:	57 95       	ror	r21
    314c:	47 95       	ror	r20
    314e:	f7 94       	ror	r15
    3150:	e7 94       	ror	r14
    3152:	1a 95       	dec	r17
    3154:	c1 f7       	brne	.-16     	; 0x3146 <__ftoa_engine+0xe6>
    3156:	e8 e6       	ldi	r30, 0x68	; 104
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	68 94       	set
    315c:	15 90       	lpm	r1, Z+
    315e:	15 91       	lpm	r17, Z+
    3160:	35 91       	lpm	r19, Z+
    3162:	65 91       	lpm	r22, Z+
    3164:	95 91       	lpm	r25, Z+
    3166:	05 90       	lpm	r0, Z+
    3168:	7f e2       	ldi	r23, 0x2F	; 47
    316a:	73 95       	inc	r23
    316c:	e1 18       	sub	r14, r1
    316e:	f1 0a       	sbc	r15, r17
    3170:	43 0b       	sbc	r20, r19
    3172:	56 0b       	sbc	r21, r22
    3174:	c9 0b       	sbc	r28, r25
    3176:	d0 09       	sbc	r29, r0
    3178:	c0 f7       	brcc	.-16     	; 0x316a <__ftoa_engine+0x10a>
    317a:	e1 0c       	add	r14, r1
    317c:	f1 1e       	adc	r15, r17
    317e:	43 1f       	adc	r20, r19
    3180:	56 1f       	adc	r21, r22
    3182:	c9 1f       	adc	r28, r25
    3184:	d0 1d       	adc	r29, r0
    3186:	7e f4       	brtc	.+30     	; 0x31a6 <__ftoa_engine+0x146>
    3188:	70 33       	cpi	r23, 0x30	; 48
    318a:	11 f4       	brne	.+4      	; 0x3190 <__ftoa_engine+0x130>
    318c:	8a 95       	dec	r24
    318e:	e6 cf       	rjmp	.-52     	; 0x315c <__ftoa_engine+0xfc>
    3190:	e8 94       	clt
    3192:	01 50       	subi	r16, 0x01	; 1
    3194:	30 f0       	brcs	.+12     	; 0x31a2 <__ftoa_engine+0x142>
    3196:	08 0f       	add	r16, r24
    3198:	0a f4       	brpl	.+2      	; 0x319c <__ftoa_engine+0x13c>
    319a:	00 27       	eor	r16, r16
    319c:	02 17       	cp	r16, r18
    319e:	08 f4       	brcc	.+2      	; 0x31a2 <__ftoa_engine+0x142>
    31a0:	20 2f       	mov	r18, r16
    31a2:	23 95       	inc	r18
    31a4:	02 2f       	mov	r16, r18
    31a6:	7a 33       	cpi	r23, 0x3A	; 58
    31a8:	28 f0       	brcs	.+10     	; 0x31b4 <__ftoa_engine+0x154>
    31aa:	79 e3       	ldi	r23, 0x39	; 57
    31ac:	7d 93       	st	X+, r23
    31ae:	2a 95       	dec	r18
    31b0:	e9 f7       	brne	.-6      	; 0x31ac <__ftoa_engine+0x14c>
    31b2:	10 c0       	rjmp	.+32     	; 0x31d4 <__ftoa_engine+0x174>
    31b4:	7d 93       	st	X+, r23
    31b6:	2a 95       	dec	r18
    31b8:	89 f6       	brne	.-94     	; 0x315c <__ftoa_engine+0xfc>
    31ba:	06 94       	lsr	r0
    31bc:	97 95       	ror	r25
    31be:	67 95       	ror	r22
    31c0:	37 95       	ror	r19
    31c2:	17 95       	ror	r17
    31c4:	17 94       	ror	r1
    31c6:	e1 18       	sub	r14, r1
    31c8:	f1 0a       	sbc	r15, r17
    31ca:	43 0b       	sbc	r20, r19
    31cc:	56 0b       	sbc	r21, r22
    31ce:	c9 0b       	sbc	r28, r25
    31d0:	d0 09       	sbc	r29, r0
    31d2:	98 f0       	brcs	.+38     	; 0x31fa <__ftoa_engine+0x19a>
    31d4:	23 95       	inc	r18
    31d6:	7e 91       	ld	r23, -X
    31d8:	73 95       	inc	r23
    31da:	7a 33       	cpi	r23, 0x3A	; 58
    31dc:	08 f0       	brcs	.+2      	; 0x31e0 <__ftoa_engine+0x180>
    31de:	70 e3       	ldi	r23, 0x30	; 48
    31e0:	7c 93       	st	X, r23
    31e2:	20 13       	cpse	r18, r16
    31e4:	b8 f7       	brcc	.-18     	; 0x31d4 <__ftoa_engine+0x174>
    31e6:	7e 91       	ld	r23, -X
    31e8:	70 61       	ori	r23, 0x10	; 16
    31ea:	7d 93       	st	X+, r23
    31ec:	30 f0       	brcs	.+12     	; 0x31fa <__ftoa_engine+0x19a>
    31ee:	83 95       	inc	r24
    31f0:	71 e3       	ldi	r23, 0x31	; 49
    31f2:	7d 93       	st	X+, r23
    31f4:	70 e3       	ldi	r23, 0x30	; 48
    31f6:	2a 95       	dec	r18
    31f8:	e1 f7       	brne	.-8      	; 0x31f2 <__ftoa_engine+0x192>
    31fa:	11 24       	eor	r1, r1
    31fc:	ef 90       	pop	r14
    31fe:	ff 90       	pop	r15
    3200:	0f 91       	pop	r16
    3202:	1f 91       	pop	r17
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	99 27       	eor	r25, r25
    320a:	87 fd       	sbrc	r24, 7
    320c:	90 95       	com	r25
    320e:	08 95       	ret

00003210 <strnlen_P>:
strnlen_P():
    3210:	fc 01       	movw	r30, r24
    3212:	05 90       	lpm	r0, Z+
    3214:	61 50       	subi	r22, 0x01	; 1
    3216:	70 40       	sbci	r23, 0x00	; 0
    3218:	01 10       	cpse	r0, r1
    321a:	d8 f7       	brcc	.-10     	; 0x3212 <strnlen_P+0x2>
    321c:	80 95       	com	r24
    321e:	90 95       	com	r25
    3220:	8e 0f       	add	r24, r30
    3222:	9f 1f       	adc	r25, r31
    3224:	08 95       	ret

00003226 <strnlen>:
strnlen():
    3226:	fc 01       	movw	r30, r24
    3228:	61 50       	subi	r22, 0x01	; 1
    322a:	70 40       	sbci	r23, 0x00	; 0
    322c:	01 90       	ld	r0, Z+
    322e:	01 10       	cpse	r0, r1
    3230:	d8 f7       	brcc	.-10     	; 0x3228 <strnlen+0x2>
    3232:	80 95       	com	r24
    3234:	90 95       	com	r25
    3236:	8e 0f       	add	r24, r30
    3238:	9f 1f       	adc	r25, r31
    323a:	08 95       	ret

0000323c <strrev>:
strrev():
    323c:	dc 01       	movw	r26, r24
    323e:	fc 01       	movw	r30, r24
    3240:	67 2f       	mov	r22, r23
    3242:	71 91       	ld	r23, Z+
    3244:	77 23       	and	r23, r23
    3246:	e1 f7       	brne	.-8      	; 0x3240 <strrev+0x4>
    3248:	32 97       	sbiw	r30, 0x02	; 2
    324a:	04 c0       	rjmp	.+8      	; 0x3254 <strrev+0x18>
    324c:	7c 91       	ld	r23, X
    324e:	6d 93       	st	X+, r22
    3250:	70 83       	st	Z, r23
    3252:	62 91       	ld	r22, -Z
    3254:	ae 17       	cp	r26, r30
    3256:	bf 07       	cpc	r27, r31
    3258:	c8 f3       	brcs	.-14     	; 0x324c <strrev+0x10>
    325a:	08 95       	ret

0000325c <fputc>:
fputc():
    325c:	0f 93       	push	r16
    325e:	1f 93       	push	r17
    3260:	cf 93       	push	r28
    3262:	df 93       	push	r29
    3264:	18 2f       	mov	r17, r24
    3266:	09 2f       	mov	r16, r25
    3268:	eb 01       	movw	r28, r22
    326a:	8b 81       	ldd	r24, Y+3	; 0x03
    326c:	81 fd       	sbrc	r24, 1
    326e:	09 c0       	rjmp	.+18     	; 0x3282 <fputc+0x26>
    3270:	1f ef       	ldi	r17, 0xFF	; 255
    3272:	0f ef       	ldi	r16, 0xFF	; 255
    3274:	81 2f       	mov	r24, r17
    3276:	90 2f       	mov	r25, r16
    3278:	df 91       	pop	r29
    327a:	cf 91       	pop	r28
    327c:	1f 91       	pop	r17
    327e:	0f 91       	pop	r16
    3280:	08 95       	ret
    3282:	82 ff       	sbrs	r24, 2
    3284:	14 c0       	rjmp	.+40     	; 0x32ae <fputc+0x52>
    3286:	2e 81       	ldd	r18, Y+6	; 0x06
    3288:	3f 81       	ldd	r19, Y+7	; 0x07
    328a:	8c 81       	ldd	r24, Y+4	; 0x04
    328c:	9d 81       	ldd	r25, Y+5	; 0x05
    328e:	28 17       	cp	r18, r24
    3290:	39 07       	cpc	r19, r25
    3292:	3c f4       	brge	.+14     	; 0x32a2 <fputc+0x46>
    3294:	e8 81       	ld	r30, Y
    3296:	f9 81       	ldd	r31, Y+1	; 0x01
    3298:	cf 01       	movw	r24, r30
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	99 83       	std	Y+1, r25	; 0x01
    329e:	88 83       	st	Y, r24
    32a0:	10 83       	st	Z, r17
    32a2:	8e 81       	ldd	r24, Y+6	; 0x06
    32a4:	9f 81       	ldd	r25, Y+7	; 0x07
    32a6:	01 96       	adiw	r24, 0x01	; 1
    32a8:	9f 83       	std	Y+7, r25	; 0x07
    32aa:	8e 83       	std	Y+6, r24	; 0x06
    32ac:	e3 cf       	rjmp	.-58     	; 0x3274 <fputc+0x18>
    32ae:	e8 85       	ldd	r30, Y+8	; 0x08
    32b0:	f9 85       	ldd	r31, Y+9	; 0x09
    32b2:	81 2f       	mov	r24, r17
    32b4:	09 95       	icall
    32b6:	89 2b       	or	r24, r25
    32b8:	a1 f3       	breq	.-24     	; 0x32a2 <fputc+0x46>
    32ba:	da cf       	rjmp	.-76     	; 0x3270 <fputc+0x14>

000032bc <__ultoa_invert>:
__ultoa_invert():
    32bc:	fa 01       	movw	r30, r20
    32be:	aa 27       	eor	r26, r26
    32c0:	28 30       	cpi	r18, 0x08	; 8
    32c2:	51 f1       	breq	.+84     	; 0x3318 <__ultoa_invert+0x5c>
    32c4:	20 31       	cpi	r18, 0x10	; 16
    32c6:	81 f1       	breq	.+96     	; 0x3328 <__ultoa_invert+0x6c>
    32c8:	e8 94       	clt
    32ca:	6f 93       	push	r22
    32cc:	6e 7f       	andi	r22, 0xFE	; 254
    32ce:	6e 5f       	subi	r22, 0xFE	; 254
    32d0:	7f 4f       	sbci	r23, 0xFF	; 255
    32d2:	8f 4f       	sbci	r24, 0xFF	; 255
    32d4:	9f 4f       	sbci	r25, 0xFF	; 255
    32d6:	af 4f       	sbci	r26, 0xFF	; 255
    32d8:	b1 e0       	ldi	r27, 0x01	; 1
    32da:	3e d0       	rcall	.+124    	; 0x3358 <__ultoa_invert+0x9c>
    32dc:	b4 e0       	ldi	r27, 0x04	; 4
    32de:	3c d0       	rcall	.+120    	; 0x3358 <__ultoa_invert+0x9c>
    32e0:	67 0f       	add	r22, r23
    32e2:	78 1f       	adc	r23, r24
    32e4:	89 1f       	adc	r24, r25
    32e6:	9a 1f       	adc	r25, r26
    32e8:	a1 1d       	adc	r26, r1
    32ea:	68 0f       	add	r22, r24
    32ec:	79 1f       	adc	r23, r25
    32ee:	8a 1f       	adc	r24, r26
    32f0:	91 1d       	adc	r25, r1
    32f2:	a1 1d       	adc	r26, r1
    32f4:	6a 0f       	add	r22, r26
    32f6:	71 1d       	adc	r23, r1
    32f8:	81 1d       	adc	r24, r1
    32fa:	91 1d       	adc	r25, r1
    32fc:	a1 1d       	adc	r26, r1
    32fe:	20 d0       	rcall	.+64     	; 0x3340 <__ultoa_invert+0x84>
    3300:	09 f4       	brne	.+2      	; 0x3304 <__ultoa_invert+0x48>
    3302:	68 94       	set
    3304:	3f 91       	pop	r19
    3306:	2a e0       	ldi	r18, 0x0A	; 10
    3308:	26 9f       	mul	r18, r22
    330a:	11 24       	eor	r1, r1
    330c:	30 19       	sub	r19, r0
    330e:	30 5d       	subi	r19, 0xD0	; 208
    3310:	31 93       	st	Z+, r19
    3312:	de f6       	brtc	.-74     	; 0x32ca <__ultoa_invert+0xe>
    3314:	cf 01       	movw	r24, r30
    3316:	08 95       	ret
    3318:	46 2f       	mov	r20, r22
    331a:	47 70       	andi	r20, 0x07	; 7
    331c:	40 5d       	subi	r20, 0xD0	; 208
    331e:	41 93       	st	Z+, r20
    3320:	b3 e0       	ldi	r27, 0x03	; 3
    3322:	0f d0       	rcall	.+30     	; 0x3342 <__ultoa_invert+0x86>
    3324:	c9 f7       	brne	.-14     	; 0x3318 <__ultoa_invert+0x5c>
    3326:	f6 cf       	rjmp	.-20     	; 0x3314 <__ultoa_invert+0x58>
    3328:	46 2f       	mov	r20, r22
    332a:	4f 70       	andi	r20, 0x0F	; 15
    332c:	40 5d       	subi	r20, 0xD0	; 208
    332e:	4a 33       	cpi	r20, 0x3A	; 58
    3330:	18 f0       	brcs	.+6      	; 0x3338 <__ultoa_invert+0x7c>
    3332:	49 5d       	subi	r20, 0xD9	; 217
    3334:	31 fd       	sbrc	r19, 1
    3336:	40 52       	subi	r20, 0x20	; 32
    3338:	41 93       	st	Z+, r20
    333a:	02 d0       	rcall	.+4      	; 0x3340 <__ultoa_invert+0x84>
    333c:	a9 f7       	brne	.-22     	; 0x3328 <__ultoa_invert+0x6c>
    333e:	ea cf       	rjmp	.-44     	; 0x3314 <__ultoa_invert+0x58>
    3340:	b4 e0       	ldi	r27, 0x04	; 4
    3342:	a6 95       	lsr	r26
    3344:	97 95       	ror	r25
    3346:	87 95       	ror	r24
    3348:	77 95       	ror	r23
    334a:	67 95       	ror	r22
    334c:	ba 95       	dec	r27
    334e:	c9 f7       	brne	.-14     	; 0x3342 <__ultoa_invert+0x86>
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	61 05       	cpc	r22, r1
    3354:	71 05       	cpc	r23, r1
    3356:	08 95       	ret
    3358:	9b 01       	movw	r18, r22
    335a:	ac 01       	movw	r20, r24
    335c:	0a 2e       	mov	r0, r26
    335e:	06 94       	lsr	r0
    3360:	57 95       	ror	r21
    3362:	47 95       	ror	r20
    3364:	37 95       	ror	r19
    3366:	27 95       	ror	r18
    3368:	ba 95       	dec	r27
    336a:	c9 f7       	brne	.-14     	; 0x335e <__ultoa_invert+0xa2>
    336c:	62 0f       	add	r22, r18
    336e:	73 1f       	adc	r23, r19
    3370:	84 1f       	adc	r24, r20
    3372:	95 1f       	adc	r25, r21
    3374:	a0 1d       	adc	r26, r0
    3376:	08 95       	ret

00003378 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    3378:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    337a:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    337c:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    337e:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    3380:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    3382:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    3384:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    3386:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    3388:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    338a:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    338c:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    338e:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    3390:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    3392:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    3394:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    3396:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    3398:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    339a:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    339c:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    339e:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    33a0:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    33a2:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    33a4:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    33a6:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    33a8:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    33aa:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    33ac:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    33ae:	09 94       	ijmp

000033b0 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    33b0:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    33b2:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    33b4:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    33b6:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    33b8:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    33ba:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    33bc:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    33be:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    33c0:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    33c2:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    33c4:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    33c6:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    33c8:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    33ca:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    33cc:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    33ce:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    33d0:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    33d2:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    33d4:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    33d6:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    33d8:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    33da:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    33dc:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    33de:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    33e0:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    33e2:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    33e4:	08 95       	ret

000033e6 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    33e6:	f8 94       	cli

000033e8 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    33e8:	ff cf       	rjmp	.-2      	; 0x33e8 <__stop_program>
